[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Diplomado en IA Aplicada a la Educación",
    "section": "",
    "text": "Bienvenido",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#de-qué-trata-este-curso",
    "href": "index.html#de-qué-trata-este-curso",
    "title": "Django y React 2024",
    "section": "¿De qué trata este curso?",
    "text": "¿De qué trata este curso?\nEste curso completo me llevará desde los fundamentos básicos de la programación hasta la construcción de aplicaciones prácticas utilizando los frameworks Django y la biblioteca de React.\nA través de una combinación de teoría y ejercicios prácticos, me sumergiré en los conceptos esenciales del desarrollo web y avanzaré hacia la creación de proyectos del mundo real.\nDesde la configuración del entorno de desarrollo hasta la construcción de una aplicación web de pila completa, este curso me proporcionará una comprensión sólida y experiencia práctica con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-curso",
    "href": "index.html#para-quién-es-este-curso",
    "title": "Django y React 2024",
    "section": "¿Para quién es este curso?",
    "text": "¿Para quién es este curso?\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación.\nYa sea que sea un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que quiere aprender desarrollo web, este curso es para usted. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo del desarrollo web con Django y React.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Diplomado en IA Aplicada a la Educación",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\nValoramos tu contribución a este diplomado. Si encuentras algún error, deseas sugerir mejoras o agregar contenido adicional, me encantaría saber de ti.\nPuedes contribuir a través del repositorio en línea, donde puedes compartir tus comentarios y sugerencias.\nJuntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la inteligencia artificial.\nEste ebook ha sido creado con el objetivo de proporcionar acceso gratuito y universal al conocimiento.\nEstará disponible en línea para cualquier persona, sin importar su ubicación o circunstancias, para acceder y aprender a su propio ritmo.\nPuedes descargarlo en formato PDF, EPUB o verlo en línea en cualquier momento y lugar.\n¡Esperamos que disfrutes este emocionante viaje de aprendizaje y descubrimiento en el mundo de la inteligencia artificial aplicada a la educación!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#qué-es-git-y-github",
    "href": "unidades/unidad1/1_git_y_github.html#qué-es-git-y-github",
    "title": "Git y GitHub 🕹️",
    "section": "¿Qué es Git y GitHub? 🕹️",
    "text": "¿Qué es Git y GitHub? 🕹️\n\nGit y GitHub son herramientas ampliamente utilizadas en el desarrollo de software para el control de versiones y la colaboración en proyectos.\nGit es un sistema de control de versiones distribuido que permite realizar un seguimiento de los cambios en el código fuente durante el desarrollo de software. Fue creado por Linus Torvalds en 2005 y se utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario.\nGitHub, por otro lado, es una plataforma de alojamiento de repositorios Git en la nube. Proporciona un entorno colaborativo donde los desarrolladores pueden compartir y trabajar en proyectos de software de forma conjunta. Además, ofrece características adicionales como seguimiento de problemas, solicitudes de extracción y despliegue continuo.\n\nEn este tutorial, aprenderás los conceptos básicos de Git y GitHub, así como su uso en un proyecto de software real.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#quiénes-utilizan-git",
    "href": "unidades/unidad1/1_git_y_github.html#quiénes-utilizan-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Quiénes utilizan Git? 🌍",
    "text": "¿Quiénes utilizan Git? 🌍",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#cómo-se-utiliza-git",
    "href": "unidades/unidad1/1_git_y_github.html#cómo-se-utiliza-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Cómo se utiliza Git? 💻",
    "text": "¿Cómo se utiliza Git? 💻\n\n\n\nGit en Terminal\n\n\nSe utiliza mediante la línea de comandos o a través de interfaces gráficas de usuario. Proporciona comandos para realizar operaciones como:\n\nInicializar un repositorio,\nRealizar cambios,\nRevisar historial,\nFusionar ramas,\nEntre otros.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#para-qué-sirve-git",
    "href": "unidades/unidad1/1_git_y_github.html#para-qué-sirve-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Para qué sirve Git? 📝",
    "text": "¿Para qué sirve Git? 📝\n\n\n\n\nSeguimiento de Cambios con Git\n\n\n\nSirve para realizar un seguimiento de los cambios en el código fuente, coordinar el trabajo entre varios desarrolladores, revertir cambios no deseados y mantener un historial completo de todas las modificaciones realizadas en un proyecto.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#por-qué-utilizar-git",
    "href": "unidades/unidad1/1_git_y_github.html#por-qué-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Por qué utilizar Git? 🤔",
    "text": "¿Por qué utilizar Git? 🤔\n\n\n\n\nVentajas de Git\n\n\n\nOfrece varias ventajas, como:\n\nLa capacidad de trabajar de forma distribuida\nLa gestión eficiente de ramas para desarrollar nuevas funcionalidades\nCorregir errores sin afectar la rama principal\nLa posibilidad de colaborar de forma efectiva con otros desarrolladores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#dónde-puedo-utilizar-git",
    "href": "unidades/unidad1/1_git_y_github.html#dónde-puedo-utilizar-git",
    "title": "Git y GitHub 🕹️",
    "section": "¿Dónde puedo utilizar Git? 🌐",
    "text": "¿Dónde puedo utilizar Git? 🌐\n\n\n\n\nGit en Diferentes Sistemas Operativos\n\n\n\nPuede ser utilizado en cualquier sistema operativo, incluyendo Windows, macOS y Linux. Además, es compatible con una amplia variedad de plataformas de alojamiento de repositorios, siendo GitHub una de las más populares.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#pasos-básicos",
    "href": "unidades/unidad1/1_git_y_github.html#pasos-básicos",
    "title": "Git y GitHub 🕹️",
    "section": "Pasos Básicos 📝",
    "text": "Pasos Básicos 📝",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#instalación-de-visual-studio-code",
    "href": "unidades/unidad1/1_git_y_github.html#instalación-de-visual-studio-code",
    "title": "Git y GitHub 🕹️",
    "section": "Instalación de Visual Studio Code 📥",
    "text": "Instalación de Visual Studio Code 📥\n\n\n\nVisual Studio Code",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#introducción",
    "href": "unidades/unidad1/1_git_y_github.html#introducción",
    "title": "Git y GitHub 🕹️",
    "section": "Introducción",
    "text": "Introducción",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "href": "unidades/unidad1/1_git_y_github.html#sección-1-modificar-archivos-en-el-repositorio",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 1: Modificar Archivos en el Repositorio",
    "text": "Sección 1: Modificar Archivos en el Repositorio\nEn esta sección, aprenderemos cómo realizar cambios en nuestros archivos y reflejarlos en Git.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "href": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Local a Staging:",
    "text": "Mover Cambios de Local a Staging:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nModifica el mensaje de bienvenida a “Bienvenido” en lugar de “Bienvenio”.\nGuarda los cambios y abre una terminal en Visual Studio Code.\n\nHemos corregido un error en nuestro archivo y queremos reflejarlo en Git.\ndef welcome_message():\n    name = input(\"Ingrese su nombre: \")\n    print(\"Bienvenido,\", name, \"al curso de Django y React!\")\n\nif __name__ == \"__main__\":\n    welcome_message()",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "href": "unidades/unidad1/1_git_y_github.html#agregar-cambios-de-local-a-staging",
    "title": "Git y GitHub 🕹️",
    "section": "Agregar Cambios de Local a Staging:",
    "text": "Agregar Cambios de Local a Staging:\ngit add hello_world.py\nHemos añadido los cambios al área de preparación y están listos para ser confirmados en el próximo commit.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "href": "unidades/unidad1/1_git_y_github.html#sección-2-confirmar-cambios-en-un-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 2: Confirmar Cambios en un Commit",
    "text": "Sección 2: Confirmar Cambios en un Commit\nEn esta sección, aprenderemos cómo confirmar los cambios en un commit y guardarlos de manera permanente en nuestro repositorio.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "href": "unidades/unidad1/1_git_y_github.html#mover-cambios-de-staging-a-commit",
    "title": "Git y GitHub 🕹️",
    "section": "Mover Cambios de Staging a Commit:",
    "text": "Mover Cambios de Staging a Commit:\ngit commit -m \"Corregir mensaje de bienvenida\"\nHemos confirmado los cambios en un commit con un mensaje descriptivo.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "href": "unidades/unidad1/1_git_y_github.html#sección-3-creación-y-fusión-de-ramas",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 3: Creación y Fusión de Ramas",
    "text": "Sección 3: Creación y Fusión de Ramas\nEn esta sección, aprenderemos cómo crear y fusionar ramas en Git para desarrollar nuevas funcionalidades de forma aislada.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#crear-una-nueva-rama",
    "href": "unidades/unidad1/1_git_y_github.html#crear-una-nueva-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Crear una Nueva Rama:",
    "text": "Crear una Nueva Rama:\ngit branch feature\nHemos creado una nueva rama llamada “feature” para desarrollar una nueva funcionalidad.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "href": "unidades/unidad1/1_git_y_github.html#implementar-funcionalidades-en-la-rama",
    "title": "Git y GitHub 🕹️",
    "section": "Implementar Funcionalidades en la Rama:",
    "text": "Implementar Funcionalidades en la Rama:\n\nAbre el archivo hello_world.py en Visual Studio Code.\nAñade una nueva función para mostrar un mensaje de despedida.\nGuarda los cambios y abre una terminal en Visual Studio Code.\nAñade los cambios al área de preparación y confírmalos en un commit.\nCambia a la rama principal con git checkout main.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "href": "unidades/unidad1/1_git_y_github.html#fusionar-ramas-con-la-rama-principal",
    "title": "Git y GitHub 🕹️",
    "section": "Fusionar Ramas con la Rama Principal:",
    "text": "Fusionar Ramas con la Rama Principal:\ngit merge feature\nHemos fusionado la rama “feature” con la rama principal y añadido la nueva funcionalidad al proyecto.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "href": "unidades/unidad1/1_git_y_github.html#sección-4-revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Sección 4: Revertir Cambios en un Archivo",
    "text": "Sección 4: Revertir Cambios en un Archivo\nEn esta sección, aprenderemos cómo revertir cambios en un archivo y deshacerlos en Git.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "href": "unidades/unidad1/1_git_y_github.html#revertir-cambios-en-un-archivo",
    "title": "Git y GitHub 🕹️",
    "section": "Revertir Cambios en un Archivo:",
    "text": "Revertir Cambios en un Archivo:\ngit reset hello_world.py\nHemos revertido los cambios en el archivo hello_world.py y deshecho las modificaciones realizadas.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/1_git_y_github.html#conclusión",
    "href": "unidades/unidad1/1_git_y_github.html#conclusión",
    "title": "Git y GitHub 🕹️",
    "section": "Conclusión",
    "text": "Conclusión\nEn este tutorial, hemos aprendido a gestionar cambios en nuestro proyecto y moverlos entre diferentes estados en Git. Estos conceptos son fundamentales para trabajar de forma eficiente en proyectos de software y colaborar con otros desarrolladores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Git y GitHub 🕹️</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html",
    "href": "unidades/unidad1/2_github_classroom.html",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "¿Qué es GitHub Classroom? 🤔",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#qué-es-github-classroom",
    "href": "unidades/unidad1/2_github_classroom.html#qué-es-github-classroom",
    "title": "GitHub Classroom 📒",
    "section": "",
    "text": "Github Classroom Windows\n\n\n\n\nGitHub Classroom es una extensión de GitHub que permite a los profesores crear y gestionar asignaciones utilizando repositorios de GitHub. Proporciona una forma organizada y eficiente de distribuir tareas a los estudiantes, recopilar y revisar su trabajo, y proporcionar retroalimentación.\n\n\nFuncionalidades Principales ⚙️\n\nCreación de Asignaciones: Los profesores pueden crear tareas y asignaciones directamente desde GitHub Classroom, proporcionando instrucciones detalladas y estableciendo criterios de evaluación.\nDistribución Automatizada: Una vez que se crea una asignación, GitHub Classroom genera automáticamente repositorios privados para cada estudiante o equipo, basándose en una plantilla predefinida.\nSeguimiento de Progreso: Los profesores pueden realizar un seguimiento del progreso de los estudiantes y revisar sus contribuciones a través de solicitudes de extracción (pull requests) y comentarios en el código.\nRevisión y Retroalimentación: Los estudiantes envían sus trabajos a través de solicitudes de extracción, lo que permite a los profesores revisar y proporcionar retroalimentación específica sobre su código.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#ejemplo-práctico",
    "href": "unidades/unidad1/2_github_classroom.html#ejemplo-práctico",
    "title": "GitHub Classroom 📒",
    "section": "Ejemplo Práctico",
    "text": "Ejemplo Práctico\n\nCreación de una Asignación en GitHub Classroom 📒\n\nIniciar Sesión: Ingresa a GitHub Classroom con tu cuenta de GitHub y selecciona la opción para crear una nueva asignación.\n\n\n\n\n\nDefinir la Tarea: Proporciona instrucciones claras y detalladas sobre la tarea, incluyendo cualquier código base o recursos necesarios. Establece los criterios de evaluación para guiar a los estudiantes.\n\n\n\n\n\nConfigurar la Plantilla: Selecciona una plantilla de repositorio existente o crea una nueva plantilla que servirá como base para los repositorios de los estudiantes.\n\n\n\n\n\nDistribuir la Asignación: Una vez configurada la asignación, comparte el enlace generado con tus estudiantes para que puedan acceder a sus repositorios privados.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/2_github_classroom.html#trabajo-de-los-estudiantes",
    "href": "unidades/unidad1/2_github_classroom.html#trabajo-de-los-estudiantes",
    "title": "GitHub Classroom 📒",
    "section": "Trabajo de los Estudiantes 🧑‍💻",
    "text": "Trabajo de los Estudiantes 🧑‍💻\n\nAceptar la Asignación: Los estudiantes reciben el enlace de la asignación y aceptan la tarea, lo que les permite crear un repositorio privado basado en la plantilla proporcionada.\n\n\n\n\n\nActualizar el Navegador: Los estudiantes actualizan su navegador para ver el nuevo repositorio creado en su cuenta de GitHub.\n\n\n\n\n\nClonar el Repositorio: Los estudiantes clonan el repositorio asignado en su computadora local utilizando el enlace proporcionado.\n\n\n\n\n\nUtilizar el comando git clone: Aplique el comando git clone para clonar el repositorio en su computadora local.\ngit clone &lt;enlace-del-repositorio&gt;\n\n\n\n\n\nDesarrollar la Tarea: Los estudiantes trabajan en la tarea, realizando los cambios necesarios y realizando commits de manera regular para mantener un historial de su trabajo.\n\n\n\n\n\n\nTip\n\n\n\nPuedes probar el test incorporado con el comando pytest en la terminal, para verificar que el código cumple con los requerimientos\n\n\npytest\nUna vez desarrollado el código de acuerdo a la asignación en local deberían pasar el o los test\n\n\n\n\n\nEnviar la Solicitud de Extracción: Una vez completada la tarea, los estudiantes envían una solicitud de extracción desde su rama hacia la rama principal del repositorio, solicitando la revisión del profesor.\n\n\n\n\n\nUna vez realizado el push se envía al respositorio principal y se ejecutan los test en Github\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\n\n\n\n\nEste Action lo que hace es evaluar los cambios realizados\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda hacer las pruebas en local antes de enviar los cambios al respositorio en Github\n\n\n\nRevisión y Retroalimentación: Los profesores revisan las solicitudes de extracción, proporcionan comentarios sobre el código y evalúan el trabajo de los estudiantes según los criterios establecidos.\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nGitHub Classroom ofrece una manera eficiente y organizada de administrar tareas y asignaciones en entornos educativos, fomentando la colaboración, el aprendizaje y la retroalimentación efectiva entre profesores y estudiantes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>GitHub Classroom 📒</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html",
    "href": "unidades/unidad1/3_docker.html",
    "title": "Docker 🐋",
    "section": "",
    "text": "Conceptos Básicos de Docker 📒",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#imagen",
    "href": "unidades/unidad1/3_docker.html#imagen",
    "title": "Docker 🐋",
    "section": "Imagen",
    "text": "Imagen\ndocker pull python:3.9-slim\n\nUna imagen de Docker es un paquete de software ligero y portátil que incluye todo lo necesario para ejecutar una aplicación, incluidos el código, las bibliotecas y las dependencias. Las imágenes se utilizan como plantillas para crear contenedores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#contenedor",
    "href": "unidades/unidad1/3_docker.html#contenedor",
    "title": "Docker 🐋",
    "section": "Contenedor 📦",
    "text": "Contenedor 📦\ndocker run -d -p 5000:5000 myapp\n\nUn contenedor de Docker es una instancia en tiempo de ejecución de una imagen de Docker. Los contenedores son entornos aislados que ejecutan aplicaciones de forma independiente y comparten recursos del sistema operativo subyacente. Cada contenedor está aislado del entorno de host y otros contenedores, lo que garantiza la consistencia y la portabilidad de las aplicaciones.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#dockerfile",
    "href": "unidades/unidad1/3_docker.html#dockerfile",
    "title": "Docker 🐋",
    "section": "Dockerfile 📘",
    "text": "Dockerfile 📘\n# Dockerfile\n# Define la imagen base\nFROM python:3.9-slim\n\n# Instala las dependencias necesarias\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Establece el directorio de trabajo\nWORKDIR /app\n\n# Copia los archivos de la aplicación al contenedor\nCOPY . .\n\n# Instala las dependencias de Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Establece el comando por defecto para ejecutar la aplicación\nCMD [\"python\", \"app.py\"]\n\nUn Dockerfile es un archivo de texto que contiene instrucciones para construir una imagen de Docker. Especifica qué software se instalará en la imagen y cómo configurar el entorno de ejecución. Los Dockerfiles permiten a los desarrolladores definir de manera reproducible el entorno de ejecución de sus aplicaciones y automatizar el proceso de construcción de imágenes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#docker-compose",
    "href": "unidades/unidad1/3_docker.html#docker-compose",
    "title": "Docker 🐋",
    "section": "Docker Compose 📙",
    "text": "Docker Compose 📙\n# docker-compose.yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/app\n    environment:\n      FLASK_ENV: development\n\nDocker Compose es una herramienta que permite definir y ejecutar aplicaciones Docker multi-contenedor. Permite gestionar la configuración de varios contenedores como un solo servicio, lo que facilita el despliegue y la gestión de aplicaciones complejas que constan de múltiples componentes.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#definir-un-dockerfile",
    "href": "unidades/unidad1/3_docker.html#definir-un-dockerfile",
    "title": "Docker 🐋",
    "section": "Definir un Dockerfile 📘",
    "text": "Definir un Dockerfile 📘\n# Dockerfile\n# Define la imagen base\nFROM python:3.9-slim\n\n# Instala las dependencias necesarias\nRUN apt-get update && apt-get install -y \\\n    build-essential \\\n    libpq-dev \\\n    libffi-dev \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Establece el directorio de trabajo\nWORKDIR /app\n\n# Copia los archivos de la aplicación al contenedor\nCOPY . .\n\n# Instala las dependencias de Python\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Establece el comando por defecto para ejecutar la aplicación\nCMD [\"python\", \"app.py\"]\n\nPara utilizar Docker, primero se crea un Dockerfile que especifica cómo construir la imagen de Docker, incluidas las dependencias y la configuración del entorno. El Dockerfile define las capas de la imagen y las instrucciones para configurar el entorno de ejecución de la aplicación.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#construir-la-imagen",
    "href": "unidades/unidad1/3_docker.html#construir-la-imagen",
    "title": "Docker 🐋",
    "section": "Construir la Imagen 💿",
    "text": "Construir la Imagen 💿\ndocker build -t myapp .\n\nUna vez que se tiene el Dockerfile, se utiliza el comando docker build para construir la imagen de Docker a partir del Dockerfile. Este comando lee las instrucciones del Dockerfile y crea una imagen en función de esas instrucciones. La imagen resultante se puede utilizar para crear y ejecutar contenedores.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#ejecutar-un-contenedor",
    "href": "unidades/unidad1/3_docker.html#ejecutar-un-contenedor",
    "title": "Docker 🐋",
    "section": "Ejecutar un Contenedor 🖥️",
    "text": "Ejecutar un Contenedor 🖥️\ndocker run -d -p 5000:5000 myapp\n\nDespués de construir la imagen, se ejecuta un contenedor utilizando el comando docker run, especificando la imagen que se utilizará y cualquier configuración adicional necesaria, como puertos expuestos, variables de entorno y volúmenes montados. El contenedor se ejecuta en un entorno aislado y se puede acceder a través de la red local o de Internet, según la configuración.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#gestionar-contenedores",
    "href": "unidades/unidad1/3_docker.html#gestionar-contenedores",
    "title": "Docker 🐋",
    "section": "Gestionar Contenedores 📦",
    "text": "Gestionar Contenedores 📦\ndocker ps\ndocker stop &lt;container_id&gt;\ndocker rm &lt;container_id&gt;\n\nDocker proporciona varios comandos para gestionar contenedores, como docker ps para ver contenedores en ejecución, docker stop para detener un contenedor y docker rm para eliminar un contenedor. Estos comandos permiten a los usuarios administrar y controlar el ciclo de vida de los contenedores de manera eficiente.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/3_docker.html#docker-compose-1",
    "href": "unidades/unidad1/3_docker.html#docker-compose-1",
    "title": "Docker 🐋",
    "section": "Docker Compose 📙",
    "text": "Docker Compose 📙\n# docker-compose.yml\nversion: '3'\nservices:\n  web:\n    build: .\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - .:/app\n    environment:\n      FLASK_ENV: development\n\nPara aplicaciones más complejas que requieren múltiples contenedores, se utiliza Docker Compose para definir y gestionar la configuración de los contenedores en un archivo YAML. Luego, se utiliza el comando docker-compose para gestionar los servicios definidos en el archivo YAML, lo que simplifica el despliegue y la gestión de aplicaciones multi-contenedor.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Docker 🐋</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/1_introduccion.html",
    "href": "unidades/unidad2/1_introduccion.html",
    "title": "Hola Mundo en Python",
    "section": "",
    "text": "Introdución 🫥\n\nEn este tutorial aprenderemos los conceptos básicos necesarios para configurar nuestro entorno de desarrollo y escribir código en Python. Comenzaremos con la instalación de Python en Windows y luego veremos cómo escribir y ejecutar nuestro primer programa en Python utilizando Visual Studio Code como nuestro editor de texto.\n\n\nPaso 1: Instalación de Python 🐍\nPara poder escribir y ejecutar programas en Python, primero necesitamos instalar Python en nuestra computadora. Python es un lenguaje de programación de alto nivel que es ampliamente utilizado en el desarrollo de aplicaciones web, desarrollo de software, análisis de datos, inteligencia artificial, etc.\n\n\n\n\n\n\nNote\n\n\n\nPython se puede instalar en Windows, Mac y Linux. En este tutorial, veremos cómo instalar Python en Windows.\n\n\n\n\nPaso 2: Instalación de Python en Windows 🪟\n\nDescargar Python\n\nPara instalar Python en Windows, primero necesitamos descargar el instalador de Python desde el sitio web oficial de Python. Para hacer esto, abra su navegador web y vaya a la página de descargas de Python en el siguiente enlace:\n\nhttps://www.python.org/downloads/\n\n\nEn la página de descargas, haga clic en el botón de descarga para la última versión de Python. En el momento de escribir este tutorial, la última versión de Python es 3.12.1\n\nExcelente, ahora que hemos descargado el instalador de Python, podemos continuar con la instalación de Python en Windows.\n\nInstalar Python\n\nUna vez que el instalador de Python se haya descargado, haga doble clic en el archivo de instalación para iniciar el proceso de instalación. Asegúrese de marcar la casilla que dice “Add Python 3.12 to PATH” antes de hacer clic en el botón “Install Now”.\n\n\n\nAhora que hemos instalado Python en nuestra computadora, podemos continuar con la configuración de nuestro entorno de desarrollo para escribir y ejecutar programas en Python.\n\nComprobar que tenemos instalado Python\n\nPara comprobar que Python se ha instalado correctamente en nuestra computadora, abra una ventana de comandos y escriba el siguiente comando:\npython --version\n\nImpresion de la versión de Python\n\nEste comando imprimirá la versión de Python que está instalada en su computadora. En mi caso, la versión de Python es 3.12.1.\n\n\n\n\n\nPaso 3: Crear nuestro primer “Hola Mundo” en Python 🗺️.\nAhora que hemos instalado Python en nuestra computadora, podemos comenzar a escribir y ejecutar programas en Python. Para hacer esto, necesitamos un editor de texto para escribir nuestro código y un intérprete de Python para ejecutar nuestro código.\nEn este tutorial, usaremos Visual Studio Code como nuestro editor de texto y el intérprete de Python que instalamos en el paso anterior.\n\nInstalar Visual Studio Code\n\nPara instalar Visual Studio Code, vaya al sitio web oficial de Visual Studio Code en el siguiente enlace:\n\nhttps://code.visualstudio.com/\n\n\n\n\nEn la página de descargas, haga clic en el botón de descarga para su sistema operativo. En el momento de escribir este tutorial, la última versión de Visual Studio Code es 1.85.2.\nUna vez que el instalador de Visual Studio Code se haya descargado, haga doble clic en el archivo de instalación para iniciar el proceso de instalación. Siga las instrucciones en pantalla para completar la instalación.\n\n\n\n\nCrear un nuevo archivo de Python\n\nPara crear un nuevo archivo de Python en Visual Studio Code, abra Visual Studio Code y haga clic en el botón “New File” en la barra de herramientas. Luego, escriba el siguiente código en el archivo:\nprint(\"Hola Mundo\")\n\nEste código imprimirá “Hola Mundo” en la consola.\n\n\n\n\n\nEjecutar el programa\n\nPara ejecutar el programa, haga clic en el botón “Run” en la barra de herramientas. Esto ejecutará el programa y mostrará “Hola Mundo” en la consola.\n\n\n\n\n¡Felicidades!\nAcabas de escribir y ejecutar tu primer programa en Python. Ahora que has configurado tu entorno de desarrollo y has escrito tu primer programa en Python, puedes comenzar a explorar el lenguaje de programación Python y aprender a escribir programas más complejos.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Hola Mundo en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html",
    "title": "Sintaxis Básica",
    "section": "",
    "text": "Comentarios\nLos comentarios en python se escriben con el símbolo #.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#objetivo",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#objetivo",
    "title": "Sintaxis Básica",
    "section": "Objetivo",
    "text": "Objetivo\nEl objetivo de este repositorio es proporcionar una serie de ejercicios de Python básico para que los principiantes en Python puedan practicar y adquirir experiencia en la sintaxis y estructura de Python.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#qué-debes-hacer",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#qué-debes-hacer",
    "title": "Sintaxis Básica",
    "section": "¿Qué debes hacer?",
    "text": "¿Qué debes hacer?\nDebes Completar cada uno de los ejercicios propuetos a continuación cada uno en su respectivo archivo, el objetivo es adquirir práctica en la sintaxis y estructura de Python. Ejercicios\n\nImprimir Nombre: Un programa simple que imprime tu nombre en la pantalla.\nSuma de los Números del 1 al 10: Un programa que calcula la suma de los números del 1 al 10.\nDatos Personales: Un programa que almacena tu edad, nombre y estatura en variables y las imprime en pantalla.\nPar o Impar: Un programa que determina si un número ingresado por el usuario es par o impar.\nÁrea de un Círculo: Una función que calcula el área de un círculo dado su radio.\nSuma de Dos Números: Una función que recibe dos números como argumentos y devuelve su suma.\nÁrea de un Círculo con Parámetro: Modificación de la función de área de un círculo para recibir el radio como parámetro.\nConversión de Temperatura: Un programa que convierte grados Celsius a Fahrenheit y viceversa.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#pruebas",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#pruebas",
    "title": "Sintaxis Básica",
    "section": "Pruebas",
    "text": "Pruebas\nCada ejercicio tiene su archivo de prueba en el que se utilizan las aserciones de pytest para verificar su correcto funcionamiento. Si por ejemplo quiero aplicar el test del primer ejercicio debo completar el primer ejercicio y comentar los demás, luego ejecutar el comando pytest test_1.py para verificar que el programa funciona correctamente, luego continuar con cada uno de ellos e ir aplicando los test, hasta que al final todos los test pasen y completar la tarea",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/2_variable_y_control_de_flujo.html#ejecución",
    "href": "unidades/unidad2/2_variable_y_control_de_flujo.html#ejecución",
    "title": "Sintaxis Básica",
    "section": "Ejecución",
    "text": "Ejecución\nPara ejecutar cada programa, simplemente ejecute el archivo programa.py. Los archivos de prueba se pueden ejecutar con el comando pytest.",
    "crumbs": [
      "Unidad 2: Python Básico",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Sintaxis Básica</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html",
    "href": "unidades/unidad3/3_listas_tuplas.html",
    "title": "Listas",
    "section": "",
    "text": "Tuplas\nLas tuplas son un tipo de dato que nos permite almacenar diferentes valores, en una sola variable.\nEjemplo:\nEjercicio:\nCrear una tupla con los números del 1 al 10, y mostrarla en pantalla.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#descripción-de-la-asignación",
    "href": "unidades/unidad3/3_listas_tuplas.html#descripción-de-la-asignación",
    "title": "Listas",
    "section": "Descripción de la Asignación",
    "text": "Descripción de la Asignación\nEl archivo ejercicio.py contiene un script que pide al usuario que ingrese una lista de compras. El usuario debe ingresar los elementos de la lista separados por comas. El script luego imprime la lista de compras.\nAdemás, el script contiene una función llamada convertir_lista_a_tupla() que está destinada a convertir la lista de compras en una tupla. Esta función aún no está completa.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#tarea-pendiente",
    "href": "unidades/unidad3/3_listas_tuplas.html#tarea-pendiente",
    "title": "Listas",
    "section": "Tarea Pendiente:",
    "text": "Tarea Pendiente:\n\nCompletar la función convertir_lista_a_tupla() para que convierta la lista de compras en una tupla.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#cómo-ejecutar-el-código",
    "href": "unidades/unidad3/3_listas_tuplas.html#cómo-ejecutar-el-código",
    "title": "Listas",
    "section": "Cómo Ejecutar el Código",
    "text": "Cómo Ejecutar el Código\nPara ejecutar el test puedes utilizar el siguiente comando en tu terminal:\npytest -s\nPytest es una biblioteca que facilita la escritura de pruebas en Python. El parámetro -s se utiliza para mostrar la salida de la prueba en la terminal.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/3_listas_tuplas.html#ejemplo-de-salida",
    "href": "unidades/unidad3/3_listas_tuplas.html#ejemplo-de-salida",
    "title": "Listas",
    "section": "Ejemplo de salida:",
    "text": "Ejemplo de salida:\n$ pytest -s\n================================================= test session starts =================================================\nplatform linux -- Python 3.8.10, pytest-6.2.4, pluggy-0.13.1\nrootdir: /home/user/Documentos/Python/Asignacion_Lista_Compras\ncollected 1 item\n\ntest_ejercicio.py Lista de Compras: [manzanas, peras, plátanos, uvas]\n\n================================================== 1 passed in 0.01s ==================================================\n\n\n\n\n\n\nTip\n\n\n\nSe sugiere que practique la sección Ejercicios Python - Nivel 3 para reforzar los conocimientos adquiridos.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Listas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/4_conjuntos_diccionarios.html#descripción",
    "href": "unidades/unidad3/4_conjuntos_diccionarios.html#descripción",
    "title": "Diccionarios",
    "section": "Descripción",
    "text": "Descripción\nEsta asignación consiste en corregir y ejecutar un test unitario para un diccionario de frutas. Instrucciones\n\nAbre el archivo ejercicio.py.\nCorrige el diccionario frutas para que tenga las siguientes parejas clave-valor:\n\n\"manzana\" - \"roja\"\n\"banana\" - \"amarilla\"\n\"pera\" - \"verde\"\n\"naranja\" - \"naranja\"\n\nGuarda y cierra el archivo ejercicio.py.\nEjecuta el test unitario test_ejercicio en tu terminal con el comando:\n\npython -m unittest test_ejercicio.py\n\nSi el test unitario se ejecuta sin errores, habrás completado la asignación.\nSi el test unitario arroja errores, corrige el diccionario frutas en ejercicio.py y vuelve a ejecutar el test unitario.\nRepite los pasos 4 a 6 hasta que el test unitario se ejecute sin errores.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Diccionarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/4_conjuntos_diccionarios.html#criterios-de-evaluación",
    "href": "unidades/unidad3/4_conjuntos_diccionarios.html#criterios-de-evaluación",
    "title": "Diccionarios",
    "section": "Criterios de Evaluación",
    "text": "Criterios de Evaluación\n\nEl diccionario frutas en ejercicio.py tiene las parejas clave-valor correctas.\nEl test unitario test_frutas en test_ejercicio.py se ejecuta sin errores.\n\n:::{.callout-tip} Se sugiere revisar la sección de Ejercicios Python - Nivel 4 para poder reforzar los conocimientos necesarios para completar esta sección.",
    "crumbs": [
      "Unidad 3: Python Intermedio",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Diccionarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html",
    "href": "unidades/unidad4/5_programacion_oo.html",
    "title": "Programación Orientada a Objetos",
    "section": "",
    "text": "Asignación\nhttps://classroom.github.com/a/LVvqQCln\nEn esta asignación, aprenderás sobre los conceptos básicos de Programación Orientada a Objetos (POO) mediante la implementación de clases en Python.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#instrucciones",
    "href": "unidades/unidad4/5_programacion_oo.html#instrucciones",
    "title": "Programación Orientada a Objetos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nLee cuidadosamente el contenido de este repositorio.\nImplementa las clases solicitadas en el archivo main.py.\nRealiza los commits y push necesarios para subir tus cambios a este repositorio.\nVerifica que tus cambios pasen todas las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#contenido-del-repositorio",
    "href": "unidades/unidad4/5_programacion_oo.html#contenido-del-repositorio",
    "title": "Programación Orientada a Objetos",
    "section": "Contenido del Repositorio",
    "text": "Contenido del Repositorio\n\nmain.py: Archivo principal donde implementarás tus clases.\ntest_main.py: Archivo de pruebas unitarias.\nREADME.md: Este archivo con las instrucciones de la asignación.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/5_programacion_oo.html#cómo-ejecutar-las-pruebas",
    "href": "unidades/unidad4/5_programacion_oo.html#cómo-ejecutar-las-pruebas",
    "title": "Programación Orientada a Objetos",
    "section": "Cómo Ejecutar las Pruebas",
    "text": "Cómo Ejecutar las Pruebas\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nEjecuta python -m unittest para correr las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Programación Orientada a Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html",
    "href": "unidades/unidad4/6_modulos.html",
    "title": "Módulos",
    "section": "",
    "text": "Paquetes\nUn paquete es un conjunto de módulos organizados en un directorio. Un paquete debe contener un archivo llamado __init__.py.py. Este archivo puede estar vacío o contener código de inicialización del paquete.\nEjemplo:\nEjercicio:\nCrear un paquete llamado operaciones que contenga los módulos suma.py, resta.py, multiplicacion.py y division.py. Cada módulo debe contener una función que realice la operación correspondiente.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#creación-de-módulos",
    "href": "unidades/unidad4/6_modulos.html#creación-de-módulos",
    "title": "Módulos",
    "section": "Creación de Módulos",
    "text": "Creación de Módulos\nPara crear un módulo, simplemente se crea un archivo con extensión .py y se definen las funciones y variables que se desean exportar.\nEjemplo:\n# modulo.py\ndef saludar():\n    print(\"Hola, bienvenido a Python\")",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#uso-de-módulos",
    "href": "unidades/unidad4/6_modulos.html#uso-de-módulos",
    "title": "Módulos",
    "section": "Uso de Módulos",
    "text": "Uso de Módulos\nPara usar un módulo, se utiliza la palabra reservada import seguida del nombre del módulo.\nEjemplo:\n# programa.py\nimport modulo\n\nmodulo.saludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-funciones-específicas",
    "href": "unidades/unidad4/6_modulos.html#importar-funciones-específicas",
    "title": "Módulos",
    "section": "Importar Funciones Específicas",
    "text": "Importar Funciones Específicas\nTambién es posible importar funciones específicas de un módulo.\nEjemplo:\n# programa.py\nfrom modulo import saludar\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-con-alias",
    "href": "unidades/unidad4/6_modulos.html#importar-con-alias",
    "title": "Módulos",
    "section": "Importar con Alias",
    "text": "Importar con Alias\nEs posible importar un módulo o función con un alias.\nEjemplo:\n# programa.py\n\nimport modulo as m\n\nm.saludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones",
    "href": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones",
    "title": "Módulos",
    "section": "Importar Todas las Funciones",
    "text": "Importar Todas las Funciones\nTambién es posible importar todas las funciones de un módulo.\nEjemplo:\n# programa.py\n\nfrom modulo import *\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#creación-de-paquetes",
    "href": "unidades/unidad4/6_modulos.html#creación-de-paquetes",
    "title": "Módulos",
    "section": "Creación de Paquetes",
    "text": "Creación de Paquetes\nPara crear un paquete, se crea un directorio con el nombre del paquete y se agregan los módulos necesarios. Además, se debe crear un archivo ____init__.py en el directorio del paquete.\nEjemplo:\npaquete/\n    __init__.py\n    modulo1.py\n    modulo2.py",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#uso-de-paquetes",
    "href": "unidades/unidad4/6_modulos.html#uso-de-paquetes",
    "title": "Módulos",
    "section": "Uso de Paquetes",
    "text": "Uso de Paquetes\nPara usar un paquete, se utiliza la palabra reservada import seguida del nombre del paquete y el nombre del módulo.\nEjemplo:\n# programa.py\n\nfrom paquete import modulo1, modulo2\n\nmodulo1.saludar()\nmodulo2.despedir()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-con-alias-1",
    "href": "unidades/unidad4/6_modulos.html#importar-con-alias-1",
    "title": "Módulos",
    "section": "Importar con Alias",
    "text": "Importar con Alias\nEs posible importar un paquete o módulo con un alias.\nEjemplo:\n\nfrom paquete import modulo1 as m1, modulo2 as m2\n\nm1.saludar()\nm2.despedir()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones-1",
    "href": "unidades/unidad4/6_modulos.html#importar-todas-las-funciones-1",
    "title": "Módulos",
    "section": "Importar Todas las Funciones",
    "text": "Importar Todas las Funciones\nTambién es posible importar todas las funciones de un módulo.\nEjemplo:\n# programa.py\n\nfrom paquete.modulo1 import *\n\nsaludar()",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#instrucciones",
    "href": "unidades/unidad4/6_modulos.html#instrucciones",
    "title": "Módulos",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nLee cuidadosamente el contenido de este repositorio.\nImplementa las funciones solicitadas en el archivo operaciones.py.\nCompleta el programa principal en el archivo programa.py.\nRealiza los commits y push necesarios para subir tus cambios a este repositorio.\nVerifica que tus cambios funcionen correctamente.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#contenido-del-repositorio",
    "href": "unidades/unidad4/6_modulos.html#contenido-del-repositorio",
    "title": "Módulos",
    "section": "Contenido del Repositorio",
    "text": "Contenido del Repositorio\n\noperaciones.py: Archivo de módulo que contiene las funciones para realizar operaciones matemáticas.\nprograma.py: Archivo principal donde se utiliza el módulo operaciones.py.\ntest_operaciones.py: Archivo de pruebas unitarias para verificar las funciones del módulo operaciones.py.\n.gitignore: Archivo que indica a Git qué archivos y directorios debe ignorar al rastrear los cambios en el repositorio.\nrequirements.txt: Archivo que especifica las dependencias del proyecto.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#ejercicio",
    "href": "unidades/unidad4/6_modulos.html#ejercicio",
    "title": "Módulos",
    "section": "Ejercicio",
    "text": "Ejercicio\nCrear un módulo llamado operaciones.py que contenga las siguientes funciones:\n\nsuma(a, b): Retorna la suma de a y b.\nresta(a, b): Retorna la resta de a y b.\nmultiplicacion(a, b): Retorna la multiplicación de a y b.\ndivision(a, b): Retorna la división de a y b. Si b es cero, retorna un mensaje de error.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#cómo-ejecutar-el-programa",
    "href": "unidades/unidad4/6_modulos.html#cómo-ejecutar-el-programa",
    "title": "Módulos",
    "section": "Cómo Ejecutar el Programa",
    "text": "Cómo Ejecutar el Programa\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nInstala las dependencias ejecutando pip install -r requirements.txt.\nEjecuta python programa.py para ver los resultados de las operaciones.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/6_modulos.html#cómo-ejecutar-las-pruebas",
    "href": "unidades/unidad4/6_modulos.html#cómo-ejecutar-las-pruebas",
    "title": "Módulos",
    "section": "Cómo Ejecutar las Pruebas",
    "text": "Cómo Ejecutar las Pruebas\n\nAsegúrate de tener Python instalado en tu sistema.\nAbre una terminal y navega hasta la ubicación de este repositorio.\nEjecuta python -m unittest para correr las pruebas.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Módulos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/7_pypi.html",
    "href": "unidades/unidad4/7_pypi.html",
    "title": "Uso de Pypi",
    "section": "",
    "text": "Pypi es un repositorio de software para Python. Es un lugar donde los desarrolladores pueden publicar y compartir sus paquetes de Python.\n\nUtilizar algún paquete de Pypi\n\nPara utilizar un paquete de Pypi, primero debes instalarlo usando pip. Por ejemplo, si quieres instalar el paquete requests, puedes hacerlo de la siguiente manera:\npip install requests\nUna vez que hayas instalado el paquete, puedes importarlo en tu código de Python y utilizarlo. Por ejemplo:\nimport requests\n\nresponse = requests.get('https://www.google.com')\nprint(response.status_code)\nOtro ejemplo es por ejemplo el paquete emoji, que te permite utilizar emojis en tus programas de Python.\n\npip install emoji\nimport emoji\n\nprint(emoji.emojize('Python es :thumbs_up:'))\n¡Y eso es todo! Ahora puedes utilizar cualquier paquete de Python disponible en Pypi en tus proyectos.\nAlgunos paquetes pueden ser muy importantes para tu proyecto, así que asegúrate de revisar Pypi para encontrar los paquetes que necesitas.\n\n\nConclusión\nPypi es un recurso valioso para los desarrolladores de Python. Te permite compartir tus paquetes con otros desarrolladores y utilizar los paquetes de otros desarrolladores en tus proyectos.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Uso de Pypi</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/8_publicar_pypi.html",
    "href": "unidades/unidad4/8_publicar_pypi.html",
    "title": "Públicar un paquete en Pypi",
    "section": "",
    "text": "En este tutorial vamos a publicar un paquete llamado status-checker-api en Pypi.\nSi has creado un paquete de Python y quieres compartirlo con otros desarrolladores, puedes publicarlo en Pypi.\nPara ello vamos a crear un repositorio en GitHub y subir nuestro paquete, esta práctica es importante para poder compartir nuestro paquete con otros desarrolladores.\nEn el caso de este tutorial, el repositorio se encuentra en status_checker_api\nLo más importante es tener el o los scripts que contienen el código que queremos convertir a paquete.\nPara ello vamos a empezar creando un directorio con el nombre de nuestro paquete, por ejemplo status_checker_api.\nA continuación se visualiza la estructura de nuestro paquete.\n├── dist\n│   ├── status_checker_api-0.5-py3-none-any.whl\n│   └── status_checker_api-0.5.tar.gz\n├── img\n│   └── paste-5.png\n├── LICENSE\n├── README.md\n├── setup.py\n└── src\n    ├── status_checker_api\n    │   ├── __init__.py\n    │   ├── __main__.py\n    │   └── __pycache__\n    │       ├── __init__.cpython-312.pyc\n    │       └── __main__.cpython-312.pyc\n    ├── status_checker_api.egg-info\n    │   ├── dependency_links.txt\n    │   ├── entry_points.txt\n    │   ├── PKG-INFO\n    │   ├── requires.txt\n    │   ├── SOURCES.txt\n    │   └── top_level.txt\n    └── tests\n        ├── __init__.py\n        ├── __pycache__\n        │   ├── __init__.cpython-312.pyc\n        │   └── test_status_checker_api.cpython-312-pytest-8.3.2.pyc\n        └── test_status_checker_api.py\nDentro de este status_checker_api vamos a crear un directorio llamado src y dentro de este directorio vamos a crear un archivo llamado __init__.py, en este ejemplo tambien crearemos el archivo __main__.py.\nPara poder publicar nuestro paquete en Pypi, necesitamos crear un archivo llamado setup.py en el directorio raíz de nuestro paquete. Este archivo contiene la información necesaria para empaquetar nuestro paquete y publicarlo en Pypi.\nfrom setuptools import setup, find_packages\n\nwith open('README.md', 'r', encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n\nsetup(\n    name='status_checker_api',\n    version='0.5',\n    packages=find_packages(where='src'),\n    package_dir={'': 'src'},\n    install_requires=[\n        'requests',\n    ],\n    entry_points={\n        'console_scripts': [\n            'status-checker-api=status_checker_api.__main__:main',\n        ],\n    },\n    author='Diego Saavedra',\n    author_email='dsaavedra88@gmail.com',\n    description='Un paquete para verificar el estado de una API.',\n    long_description=long_description,\n    long_description_content_type='text/markdown',\n    url='https://github.com/statick88/status_checker_api',\n    classifiers=[\n        'Programming Language :: Python :: 3',\n        'License :: OSI Approved :: MIT License',\n        'Operating System :: OS Independent',\n    ],\n    options={\n        'egg_info': {\n            'egg_base': 'src'\n        }\n    },\n    python_requires='&gt;=3.12',\n)\n\nCreación del archivo README.md\n# status_checker_api\n\nUn paquete para verificar el estado de una API.\n\n## Instalación\n\npip install status_checker_api\n\n## Uso\n\napi-status-checker\n\nIngrese la URL de la API: https://www.google.com\n\nEl status de la API es: 200\n\n## Licencia\n\nMIT License\n\n## Autor\n\nDiego Saavedra\nEl código del paquete se encuentra en el directorio src. Para poder ejecutar el paquete, necesitamos un archivo llamado __init__.py en el directorio status_checker_api.\nimport requests\nfrom urllib.parse import urlparse\n\ndef check_status(url):\n    # Asegúrate de que la URL tenga un esquema (http o https)\n    parsed_url = urlparse(url)\n    if not parsed_url.scheme:\n        url = 'https://' + url\n    \n    try:\n        response = requests.get(url)\n        return f\"La URL está activa con código de estado: {response.status_code}\"  # Devuelve el mensaje con el código de estado\n    except requests.exceptions.RequestException as e:\n        return f\"Error: {e}\"  # Devuelve el mensaje de error con una x\nAnalizando el código anterior, podemos ver que el paquete status_checker_api contiene una función llamada check_status que verifica el estado de una API. La función toma una URL como argumento y devuelve un mensaje con el estado de la API.\n\n\nCreación del archivo __main__.py\nfrom status_checker_api import check_status\n\ndef main():\n    url = input('Ingrese la URL de la API: ')\n    status = check_status(url)\n    print(f'El status de la API es: {status}')\n\nif __name__ == \"__main__\":\n    main()\nEl archivo __main__.py contiene el código principal del paquete. Este archivo importa la función check_status del paquete status_checker_api y la utiliza para verificar el estado de una API.\n\n\nCreación del archivo LICENSE\nMIT License\n\nCopyright (c) 2024 Diego Saavedra\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\n\ncopies or substantial portions of the Software.\nEl archivo LICENSE contiene la licencia del paquete. En este caso, utilizamos la licencia MIT.\n\n\nCreación del archivo .gitignore\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\ndist/\nbuild/\n*.egg-info/\n*.egg\n\n# Virtual environments\nvenv/\nenv/\nENV/\n\n# IDEs / Editors\n.idea/\n.vscode/\n*.sublime-project\n*.sublime-workspace\n\n# Miscellaneous\n*.swp\n.DS_Store\nEl archivo .gitignore contiene los archivos y directorios que no queremos incluir en nuestro repositorio de Git. En este caso, ignoramos los archivos y directorios generados por Python y los entornos virtuales.\n\n\nCreación de la cuenta en Pypi\nPara poder publicar nuestro paquete en Pypi, necesitamos crear una cuenta en Pypi.\n\n\n\n\n\n\nTip\n\n\n\nUna vez creada la cuenta en Pypi, necesitamos verificarla a través de un correo electrónico que nos enviarán. Adicional a ello es necesario configurar un factor de doble autenticación. Esto es indispensable para poder crear un token de acceso. El mismo que nos permitirá subir nuestro paquete a Pypi.\n\n\nUna vez que hayamos creado la cuenta, necesitamos crear un archivo llamado .pypirc en nuestro directorio de usuario con la siguiente información:\n[pypi]\n  username = statick\n  password = pypi-token\nEn el archivo .pypirc, reemplazamos username con nuestro nombre de usuario de Pypi y password con nuestro token de acceso de Pypi.\n\n\n\n\n\n\nTip\n\n\n\nEn sistemas operativos basados en Unix, el archivo .pypirc se encuentra en el directorio de usuario .pypirc.\nEn sistemas operativos basados en Windows, el archivo .pypirc se encuentra en el directorio de usuario C: / Users / username / –&gt; en este directorio se almacena el archivo .pypirc.\n\n\n\n\nPublicar el paquete en Pypi\nPara publicar nuestro paquete en Pypi, necesitamos instalar el paquete twine.\nTwine es una herramienta que nos permite subir paquetes de Python a Pypi.\npip install twine\nEs recomandable que tengamos la última versión de twine.\npip install --upgrade twine\nUna vez que hayamos instalado y actualizado twine, podemos publicar nuestro paquete en Pypi de la siguiente manera:\npython -m pip install --upgrade build\nEl comando anterior instala el paquete build que necesitamos para construir nuestro paquete.\npython -m build\nEl comando anterior crea un archivo dist en el directorio raíz de nuestro paquete. Este archivo contiene el paquete que vamos a publicar en Pypi. Es decir los archivos .tar.gz y .whl.\nEstos archivos son los que vamos a subir a Pypi.\npython -m twine upload --repository pypi dist/* --verbose\nEl comando anterior sube nuestro paquete a Pypi. El archivo .pypirc contiene la información de autenticación que necesitamos para subir nuestro paquete.\n\n\n\n¡Y eso es todo! Ahora puedes compartir tu paquete de Python con otros desarrolladores en Pypi. En el caso de este paquete la url es status_checker_api.\n\n\nInstalar el paquete\nPara instalar el paquete que acabamos de publicar en Pypi, necesitamos usar pip.\n\n\n\npip install status_checker_api\nUna vez que hayamos instalado el paquete, podemos utilizarlo en nuestro código de Python.\n\n\nUso del paquete\napi-status-checker\n\n\n\nEs necesario ingresar la URL de la API que queremos verificar.\nIngrese la URL de la API: https://www.google.com\nEl status de la API es: 200\n¡Y eso es todo! Ahora puedes actualizar tu paquete de Python en Pypi.\n\n\n\n\n\n\nTip\n\n\n\nNo olvides cambiar la versión de tu paquete en el archivo setup.py antes de subirlo a Pypi si realizas alguna actualización.\n\n\nSi decidimos actualizar el paquete en Pypi, necesitamos seguir los mismos pasos que hemos visto en este tutorial.\nSin embargo solo necesitaremos 2 comandos:\npython -m build\npython -m twine upload --repository pypi dist/* --verbose\n\n\n\n\n\n\nTip\n\n\n\nEn el directorio dist se generan los archivos .tar.gz y .whl que son los que vamos a subir a Pypi. Es necesario eliminar los archivos anteriores antes de subir los nuevos en este directorio, mi recomendación es eliminar el directorio dist y volver a ejecutar el comando python -m build.\n\n\n\n\nConclusión\nEn este tutorial aprendimos cómo publicar un paquete de Python en Pypi. Pudimos ver cómo crear un paquete de Python, subirlo a Pypi y compartirlo con otros desarrolladores.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Públicar un paquete en Pypi</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/project001.html",
    "href": "unidades/unidad4/project001.html",
    "title": "Desarrollo de un Sistema de Gestión de Inventarios en Python",
    "section": "",
    "text": "Asignación\nhttps://classroom.github.com/a/OVCpAmrV\nAprenderás a desarrollar un proyecto de utilizando el lenguaje de programación Python.\nUn sistema de gestión de inventarios es una herramienta que permite realizar un seguimiento y control de los productos o artículos almacenados en un negocio o empresa.\nAprenderás a utilizar diferentes conceptos y técnicas de programación para implementar las funcionalidades clave de este sistema.\nAlgunas de las funcionalidades que implementaremos incluyen:\nAprenderás a crear una estructura de datos para almacenar la información de los productos, como su nombre, descripción, precio, cantidad disponible, etc. También aprenderás a agregar nuevos productos al sistema.\nTe enseñaré cómo implementar funciones de búsqueda y filtrado para encontrar productos específicos en base a diferentes criterios, como el nombre, la categoría o el precio.\nAprenderás a manejar las actualizaciones de inventario, como la compra o venta de productos. Implementaremos funciones que permitan aumentar o disminuir la cantidad disponible de un producto y mantener un registro de estas transacciones.\nTe mostraré cómo generar informes sobre el estado del inventario, como la lista de productos disponibles, los productos más vendidos, los productos con bajo stock, etc. Utilizaremos técnicas de manipulación de datos y generación de informes para presentar esta información de manera clara y concisa. :::",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Desarrollo de un Sistema de Gestión de Inventarios en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/project001.html#objetivos",
    "href": "unidades/unidad4/project001.html#objetivos",
    "title": "Desarrollo de un Sistema de Gestión de Inventarios en Python",
    "section": "Objetivos",
    "text": "Objetivos\n\nDiseño de la estructura de datos: Aprenderás a diseñar y crear una estructura de datos para almacenar la información de los productos, incluyendo atributos como nombre, descripción, precio, y cantidad disponible.\nAgregar productos: Implementarás la funcionalidad para agregar nuevos productos al inventario.\nBúsqueda y filtrado: Aprenderás a implementar funciones de búsqueda y filtrado para encontrar productos específicos basados en diferentes criterios.\nActualización de inventario: Desarrollarás funciones para manejar la compra y venta de productos, permitiendo ajustar la cantidad disponible en el inventario.\nGeneración de informes: Crearás funciones para generar informes sobre el estado del inventario, tales como productos disponibles, productos más vendidos, y productos con bajo stock.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Desarrollo de un Sistema de Gestión de Inventarios en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/project001.html#entregables",
    "href": "unidades/unidad4/project001.html#entregables",
    "title": "Desarrollo de un Sistema de Gestión de Inventarios en Python",
    "section": "Entregables",
    "text": "Entregables\n\nCódigo fuente del proyecto: Estructurado y organizado de manera coherente.\nDocumentación del proyecto: Incluyendo instrucciones de instalación, uso, y una breve explicación del diseño de la solución (Esto se sugiere generar en el Readme.md del proyecto).\nPruebas unitarias: Implementación de pruebas para verificar que las funcionalidades clave del sistema funcionan correctamente.",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Desarrollo de un Sistema de Gestión de Inventarios en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/project001.html#instrucciones",
    "href": "unidades/unidad4/project001.html#instrucciones",
    "title": "Desarrollo de un Sistema de Gestión de Inventarios en Python",
    "section": "Instrucciones",
    "text": "Instrucciones\n\n1. Crear la Estructura de Datos\nDiseña una clase Producto que contenga los atributos básicos como nombre, descripción, precio, y cantidad disponible. Implementa un método str para imprimir la información del producto de manera legible.\n\n\nSolución\n\nclass Producto:\n    def __init__(self, nombre, descripcion, precio, cantidad):\n        self.nombre = nombre\n        self.descripcion = descripcion\n        self.precio = precio\n        self.cantidad = cantidad\n\n    def __str__(self):\n        return f\"Producto: {self.nombre}, Precio: {self.precio}, Cantidad: {self.cantidad}\"\n\n\n\n2. Agregar Productos\nImplementa una función que permita agregar nuevos productos a una lista que actúe como el inventario.\n\n\nSolución\n\ninventario = []\n\ndef agregar_producto(producto):\n    inventario.append(producto)\n    print(f\"{producto.nombre} ha sido añadido al inventario.\")\n\n\n\n3. Búsqueda y Filtrado\nCrea funciones para buscar productos por nombre, categoría o rango de precios.\n\n\nSolución\n\ndef buscar_producto_por_nombre(nombre):\n    return [p for p in inventario if nombre.lower() in p.nombre.lower()]\n\ndef buscar_producto_por_precio(min_precio, max_precio):\n    return [p for p in inventario if min_precio &lt;= p.precio &lt;= max_precio]\n\n\n\n4. Actualización de Inventario\nImplementa funciones para aumentar o disminuir la cantidad de productos en el inventario, simulando la compra o venta de productos.\n\n\nSolución\n\ndef actualizar_cantidad(nombre, cantidad):\n    for producto in inventario:\n        if producto.nombre == nombre:\n            producto.cantidad += cantidad\n            print(f\"Cantidad actualizada: {producto.nombre} ahora tiene {producto.cantidad} unidades.\")\n            return\n    print(\"Producto no encontrado.\")\n\n\n\n5. Generación de Informes\nCrea funciones para generar informes del estado del inventario.\n\n\nSolución\n\ndef generar_informe_productos_disponibles():\n    return [p for p in inventario if p.cantidad &gt; 0]\n\ndef generar_informe_productos_bajo_stock(limite):\n    return [p for p in inventario if p.cantidad &lt;= limite]\n\n\n\n6. Pruebas Unitarias\nEscribe pruebas para cada una de las funciones clave utilizando unittest.\n\n\nSolución\n\nimport unittest\n\nclass TestInventario(unittest.TestCase):\n    def test_agregar_producto(self):\n        producto = Producto(\"Test\", \"Descripcion\", 10.0, 5)\n        agregar_producto(producto)\n        self.assertIn(producto, inventario)\n\n\n\n7. Documentación y GitHub Classroom\nDocumenta el código fuente, incluyendo instrucciones sobre cómo ejecutar el programa y las pruebas.\nConfigura tu repositorio de GitHub Classroom y sube todo el código y documentación.\n\n\nEvaluación\n\nFuncionalidad (40%): El sistema implementa correctamente las funcionalidades solicitadas.\nCalidad del Código (30%): El código es claro, bien estructurado, y sigue buenas prácticas de programación.\nPruebas (20%): Las pruebas cubren las funcionalidades clave y se ejecutan correctamente.\nDocumentación (10%): La documentación es clara y proporciona una guía adecuada para el usuario.\n\n\n¡Buena suerte!",
    "crumbs": [
      "Unidad 4: Python Avanzado",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Desarrollo de un Sistema de Gestión de Inventarios en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_django_fundamentos.html",
    "href": "unidades/unidad5/1_django_fundamentos.html",
    "title": "Introducción a Django",
    "section": "",
    "text": "Conceptos Importantes",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/1_django_fundamentos.html#conceptos-importantes",
    "href": "unidades/unidad5/1_django_fundamentos.html#conceptos-importantes",
    "title": "Introducción a Django",
    "section": "",
    "text": "Tip\n\n\n\nAntes de iniciar con Django es necesario conocer el concepto de Entornos Virtuales.\n\n\n\nEntornos Virtuales\n\n\n\n\nVirtual Enviroment\n\n\n\nUn entorno virtual es un entorno de desarrollo aislado que permite instalar paquetes de Python sin afectar al sistema global. Los entornos virtuales son útiles para gestionar las dependencias de un proyecto y para evitar conflictos entre diferentes versiones de los paquetes.\n\nCrear un entorno virtual\nPara crear un entorno virtual, se puede utilizar la herramienta venv de Python.\npython -m venv env\nEste comando creará un directorio llamado env en el directorio actual con el entorno virtual.\n\n\n\n\n\n\nTip\n\n\n\nTambien se puede utilizar virtualenv para crear entornos virtuales.\n\n\n\n\n\nModelo Template View (MTV)\n\n\n\n\nModel View Controller\n\n\n\n\n\n\n\nModel View Template\n\n\n\nDjango sigue el patrón de diseño Modelo Vista Template (MVT). Este patrón de diseño separa la lógica de la aplicación en tres componentes principales: Modelo, Vista y Template.\n\n\n\n\n\n\nTip\n\n\n\nEl archivo URLs.py es el encargado de mapear las URLs de la aplicación a las vistas correspondientes.\n\n\n\nModelo: Es la representación de los datos de la aplicación y las reglas para manipular esos datos. Django utiliza un ORM (Object-Relational Mapping) para interactuar con la base de datos.\nVista: Es la capa de presentación de la aplicación. Se encarga de mostrar los datos al usuario y de interpretar las acciones del usuario.\nTemplate: Es la capa de presentación de la aplicación. Define cómo se muestra la información al usuario. Django utiliza el motor de plantillas Jinja2 para renderizar los templates.\n\n\n\nFormularios\n\n\n\n\nDjango Forms\n\n\n\nLos formularios son una parte importante de cualquier aplicación web. Django proporciona una forma sencilla de crear y procesar formularios en las vistas.\n\n\nAdministrador de Django\n\n\n\n\nDjango Admin\n\n\n\nEl administrador de Django es una interfaz de administración que permite gestionar los datos de la aplicación de forma sencilla. Django genera automáticamente una interfaz de administración basada en los modelos de la aplicación.\n\n\nMiddleware\nEl middleware es una capa de procesamiento que se ejecuta antes y después de cada petición HTTP. Django proporciona un conjunto de middlewares que se pueden utilizar para añadir funcionalidades a la aplicación.\n\n\nAutenticación y Autorización\nDjango proporciona un sistema de autenticación y autorización que permite gestionar los usuarios y los permisos de la aplicación de forma sencilla.\n\n\nInternacionalización\nDjango proporciona soporte para la internacionalización de la aplicación. Permite traducir la aplicación a diferentes idiomas y gestionar las traducciones de forma sencilla.\n\n\nSeguridad\nDjango proporciona un conjunto de medidas de seguridad para proteger la aplicación contra ataques comunes, como la inyección de SQL, la falsificación de solicitudes entre sitios (CSRF) y la inyección de código.\n\n\nTesting\nDjango proporciona un conjunto de herramientas para realizar pruebas unitarias y de integración en la aplicación. Permite probar la lógica de la aplicación y asegurarse de que funciona correctamente.\n\n\nDespliegue\nDjango proporciona un conjunto de herramientas para desplegar la aplicación en un servidor de producción. Permite configurar el entorno de producción y gestionar las actualizaciones de la aplicación de forma sencilla.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html",
    "href": "unidades/unidad5/2_configuracion_inicial.html",
    "title": "Configuración inicial de un proyecto.",
    "section": "",
    "text": "1. Crear un entorno virtual\nEl comando anterior creará un directorio llamado env en el directorio actual, que contendrá un entorno virtual de Python.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-entorno-virtual",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-entorno-virtual",
    "title": "Configuración inicial de un proyecto.",
    "section": "",
    "text": "Creación de entorno Virtual\n\n\n\npython3 -m venv env",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#activar-el-entorno-virtual",
    "href": "unidades/unidad5/2_configuracion_inicial.html#activar-el-entorno-virtual",
    "title": "Configuración inicial de un proyecto.",
    "section": "2. Activar el entorno virtual",
    "text": "2. Activar el entorno virtual\n\n\n\n\nActivación de entorno Virtual\n\n\n\nsource env/bin/activate\nEl comando anterior activará el entorno virtual en sistemas Unix. En Windows, el comando es:\nenv\\Scripts\\activate\nEste comando tambien se puede dividir en 2 partes:\ncd env/Scripts/\nactivate\nPara desactivar el entorno virtual, simplemente ejecute:\ndeactivate",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#instalar-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#instalar-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "3. Instalar Django",
    "text": "3. Instalar Django\n\n\n\n\nInstalación de Django\n\n\n\npip install django==4.2\nEl comando anterior instalará la última versión de Django en el entorno virtual.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-proyecto-de-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-proyecto-de-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "4. Crear un proyecto de Django",
    "text": "4. Crear un proyecto de Django\n\n\n\n\nCreación de un Proyecto en Django\n\n\n\ndjango-admin startproject helloWorld .\nEl comando anterior creará un nuevo directorio llamado helloWorld en el directorio actual, que contendrá un proyecto de Django.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-aplicación-de-django",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-aplicación-de-django",
    "title": "Configuración inicial de un proyecto.",
    "section": "5. Crear una aplicación de Django",
    "text": "5. Crear una aplicación de Django\n\n\n\n\nCreación de una App en Django\n\n\n\npython manage.py startapp hello\nEl comando anterior creará un nuevo directorio llamado hello en el directorio actual, que contendrá una aplicación de Django.\n\n\n\n\n\n\nTip\n\n\n\nRecerda que puedes abrir el editor de código Visual Studio Code con el comando code .",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-vista",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-vista",
    "title": "Configuración inicial de un proyecto.",
    "section": "6. Crear una vista",
    "text": "6. Crear una vista\n\n\n\n\nVistas en Django\n\n\n\n# hello/views.py\n\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, World!\")",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#configurar-las-url",
    "href": "unidades/unidad5/2_configuracion_inicial.html#configurar-las-url",
    "title": "Configuración inicial de un proyecto.",
    "section": "7. Configurar las URL",
    "text": "7. Configurar las URL\n\n\n\n\nURLs de la App en Django\n\n\n\n# helloWorld/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"\", include(\"hello.urls\")),\n    path(\"admin/\", admin.site.urls),\n]",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#ejecutar-el-servidor-de-desarrollo",
    "href": "unidades/unidad5/2_configuracion_inicial.html#ejecutar-el-servidor-de-desarrollo",
    "title": "Configuración inicial de un proyecto.",
    "section": "8. Ejecutar el servidor de desarrollo",
    "text": "8. Ejecutar el servidor de desarrollo\n\n\n\n\nServidor de Desarrollo en Django\n\n\n\npython manage.py runserver\nEl comando anterior ejecutará el servidor de desarrollo de Django. Para acceder al servidor, abra un navegador web y vaya a la dirección http://0.0.0.0:8000/.\n\n\n\n\nVisualizar el servidor corriendo desde el navegador\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nPara detener el servidor de desarrollo, presione Ctrl + C en la terminal.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-una-migración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-una-migración",
    "title": "Configuración inicial de un proyecto.",
    "section": "9. Crear una migración",
    "text": "9. Crear una migración\n\n\n\n\nPreparación de las Migraciones en Django\n\n\n\npython manage.py makemigrations\nEl comando anterior creará una migración para los cambios en los modelos de la base de datos.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#aplicar-una-migración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#aplicar-una-migración",
    "title": "Configuración inicial de un proyecto.",
    "section": "10. Aplicar una migración",
    "text": "10. Aplicar una migración\n\n\n\n\nPreparación de las Migraciones en Django\n\n\n\npython manage.py migrate\nEl comando anterior aplicará la migración a la base de datos.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#crear-un-superusuario",
    "href": "unidades/unidad5/2_configuracion_inicial.html#crear-un-superusuario",
    "title": "Configuración inicial de un proyecto.",
    "section": "12. Crear un superusuario",
    "text": "12. Crear un superusuario\n\n\n\n\nCreación de un Superusuario en Django\n\n\n\npython manage.py createsuperuser\nEl comando anterior creará un superusuario para acceder al panel de administración de Django.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/2_configuracion_inicial.html#acceder-al-panel-de-administración",
    "href": "unidades/unidad5/2_configuracion_inicial.html#acceder-al-panel-de-administración",
    "title": "Configuración inicial de un proyecto.",
    "section": "13. Acceder al panel de administración",
    "text": "13. Acceder al panel de administración\n\n\n\n\nLogin Admin en Django\n\n\n\nPara acceder al panel de administración de Django, abra un navegador web y vaya a la dirección http://127.0.0.1:8000/admin/. Inicie sesión con el superusuario creado en el paso anterior.\n\n\n\n\nAdmin en Django",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Configuración inicial de un proyecto.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/3_estructura_archivos_directorios.html",
    "href": "unidades/unidad5/3_estructura_archivos_directorios.html",
    "title": "Estructura de archivos y carpetas",
    "section": "",
    "text": "Django tiene una estructura de archivos y carpetas que se debe seguir para que el proyecto funcione correctamente. A continuación se muestra la estructura de archivos y carpetas de un proyecto Django:\n\n\n\n\n\n\nTip\n\n\n\nRecuerda crear el entorno virtual y activarlo antes de ejecutar el comando.\npython -m venv venv\nsource venv/bin/activate\nCreamos un directorio con el siguiente comando:\nmkdir myproject\ncd myproject\nInstalamos Django con el siguiente comando:\npip install django==4.2.0\nCreamos el proyecto con el siguiente comando:\ndjango-admin startproject myproject .\n\n\n├── manage.py\n└── myproject\n    ├── asgi.py\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n1.- Archivo de gestión del proyecto.\n2.- Carpeta del proyecto.\n3.- Archivo de configuración de ASGI.\n4.- Archivo de inicialización del proyecto.\n5.- Archivo de configuración del proyecto.\n6.- Archivo de configuración de las rutas del proyecto.\n7.- Archivo de configuración de WSGI.\n\nCreación de una aplicación Django\nPara crear una aplicación Django se debe ejecutar el siguiente comando:\n1python manage.py startapp myapp\n\n1\n\nNombre de la aplicación.\n\n\n\n\nConfiguración de la base de datos\nPara configurar la base de datos se debe modificar el archivo settings.py del proyecto. A continuación se muestra un ejemplo de configuración de la base de datos:\nDATABASES = {\n    'default': {\n1        'ENGINE': 'django.db.backends.sqlite3',\n2        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n1\n\nMotor de base de datos.\n\n2\n\nRuta del archivo de la base de datos.\n\n\nEjemplo\nEn este ejemplo crearemos una aplicación que muestre un mensaje en la página principal. Para ello, se deben seguir los siguientes pasos:\n\nCrear una vista.\nCrear una plantilla.\nConfigurar las rutas.\n\n\n\nCrear una vista\nPara crear una vista se debe modificar el archivo views.py de la aplicación. A continuación se muestra un ejemplo de vista:\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world!\")\n\n\nCrear una plantilla\nPara crear una plantilla se debe crear una carpeta llamada templates en la carpeta de la aplicación. A continuación se muestra un ejemplo de plantilla:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;MyApp&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nPara que Django pueda encontrar la plantilla, se debe configurar la ruta de la plantilla en el archivo settings.py del proyecto. A continuación se muestra un ejemplo de configuración de la ruta de la plantilla:\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n1        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n1\n\nRuta de la plantilla.\n\n\n\n\n\nConfigurar las rutas\nPara configurar las rutas se debe modificar el archivo urls.py de la aplicación. A continuación se muestra un ejemplo de configuración de las rutas:\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n\nCorrer el servidor de desarrollo\nPara correr el servidor de desarrollo se debe ejecutar el siguiente comando:\npython manage.py runserver\n\n\nAcceder a la aplicación\nPara acceder a la aplicación se debe abrir un navegador web y escribir la siguiente URL:\nhttp://127.0.0.1:8000/\nPosiblemente sea necesario preparar las migraciones y aplicarlas a la base de datos:\n1python manage.py makemigrations\n2python manage.py migrate\n\n1\n\nPrepara las migraciones.\n\n2\n\nAplica las migraciones a la base de datos.\n\n\n\n\nAcceder a la aplicación\nPara acceder a la aplicación se debe abrir un navegador web y escribir la siguiente URL:\nhttp://127.0.0.0.1:8000/\nMuy bien hecho! Has creado tu primera aplicación Django. Ahora puedes seguir explorando la documentación oficial de Django para aprender más sobre el framework.\n\n\nAsignación\nSeguir cada uno de los pasos de esta sección para crear una aplicación Django que muestre un mensaje en la página principal. La aplicación debe tener los siguientes archivos y carpetas:\n├── manage.py\n├── myproject\n│   ├── asgi.py\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── myapp\n    ├── __init__.py\n    ├── admin.py\n    ├── apps.py\n    ├── migrations\n    │   └── __init__.py\n    ├── models.py\n    ├── tests.py\n    ├── views.py\n    └── templates\n        └── index.html\n1.- Archivo de gestión del proyecto.\n2.- Carpeta del proyecto.\n3.- Archivo de configuración de ASGI.\n4.- Archivo de inicialización del proyecto.\n5.- Archivo de configuración del proyecto.\n6.- Archivo de configuración de las rutas del proyecto.\n7.- Archivo de configuración de WSGI.\n8.- Carpeta de la aplicación.\n9.- Archivo de inicialización de la aplicación.\n10.- Archivo de configuración del administrador de Django.\n11.- Archivo de configuración de la aplicación.\n12.- Carpeta de migraciones de la aplicación.\n13.- Archivo de inicialización de las migraciones.\n14.- Archivo de configuración de los modelos de la aplicación.\n15.- Archivo de pruebas de la aplicación.\n16.- Archivo de configuración de las vistas de la aplicación.\n17.- Carpeta de plantillas de la aplicación.\n18.- Archivo de la plantilla de la aplicación.\n\nRecuerda que para que Django pueda encontrar la plantilla, se debe configurar la ruta de la plantilla en el archivo settings.py del proyecto. A continuación se muestra un ejemplo de configuración de la ruta de la plantilla:\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n1        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n1\n\nRuta de la plantilla.\n\n\n\n\n\nReferencias\n\nDjango",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Estructura de archivos y carpetas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar-productos",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar-productos",
    "title": "Modelos",
    "section": "Listar productos",
    "text": "Listar productos\nPara listar los productos en inventario, crearemos una función listar_productos que renderizará la plantilla listar.html con la lista de productos.\nfrom pyexpat.errors import messages\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Producto\nfrom django.urls import reverse \n\nproductos = []\n\ndef listar_productos(request):\n    productos = Producto.objects.all()\n    return render(request, 'listar.html', {'productos': productos})",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar-producto",
    "title": "Modelos",
    "section": "Agregar producto",
    "text": "Agregar producto\nPara agregar un producto al inventario, crearemos una función agregar_producto que recibe los datos del producto a agregar y lo agrega a la lista de productos.\ndef agregar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST.get(\"nombre\")\n        precio = request.POST.get(\"precio\")\n        cantidad = request.POST.get(\"cantidad\")\n        Producto.objects.create(nombre=nombre, precio=precio, cantidad=cantidad) \n        return redirect('productos:listar_productos')\n    return render(request, \"agregar.html\")",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar-producto",
    "title": "Modelos",
    "section": "Actualizar producto",
    "text": "Actualizar producto\nPara actualizar un producto en el inventario, crearemos una función actualizar_producto que recibe los datos del producto a actualizar y actualiza el precio y la cantidad del producto.\ndef actualizar_producto(request, id):\n    producto = get_object_or_404(Producto, pk=id)\n    if request.method == 'POST':\n        nombre = request.POST.get('nombre')\n        precio = request.POST.get('precio')\n        cantidad = request.POST.get('cantidad')\n        \n        # Actualiza los campos del producto\n        producto.nombre = nombre\n        producto.precio = precio\n        producto.cantidad = cantidad\n        producto.save()\n        \n        return redirect('productos:listar_productos')\n    else:\n        return render(request, 'actualizar.html', {'producto': producto})",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar-producto",
    "title": "Modelos",
    "section": "Eliminar producto",
    "text": "Eliminar producto\nPara eliminar un producto del inventario, crearemos una función eliminar_producto que recibe el nombre del producto a eliminar y lo elimina de la lista de productos.\ndef eliminar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST.get(\"nombre\")\n        try:\n            producto = Producto.objects.get(nombre=nombre)\n            producto.delete()\n        except Producto.DoesNotExist:\n            pass\n        \n        return redirect('productos:listar_productos')\n    return render(request, \"eliminar.html\")",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar-producto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar-producto",
    "title": "Modelos",
    "section": "Buscar producto",
    "text": "Buscar producto\nPara buscar un producto en el inventario, crearemos una función buscar_producto que recibe el nombre del producto a buscar y renderiza la plantilla buscar.html con el producto encontrado.\ndef buscar_producto(request):\n    if request.method == \"POST\":\n        nombre = request.POST.get(\"nombre\")\n        try:\n            producto = Producto.objects.get(nombre=nombre)\n            return render(request, \"buscar.html\", {\"producto\": producto})\n        except Producto.DoesNotExist:\n            return render(request, \"buscar.html\", {\"producto\": None})\n    return render(request, \"buscar.html\")",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#base",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#base",
    "title": "Modelos",
    "section": "Base",
    "text": "Base\nCrearemos un archivo base.html que contendrá la estructura base de todas las páginas de nuestro sistema.\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;\n        {% block title %}\n        Inventario\n        {% endblock %}\n    &lt;/title&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        {% block content %} \n        {% endblock %}\n    &lt;/div&gt;\n&lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#listar",
    "title": "Modelos",
    "section": "Listar",
    "text": "Listar\nCrearemos un archivo listar.html que contendrá la lista de productos en inventario.\n{% extends \"base.html\" %}\n\n{% block title %} Listar Productos {% endblock %}\n\n{% block content%}\n&lt;h1&gt;Listar Productos&lt;/h1&gt;\n&lt;ul class=\"list-group\"&gt;\n    {% for producto in productos %}\n    &lt;li class=\"list-group-item\"&gt; \n        {{ producto.nombre }} - {{ producto.precio }} - {{ producto.cantidad }}\n    &lt;/li&gt;\n    {% endfor %}\n&lt;/ul&gt;\n{% endblock%}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#agregar",
    "title": "Modelos",
    "section": "Agregar",
    "text": "Agregar\nCrearemos un archivo agregar.html que contendrá un formulario para agregar un producto al inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Agregar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Agregar producto&lt;/h1&gt;\n\n&lt;form action=\"{% url 'productos:agregar_producto' %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"precio\" class=\"form-label\"&gt;Precio&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"precio\" name=\"precio\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"cantidad\" class=\"form-label\"&gt;Cantidad&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"cantidad\" name=\"cantidad\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Agregar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#actualizar",
    "title": "Modelos",
    "section": "Actualizar",
    "text": "Actualizar\nCrearemos un archivo actualizar.html que contendrá un formulario para actualizar un producto en el inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Actualizar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Actualizar producto&lt;/h1&gt;\n&lt;form action=\"{% url 'productos:actualizar_producto' producto.id %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    &lt;input type=\"hidden\" name=\"nombre\" value=\"{{ producto.nombre }}\"&gt;\n    &lt;input type=\"hidden\" name=\"id\" value=\"{{ producto.id }}\"&gt; {# Agregamos un campo oculto para el ID del producto #}\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"precio\" class=\"form-label\"&gt;Precio&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"precio\" name=\"precio\" value=\"{{ producto.precio }}\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"cantidad\" class=\"form-label\"&gt;Cantidad&lt;/label&gt;\n        &lt;input type=\"number\" class=\"form-control\" id=\"cantidad\" name=\"cantidad\" value=\"{{ producto.cantidad }}\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Actualizar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#eliminar",
    "title": "Modelos",
    "section": "Eliminar",
    "text": "Eliminar\nCrearemos un archivo eliminar.html que contendrá un formulario para eliminar un producto del inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Eliminar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Eliminar producto&lt;/h1&gt;\n&lt;form action=\"{% url 'productos:eliminar_producto' %}\" method=\"post\"&gt;\n    {% csrf_token %}  &lt;!-- Agrega el token CSRF aquí --&gt;\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Eliminar&lt;/button&gt;\n&lt;/form&gt;\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#buscar",
    "title": "Modelos",
    "section": "Buscar",
    "text": "Buscar\nCrearemos un archivo buscar.html que contendrá un formulario para buscar un producto en el inventario.\n{% extends \"base.html\" %}\n\n{% block title %}Buscar producto{% endblock %}\n\n{% block content %}\n&lt;h1&gt;Buscar producto&lt;/h1&gt;\n&lt;form action=\"{% url 'productos:buscar_producto' %}\" method=\"post\"&gt;\n    {% csrf_token %}\n    &lt;div class=\"mb-3\"&gt;\n        &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"nombre\" name=\"nombre\"&gt;\n    &lt;/div&gt;\n    &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Buscar&lt;/button&gt;\n&lt;/form&gt;\n\n{% if producto %}\n&lt;div class=\"mt-3\"&gt;\n    &lt;h2&gt;Información del producto:&lt;/h2&gt;\n    &lt;p&gt;Nombre: {{ producto.nombre }}&lt;/p&gt;\n    &lt;p&gt;Precio: {{ producto.precio }}&lt;/p&gt;\n    &lt;p&gt;Cantidad: {{ producto.cantidad }}&lt;/p&gt;\n&lt;/div&gt;\n{% endif %}\n{% endblock %}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/4_modelos_vistas_plantillas.html#urls-en-la-aplicación-y-el-proyecto",
    "href": "unidades/unidad5/4_modelos_vistas_plantillas.html#urls-en-la-aplicación-y-el-proyecto",
    "title": "Modelos",
    "section": "URLs en la aplicación y el proyecto",
    "text": "URLs en la aplicación y el proyecto\nEn el archivo urls.py de la aplicación productos definiremos las URLs de las vistas de nuestro sistema.\nfrom django.urls import path\nfrom . import views\n\napp_name = 'productos'\n\nurlpatterns = [\n    path('', views.listar_productos, name='listar_productos'),\n    path('agregar/', views.agregar_producto, name='agregar_producto'),\n    path('actualizar/&lt;int:id&gt;/', views.actualizar_producto, name='actualizar_producto'),\n    path('eliminar/', views.eliminar_producto, name='eliminar_producto'),\n    path('buscar/', views.buscar_producto, name='buscar_producto'),\n]\nEn el archivo urls.py del proyecto inventario incluiremos las URLs de la aplicación productos.\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('productos.urls')),\n]\n\n\n\n\n\n\nTip\n\n\n\nTip: Para acceder al panel de administración de Django, debemos crear un superusuario con el siguiente comando.\npython manage.py createsuperuser\n\n\n\n\n\n\n\n\nTip\n\n\n\nSi realizamos modificaciones en el modelo de datos, debemos aplicar las migraciones con el siguiente comando.\n1python manage.py makemigrations\n2python manage.py migrate\n\n1\n\nCrea las migraciones.\n\n2\n\nAplica las migraciones.\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTip: Para acceder a las vistas de nuestro sistema, debemos definir las URLs en el archivo urls.py de la aplicación y el proyecto.\nEn Django, las URLs se definen en el archivo urls.py de la aplicación y el proyecto. Las URLs se utilizan para acceder a las vistas de nuestro sistema.\n\n\nEs necesario realizar una modificación en el archivo settings.py del proyecto inventario para que Django pueda encontrar las plantillas de nuestro sistema.\nTEMPLATES = [\n    {\n        ...\n1        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        ...\n    },\n]\n\n1\n\nAgregamos la ruta de la carpeta templates al directorio de plantillas.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Modelos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#qué-es-una-api-rest",
    "href": "unidades/unidad5/5_drf.html#qué-es-una-api-rest",
    "title": "Django Rest Framework",
    "section": "¿Qué es una API REST?",
    "text": "¿Qué es una API REST?\nUna API REST (Representational State Transfer) es una interfaz de programación de aplicaciones que utiliza los métodos HTTP para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en recursos.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#instalación",
    "href": "unidades/unidad5/5_drf.html#instalación",
    "title": "Django Rest Framework",
    "section": "Instalación",
    "text": "Instalación\nPara instalar Django Rest Framework, ejecutamos el siguiente comando:\npip install djangorestframework\nUna vez instalado, añadimos ‘rest_framework’ a la lista de aplicaciones instaladas en el archivo settings.py:\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n]",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#actualizar-el-archivo-requirements.txt",
    "href": "unidades/unidad5/5_drf.html#actualizar-el-archivo-requirements.txt",
    "title": "Django Rest Framework",
    "section": "Actualizar el archivo requirements.txt",
    "text": "Actualizar el archivo requirements.txt\nEs necesario eliminar el archivo requirements.txt y volver a crearlo con el siguiente comando:\npip freeze &gt; requirements.txt",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#serializers",
    "href": "unidades/unidad5/5_drf.html#serializers",
    "title": "Django Rest Framework",
    "section": "Serializers",
    "text": "Serializers\nLos serializadores nos permiten convertir los datos de nuestro modelo en un formato que pueda ser fácilmente consumido por una API REST.\nPara crear un serializador, creamos un archivo serializers.py en la carpeta de nuestra aplicación y añadimos el siguiente código:\n1from rest_framework import serializers\nfrom .models import Producto\n\n2class ProductoSerializer(serializers.ModelSerializer):\n3    class Meta:\n4        model = Producto\n5        fields = '__all__'\n\n1\n\nImportamos el módulo serializers de Django Rest Framework.\n\n2\n\nCreamos un serializador ProductoSerializer que hereda de serializers.ModelSerializer.\n\n3\n\nDefinimos la clase Meta para configurar el serializador.\n\n4\n\nEspecificamos el modelo Producto que queremos serializar.\n\n5\n\nIndicamos que queremos serializar todos los campos del modelo Producto.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#views",
    "href": "unidades/unidad5/5_drf.html#views",
    "title": "Django Rest Framework",
    "section": "Views",
    "text": "Views\nLas vistas en Django Rest Framework son similares a las vistas en Django. En lugar de devolver una respuesta HTML, devuelven una respuesta JSON que puede ser consumida por una API REST.\nPara crear una vista, creamos un archivo views.py en la carpeta de nuestra aplicación y añadimos el siguiente código:\n1from rest_framework import viewsets\n2from .serializers import ProductoSerializer\nfrom .models import Producto\n\n3class ProductoViewSet(viewsets.ModelViewSet):\n    queryset = Producto.objects.all()\n    serializer_class = ProductoSerializer\n\n1\n\nImportamos el módulo viewsets de Django Rest Framework.\n\n2\n\nImportamos el serializador ProductoSerializer que creamos anteriormente.\n\n3\n\nCreamos una vista ProductoViewSet que hereda de viewsets.ModelViewSet.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#urls-de-la-aplicación",
    "href": "unidades/unidad5/5_drf.html#urls-de-la-aplicación",
    "title": "Django Rest Framework",
    "section": "URLs de la Aplicación",
    "text": "URLs de la Aplicación\nPara conectar nuestras vistas con las URLs de nuestra aplicación, creamos un archivo urls.py en la carpeta de nuestra aplicación y añadimos el siguiente código:\nfrom django.urls import path\n1from .views import ProductoViewSet\n\nurlpatterns = [\n2    path('api/productos/', ProductoViewSet.as_view({'get': 'list', 'post': 'create'}), name='api-productos'),\n3    path('api/productos/&lt;int:pk&gt;/', ProductoViewSet.as_view({'get': 'retrieve', 'put': 'update', 'delete': 'destroy'}), name='api-producto-detail'),\n]\n\n1\n\nImportamos la vista ProductoViewSet que creamos anteriormente.\n\n2\n\nConfiguramos la URL ‘/api/productos/’ para listar y crear productos.\n\n3\n\nConfiguramos la URL ‘/api/productos/&lt;int:pk&gt;/’ para ver, actualizar y eliminar un producto específico.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#configuración-urls-del-proyecto",
    "href": "unidades/unidad5/5_drf.html#configuración-urls-del-proyecto",
    "title": "Django Rest Framework",
    "section": "Configuración URLs del Proyecto",
    "text": "Configuración URLs del Proyecto\nPara configurar nuestra API REST, añadimos las URLs de nuestra aplicación a las URLs del proyecto en el archivo urls.py de la carpeta del proyecto:\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework import routers\nfrom productos.views import ProductoViewSet\n\n# Creamos un enrutador para las vistas de Django REST Framework\nrouter = routers.DefaultRouter()\nrouter.register(r'productos', ProductoViewSet)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('productos.urls')),\n    path('api/', include(router.urls)),\n]",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#migraciones",
    "href": "unidades/unidad5/5_drf.html#migraciones",
    "title": "Django Rest Framework",
    "section": "Migraciones",
    "text": "Migraciones\nAntes de utilizar nuestra API REST, debemos aplicar las migraciones necesarias para crear las tablas en la base de datos:\npython manage.py makemigrations\npython manage.py migrate",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#instalación-de-setuptools",
    "href": "unidades/unidad5/5_drf.html#instalación-de-setuptools",
    "title": "Django Rest Framework",
    "section": "Instalación de setuptools",
    "text": "Instalación de setuptools\nPara instalar setuptools, ejecutamos el siguiente comando:\npip install setuptools\nEs necesario la instalación de setuptools para poder instalar las dependencias necesarias para el proyecto.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#ejecución",
    "href": "unidades/unidad5/5_drf.html#ejecución",
    "title": "Django Rest Framework",
    "section": "Ejecución",
    "text": "Ejecución\nUna vez configurada nuestra API REST, podemos ejecutar el servidor de desarrollo de Django y acceder a la API a través de un navegador o una herramienta como Postman:\npython manage.py runserver\nEn este caso, la API estará disponible en la ruta ‘http://127.0.0.1:8000/api/productos/’.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/5_drf.html#primero-instalamos-coreapi",
    "href": "unidades/unidad5/5_drf.html#primero-instalamos-coreapi",
    "title": "Django Rest Framework",
    "section": "Primero instalamos CoreAPI:",
    "text": "Primero instalamos CoreAPI:\npip install coreapi\nPara generar la documentación automáticamente, agregamos la configuración en settings.py:\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'\n}\nLuego, añadimos la vista de esquema en el archivo urls.py de la carpeta del proyecto:\nfrom rest_framework.schemas import get_schema_view\n\nschema_view = get_schema_view(title='API de Productos')\n\nurlpatterns += [\n    path('docs/', schema_view, name='api-docs'),\n]\nAhora podemos ejecutar el servidor de desarrollo y acceder a la documentación generada por CoreAPI en la ruta ‘/docs/’:\npython manage.py runserver\nCon estos pasos, hemos integrado Django Rest Framework, documentado nuestra API con drf-yasg y CoreAPI.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_base_de_datos.html#objetivos",
    "href": "unidades/unidad5/6_base_de_datos.html#objetivos",
    "title": "Bases de Dato en Django",
    "section": "Objetivos",
    "text": "Objetivos\n\nModelos de Base de Datos: Crear modelos de base de datos para almacenar información sobre libros y autores.\nAPI REST: Exponer los modelos de base de datos a través de una API REST utilizando Django REST Framework.\nMigraciones: Aplicar migraciones para crear las tablas en la base de datos.\nDocumentación de la API: Documentar la API utilizando drf-yasg.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Bases de Dato en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_base_de_datos.html#base-de-datos-relacional-postgresql",
    "href": "unidades/unidad5/6_base_de_datos.html#base-de-datos-relacional-postgresql",
    "title": "Bases de Dato en Django",
    "section": "Base de Datos Relacional (PostgreSQL)",
    "text": "Base de Datos Relacional (PostgreSQL)\n\n\n\n\n\n\nTip\n\n\n\nPara crear el contenedor de Docker con PostgreSQL, utilizaremos variables de entorno para configurar la base de datos. En este caso, configuraremos la base de datos con el nombre biblioteca, el usuario admin, y la contraseña admin.\n\n\nPara trabajar con una base de datos relacional, utilizaremos PostgreSQL. Crearemos un contenedor de Docker con PostgreSQL y configuraremos Django para conectarse a esta base de datos.\nPara trabajar con la base de datos no relacional, utilizaremos MongoDB. Crearemos un contenedor de Docker con MongoDB y configuraremos Django para conectarse a esta base de datos.\nPrimero, crearemos un archivo docker-compose.yml en la raíz del proyecto con la siguiente configuración:\nservices:\n  postgres:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: biblioteca\n      POSTGRES_USER: admin\n      POSTGRES_PASSWORD: admin\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  mongo:\n    image: mongo:4.4\n    environment:\n      MONGO_INITDB_DATABASE: biblioteca\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: admin\n    ports:\n      - \"27017:27017\"\n    volumes:\n      - mongo_data:/data/db\n\nvolumes:\n  postgres_data:\n  mongo_data:\nCon el comando anterior, creamos un contenedor de Docker con PostgreSQL y otro con MongoDB. Configuramos la base de datos con el nombre biblioteca, el usuario admin, y la contraseña admin.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Bases de Dato en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_base_de_datos.html#configuración-de-la-base-de-datos-en-django",
    "href": "unidades/unidad5/6_base_de_datos.html#configuración-de-la-base-de-datos-en-django",
    "title": "Bases de Dato en Django",
    "section": "Configuración de la Base de Datos en Django",
    "text": "Configuración de la Base de Datos en Django\nPara configurar Django para conectarse a la base de datos PostgreSQL, y MongoDB, añadiremos las siguientes configuraciones al archivo settings.py:\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('POSTGRES_DB'),\n        'USER': os.getenv('POSTGRES_USER'),\n        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),\n        'HOST': 'localhost',\n        'PORT': '5432',\n    },\n    'mongodb': {\n        'ENGINE': 'djongo',\n        'NAME': os.getenv('MONGO_INITDB_DATABASE'),\n        'ENFORCE_SCHEMA': False,\n        'CLIENT': {\n            'host': f\"mongodb://{os.getenv('MONGO_INITDB_ROOT_USERNAME')}:{os.getenv('MONGO_INITDB_ROOT_PASSWORD')}@localhost:27017/{os.getenv('MONGO_INITDB_DATABASE')}\"\n        }\n    }\n}",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Bases de Dato en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_base_de_datos.html#modelo-de-libro",
    "href": "unidades/unidad5/6_base_de_datos.html#modelo-de-libro",
    "title": "Bases de Dato en Django",
    "section": "Modelo de Libro",
    "text": "Modelo de Libro\nComenzaremos creando un modelo de base de datos para almacenar información sobre los libros. Abriremos el archivo libros/models.py y definiremos el modelo de libro de la siguiente manera:\nfrom django.db import models\n\nclass Libro(models.Model):\n    titulo = models.CharField(max_length=100)\n    autor = models.CharField(max_length=100)\n    editorial = models.CharField(max_length=100)\n    fecha_publicacion = models.DateField()\n\n    def __str__(self):\n        return self.titulo\nLuego, registraremos el modelo en el archivo libros/admin.py para poder administrarlo a través del panel de administración de Django:\nfrom django.contrib import admin\nfrom .models import Libro\n\nadmin.site.register(Libro)",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Bases de Dato en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/6_base_de_datos.html#modelo-de-autor",
    "href": "unidades/unidad5/6_base_de_datos.html#modelo-de-autor",
    "title": "Bases de Dato en Django",
    "section": "Modelo de Autor",
    "text": "Modelo de Autor\nA continuación, crearemos un modelo de base de datos para almacenar información sobre los autores. Abriremos el archivo libros/models.py y definiremos el modelo de autor de la siguiente manera:\nclass Autor (models.Model):\n    nombre = models.CharField(max_length=100)\n    apellido = models.CharField(max_length=100)\n    fecha_nacimiento = models.DateField()\n    \n    def __str__(self):\n        return self.nombre + ' ' + self.apellido\nLuego, registraremos el modelo en el archivo libros/admin.py:\nfrom .models import Autor\n\nadmin.site.register(Autor)",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Bases de Dato en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/7_testing.html",
    "href": "unidades/unidad5/7_testing.html",
    "title": "Testing",
    "section": "",
    "text": "Vamos a empezar la parte de testing para ello vamos a crear en la ruta raiz el archivo pytest.ini\n[pytest]\n\nDJANGO_SETTINGS_MODULE = inventario.test_settings\n\npython_files = tests.py test_*.py *_tests.py\nAhora vamos a crear el archivo test_settings.py en la carpeta inventario\nfrom .settings import *\n\n# Configuraciones adicionales para el entorno de prueba\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': ':memory:',\n    }\n}\nAhora vamos a crear el archivo test_productos.py en la carpeta inventario\nimport pytest\nfrom productos.models import Producto\n\n@pytest.mark.django_db\ndef test_crear_producto():\n    producto = Producto.objects.create(\n        nombre=\"Producto de prueba\",\n        precio=10.00,\n        cantidad=5\n    )\n    assert producto.nombre == \"Producto de prueba\"\n    assert producto.precio == 10.00\n    assert producto.cantidad == 5\n\n@pytest.mark.django_db\ndef test_str_producto():\n    producto = Producto.objects.create(\n        nombre=\"Producto de prueba\",\n        precio=10.00,\n        cantidad=5\n    )\n    assert str(producto) == \"Producto de prueba\"\nAhora vamos a ejecutar el comando pytest\npytest\nSi todo esta correcto deberiamos ver algo como esto\n====================================================== test session starts ======================================================\nplatform linux -- Python 3.12.3, pytest-8.2.0, pluggy-1.5.0\ndjango: version: 4.2, settings: inventario.test_settings (from ini)\nrootdir: /home/statick/workspaces/Curso_django_and_react/inventario_django\nconfigfile: pytest.ini\nplugins: django-4.8.0\ncollected 2 items                                                                                                               \n\nproductos/tests/test_productos.py ..                                                                                      [100%]\n\n======================================================= warnings summary ========================================================\nCon esto podemos ver que los test han pasado correctamente.\nPodemos ver que pytest.ini tiene la configuracion de DJANGO_SETTINGS_MODULE = inventario.test_settings, esto es para que pytest pueda encontrar las configuraciones de django.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Testing</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_correccion_test.html",
    "href": "unidades/unidad5/8_correccion_test.html",
    "title": "Corrección de tests en Django Rest Framework",
    "section": "",
    "text": "Introducción\nEn este documento se describen los pasos necesarios para corregir los tests de Django Rest Framework.\nActualmente tenemos el siguiente error en los tests:",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Corrección de tests en Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_correccion_test.html#introducción",
    "href": "unidades/unidad5/8_correccion_test.html#introducción",
    "title": "Corrección de tests en Django Rest Framework",
    "section": "",
    "text": "================================================== test session starts ===================================================\nplatform linux -- Python 3.12.3, pytest-8.2.0, pluggy-1.5.0\nrootdir: /home/statick/workspaces/Curso_django_and_react/inventario_django\ncollected 0 items / 1 error                                                                                              \n\n========================================================= ERRORS =========================================================\n________________________________________ ERROR collecting productos/test_views.py ________________________________________\nImportError while importing test module '/home/statick/workspaces/Curso_django_and_react/inventario_django/productos/test_views.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib64/python3.12/importlib/__init__.py:90: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nproductos/test_views.py:1: in &lt;module&gt;\n    from django.urls import reverse\nE   ModuleNotFoundError: No module named 'django'\n================================================ short test summary info =================================================\nERROR productos/test_views.py\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n==================================================== 1 error in 0.07s ====================================================",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Corrección de tests en Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_correccion_test.html#pasos",
    "href": "unidades/unidad5/8_correccion_test.html#pasos",
    "title": "Corrección de tests en Django Rest Framework",
    "section": "Pasos",
    "text": "Pasos\n\n1. Crear un entorno virtual\npython3 -m venv venv\n\n\n2. Activar el entorno virtual\nsource venv/bin/activate\n\n\n3. Instalar las dependencias\npip install -r requirements.txt\n\n\n4. Correr los tests\npytest\n\n\n5. Corregir los tests\nPara corregir los tests, se debe modificar el archivo productos/test_views.py y corregir el error de importación.\n\n\n6. Correr los tests nuevamente\npytest\n\n\n7. Desactivar el entorno virtual\ndeactivate",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Corrección de tests en Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_correccion_test.html#conclusión",
    "href": "unidades/unidad5/8_correccion_test.html#conclusión",
    "title": "Corrección de tests en Django Rest Framework",
    "section": "Conclusión",
    "text": "Conclusión\nUna vez corregidos los tests, se debe hacer un pull request al repositorio original.",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Corrección de tests en Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/8_correccion_test.html#referencias",
    "href": "unidades/unidad5/8_correccion_test.html#referencias",
    "title": "Corrección de tests en Django Rest Framework",
    "section": "Referencias",
    "text": "Referencias\n\nDjango Rest Framework\nDjango\npytest\nVirtualenv\nPython\nGit\nGitHub\nMarkdown\nPip",
    "crumbs": [
      "Unidad 5: Django",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Corrección de tests en Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html",
    "href": "unidades/unidad6/1_introduccion_frontend.html",
    "title": "HTML",
    "section": "",
    "text": "Resumen\nEste capítulo de HTML para desarrolladores web proporciona una sólida visión general para desarrolladores, desde principiantes hasta expertos en HTML. Si eres completamente nuevo en HTML, aprenderás cómo construir contenido estructuralmente sólido. Si has estado construyendo sitios web durante años, este curso puede llenar lagunas de conocimiento que ni siquiera sabías que tenías.\nA lo largo de este viaje, estaremos construyendo la estructura para MachineLearningWorkshop.com. Ninguna máquina resultó dañada en la creación de esta serie.\nEsto no es una referencia completa. Cada sección presenta el tema de la sección con explicaciones breves y ejemplos, brindándote la oportunidad de explorar más a fondo. Habrá enlaces a referencias de temas, como las especificaciones de MDN y WHATWG, y otros artículos de web.dev. Si bien este no es un curso de accesibilidad, cada sección incluirá las mejores prácticas de accesibilidad y problemas específicos, con enlaces a investigaciones más profundas sobre el tema. Cada sección tendrá una breve evaluación para ayudar a las personas a confirmar su comprensión.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#visión-general-de-html",
    "href": "unidades/unidad6/1_introduccion_frontend.html#visión-general-de-html",
    "title": "HTML",
    "section": "Visión general de HTML",
    "text": "Visión general de HTML\nHTML es el lenguaje de marcado estándar para crear páginas web. HTML significa Lenguaje de Marcado de Hipertexto. Un lenguaje de marcado es un conjunto de etiquetas que se utilizan para definir la estructura de una página web. El contenido de una página web se define con HTML. Los elementos HTML son los bloques de construcción de las páginas HTML.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#una-breve-introducción-a-los-conceptos-clave-en-html.",
    "href": "unidades/unidad6/1_introduccion_frontend.html#una-breve-introducción-a-los-conceptos-clave-en-html.",
    "title": "HTML",
    "section": "Una breve introducción a los conceptos clave en HTML.",
    "text": "Una breve introducción a los conceptos clave en HTML.\nHTML es un lenguaje de marcado que define la estructura de tu contenido, consta de una serie de elementos que rodean o envuelven el contenido para que se muestre o actúe de una manera particular.\nLos elementos HTML son los bloques de construcción de las páginas HTML. Los elementos HTML se representan mediante etiquetas. Las etiquetas HTML etiquetan piezas de contenido como “encabezado”, “párrafo”, “tabla” y así sucesivamente. Browsers web renderizan el contenido HTML en una página web.\n\nEncabezado de un documento HTML\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nEl contenido de la página va aquí.\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nPárrafo\n&lt;p&gt;Este es un párrafo.&lt;/p&gt;\n\n\nTabla\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Encabezado de la tabla&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Dato de la tabla&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#estructura-del-documento",
    "href": "unidades/unidad6/1_introduccion_frontend.html#estructura-del-documento",
    "title": "HTML",
    "section": "Estructura del documento",
    "text": "Estructura del documento\n\nAprende cómo estructurar tus documentos HTML con una base sólida.\nUn documento HTML consta de una serie de elementos HTML anidados. Un documento HTML comienza con un elemento raíz **\n\n, seguido de un elemento \n\n** y un elemento **\n\n. El elemento \n\n** contiene metadatos sobre el documento, como el título de la página. El elemento **\n\n** contiene el contenido de la página.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\nEl contenido de la página va aquí.\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#metadatos",
    "href": "unidades/unidad6/1_introduccion_frontend.html#metadatos",
    "title": "HTML",
    "section": "Metadatos",
    "text": "Metadatos\n\nCómo utilizar etiquetas meta para proporcionar información sobre tus documentos.\nLas etiquetas meta proporcionan información sobre el documento HTML. Los metadatos no se muestran en la página web, pero son importantes para los motores de búsqueda y otros servicios web.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;meta name=\"description\" content=\"Descripción de la página\"&gt;\n&lt;meta name=\"keywords\" content=\"Palabras clave, separadas por comas\"&gt;\n&lt;meta name=\"author\" content=\"Nombre del autor\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\nEl contenido de la página va aquí.\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan las etiquetas meta para proporcionar información sobre el documento HTML, como la codificación de caracteres, la descripción de la página, las palabras clave y el autor.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#html-semántico",
    "href": "unidades/unidad6/1_introduccion_frontend.html#html-semántico",
    "title": "HTML",
    "section": "HTML semántico",
    "text": "HTML semántico\n\nUsar los elementos HTML correctos para describir el contenido de tu documento.\nHTML semántico es un enfoque de escribir HTML que hace que el código sea más claro y legible tanto para los humanos como para las máquinas. Los elementos HTML semánticos describen el significado del contenido en lugar de su apariencia.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;header&gt;\n&lt;h1&gt;Encabezado de la página&lt;/h1&gt;\n&lt;/header&gt;\n&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Enlace 1&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Enlace 2&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Enlace 3&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n&lt;section&gt;\n&lt;h2&gt;Sección 1&lt;/h2&gt;\n&lt;p&gt;Contenido de la sección 1.&lt;/p&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;h2&gt;Sección 2&lt;/h2&gt;\n&lt;p&gt;Contenido de la sección 2.&lt;/p&gt;\n&lt;/section&gt;\n&lt;footer&gt;\n&lt;p&gt;Pie de página&lt;/p&gt;\n&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan elementos HTML semánticos como &lt;header&gt;, &lt;nav&gt;, &lt;section&gt; y &lt;footer&gt; para describir el contenido de la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#encabezados-y-secciones",
    "href": "unidades/unidad6/1_introduccion_frontend.html#encabezados-y-secciones",
    "title": "HTML",
    "section": "Encabezados y secciones",
    "text": "Encabezados y secciones\n\nCómo utilizar correctamente los elementos de sección para darle significado a tu contenido.\nLos elementos de sección en HTML son elementos que definen secciones de contenido en un documento HTML. Los elementos de sección ayudan a organizar y estructurar el contenido de una página web.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Encabezado de nivel 1&lt;/h1&gt;\n&lt;section&gt;\n&lt;h2&gt;Sección 1&lt;/h2&gt;\n&lt;p&gt;Contenido de la sección 1.&lt;/p&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;h2&gt;Sección 2&lt;/h2&gt;\n&lt;p&gt;Contenido de la sección 2.&lt;/p&gt;\n&lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan elementos de sección como &lt;section&gt; y &lt;h2&gt; para organizar y estructurar el contenido de la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#atributos",
    "href": "unidades/unidad6/1_introduccion_frontend.html#atributos",
    "title": "HTML",
    "section": "Atributos",
    "text": "Atributos\n\nAprende sobre los diferentes atributos globales junto con los atributos específicos de elementos HTML particulares.\nLos atributos HTML proporcionan información adicional sobre los elementos HTML. Los atributos pueden ser globales o específicos de un elemento.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Texto alternativo\"&gt;\n&lt;a href=\"https://www.ejemplo.com\"&gt;Enlace&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los atributos src y alt en el elemento &lt;img&gt; y el atributo href en el elemento &lt;a&gt;.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#html-particulares.",
    "href": "unidades/unidad6/1_introduccion_frontend.html#html-particulares.",
    "title": "HTML",
    "section": "HTML particulares.",
    "text": "HTML particulares.\n\nAprende sobre los diferentes atributos globales junto con los atributos específicos de elementos HTML particulares.\nLos atributos HTML proporcionan información adicional sobre los elementos HTML. Los atributos pueden ser globales o específicos de un elemento.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Texto alternativo\"&gt;\n&lt;a href=\"https://www.ejemplo.com\"&gt;Enlace&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los atributos src y alt en el elemento &lt;img&gt; y el atributo href en el elemento &lt;a&gt;.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#conceptos-básicos-de-texto",
    "href": "unidades/unidad6/1_introduccion_frontend.html#conceptos-básicos-de-texto",
    "title": "HTML",
    "section": "Conceptos básicos de texto",
    "text": "Conceptos básicos de texto\n\nCómo formatear texto utilizando HTML.\nHTML proporciona una serie de elementos para formatear texto, como &lt;strong&gt;, &lt;em&gt;, &lt;u&gt;, &lt;s&gt;, &lt;sub&gt; y &lt;sup&gt;.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Este es un &lt;strong&gt;párrafo&lt;/strong&gt; con texto en negrita.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;em&gt;párrafo&lt;/em&gt; con texto en cursiva.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;u&gt;párrafo&lt;/u&gt; con texto subrayado.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;s&gt;párrafo&lt;/s&gt; con texto tachado.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;sub&gt;párrafo&lt;/sub&gt; con texto subíndice.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;sup&gt;párrafo&lt;/sup&gt; con texto superíndice.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan elementos HTML como &lt;strong&gt;, &lt;em&gt;, &lt;u&gt;, &lt;s&gt;, &lt;sub&gt; y &lt;sup&gt; para formatear texto.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#enlaces",
    "href": "unidades/unidad6/1_introduccion_frontend.html#enlaces",
    "title": "HTML",
    "section": "Enlaces",
    "text": "Enlaces\n\nTodo lo que necesitas saber sobre enlaces.\nLos enlaces HTML se crean con el elemento &lt;a&gt;. El atributo href especifica la URL de la página a la que enlaza el enlace.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;a href=\"https://www.ejemplo.com\"&gt;Enlace a ejemplo.com&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;a&gt; con el atributo href para crear un enlace a una página web.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#listas",
    "href": "unidades/unidad6/1_introduccion_frontend.html#listas",
    "title": "HTML",
    "section": "Listas",
    "text": "Listas\n\nCómo crear listas en HTML.\nHTML proporciona elementos para crear listas ordenadas (&lt;ol&gt;), listas desordenadas (&lt;ul&gt;) y listas de definición (&lt;dl&gt;).\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h2&gt;Listas ordenadas&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;Elemento 1&lt;/li&gt;\n&lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;Listas desordenadas&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;Elemento 1&lt;/li&gt;\n&lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;Listas de definición&lt;/h2&gt;\n&lt;dl&gt;\n&lt;dt&gt;Término 1&lt;/dt&gt;\n&lt;dd&gt;Definición 1&lt;/dd&gt;\n&lt;dt&gt;Término 2&lt;/dt&gt;\n&lt;dd&gt;Definición 2&lt;/dd&gt;\n&lt;/dl&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan elementos HTML como &lt;ol&gt;, &lt;ul&gt;, &lt;li&gt;, &lt;dl&gt;, &lt;dt&gt; y &lt;dd&gt; para crear listas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#navegación",
    "href": "unidades/unidad6/1_introduccion_frontend.html#navegación",
    "title": "HTML",
    "section": "Navegación",
    "text": "Navegación\n\nLa navegación es un elemento clave de cualquier sitio o aplicación, y comienza con HTML.\nLa navegación en HTML se puede crear con elementos como &lt;nav&gt;, &lt;ul&gt; y &lt;li&gt;.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;nav&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Acerca de&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Servicios&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#\"&gt;Contacto&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/nav&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;nav&gt; con elementos &lt;ul&gt; y &lt;li&gt; para crear una barra de navegación.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#tablas",
    "href": "unidades/unidad6/1_introduccion_frontend.html#tablas",
    "title": "HTML",
    "section": "Tablas",
    "text": "Tablas\n\nComprender cómo utilizar tablas para marcar datos tabulares.\nLas tablas en HTML se crean con elementos como &lt;table&gt;, &lt;tr&gt;, &lt;th&gt; y &lt;td&gt;.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n&lt;tr&gt;\n&lt;th&gt;Encabezado 1&lt;/th&gt;\n&lt;th&gt;Encabezado 2&lt;/th&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Dato 1&lt;/td&gt;\n&lt;td&gt;Dato 2&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;Dato 3&lt;/td&gt;\n&lt;td&gt;Dato 4&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;table&gt; con elementos &lt;tr&gt;, &lt;th&gt; y &lt;td&gt; para crear una tabla.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#formularios",
    "href": "unidades/unidad6/1_introduccion_frontend.html#formularios",
    "title": "HTML",
    "section": "Formularios",
    "text": "Formularios\n\nUna visión general de los formularios en HTML.\nLos formularios en HTML se crean con elementos como &lt;form&gt;, &lt;input&gt;, &lt;textarea&gt; y &lt;button&gt;.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form&gt;\n&lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n&lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n&lt;label for=\"correo\"&gt;Correo:&lt;/label&gt;\n&lt;input type=\"email\" id=\"correo\" name=\"correo\"&gt;\n&lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;\n&lt;textarea id=\"mensaje\" name=\"mensaje\"&gt;&lt;/textarea&gt;\n&lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;form&gt; con elementos &lt;input&gt;, &lt;textarea&gt; y &lt;button&gt; para crear un formulario.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#imágenes",
    "href": "unidades/unidad6/1_introduccion_frontend.html#imágenes",
    "title": "HTML",
    "section": "Imágenes",
    "text": "Imágenes\n\nUna visión general de las imágenes en HTML.\nLas imágenes en HTML se crean con el elemento &lt;img&gt;. El atributo src especifica la URL de la imagen.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;img src=\"imagen.jpg\" alt=\"Texto alternativo\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;img&gt; con el atributo src para mostrar una imagen en la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#audio-y-video",
    "href": "unidades/unidad6/1_introduccion_frontend.html#audio-y-video",
    "title": "HTML",
    "section": "Audio y video",
    "text": "Audio y video\n\nDescubre cómo trabajar con medios HTML como audio y video.\nLos elementos de audio y video en HTML se crean con los elementos &lt;audio&gt; y &lt;video&gt;. Los atributos src y controls son comunes a ambos elementos.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;audio src=\"audio.mp3\" controls&gt;&lt;/audio&gt;\n&lt;video src=\"video.mp4\" controls&gt;&lt;/video&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;audio&gt; y &lt;video&gt; con los atributos src y controls para reproducir audio y video en la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#plantilla-ranura-y-sombra",
    "href": "unidades/unidad6/1_introduccion_frontend.html#plantilla-ranura-y-sombra",
    "title": "HTML",
    "section": "Plantilla, ranura y sombra",
    "text": "Plantilla, ranura y sombra\n\nUna explicación de plantilla, ranura y sombra.\nLos elementos de plantilla, ranura y sombra en HTML se utilizan para crear contenido reutilizable y encapsulado.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;template&gt;\n&lt;p&gt;Este es un contenido de plantilla.&lt;/p&gt;\n&lt;/template&gt;\n&lt;slot&gt;&lt;/slot&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;template&gt; y &lt;slot&gt; para crear contenido reutilizable y encapsulado.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#apis-de-html",
    "href": "unidades/unidad6/1_introduccion_frontend.html#apis-de-html",
    "title": "HTML",
    "section": "APIs de HTML",
    "text": "APIs de HTML\n\nAprende cómo se puede exponer y manipular información HTML utilizando JavaScript.\nLas APIs de HTML proporcionan una forma de interactuar con el contenido HTML utilizando JavaScript.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p id=\"parrafo\"&gt;Este es un párrafo.&lt;/p&gt;\n&lt;script&gt;\ndocument.getElementById(\"parrafo\").innerHTML = \"Este es un nuevo párrafo.\";\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el método getElementById para seleccionar un elemento HTML y cambiar su contenido.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#enfoque",
    "href": "unidades/unidad6/1_introduccion_frontend.html#enfoque",
    "title": "HTML",
    "section": "Enfoque",
    "text": "Enfoque\n\nCómo gestionar el orden de enfoque en tus documentos HTML.\nEl enfoque en HTML se puede gestionar con el atributo tabindex y el método focus() en JavaScript.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=\"text\" id=\"campo1\" tabindex=\"1\"&gt;\n&lt;input type=\"text\" id=\"campo2\" tabindex=\"2\"&gt;\n&lt;input type=\"text\" id=\"campo3\" tabindex=\"3\"&gt;\n&lt;script&gt;\ndocument.getElementById(\"campo2\").focus();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el atributo tabindex y el método focus() para gestionar el orden de enfoque en los campos de texto.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#otros-elementos-de-texto-en-línea",
    "href": "unidades/unidad6/1_introduccion_frontend.html#otros-elementos-de-texto-en-línea",
    "title": "HTML",
    "section": "Otros elementos de texto en línea",
    "text": "Otros elementos de texto en línea\n\nUna introducción a la variedad de elementos utilizados para marcar texto.\nHTML proporciona una variedad de elementos para marcar texto, como &lt;a&gt;, &lt;strong&gt;, &lt;em&gt;, &lt;u&gt;, &lt;s&gt;, &lt;sub&gt; y &lt;sup&gt;.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;p&gt;Este es un &lt;a href=\"#\"&gt;enlace&lt;/a&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;strong&gt;texto en negrita&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;em&gt;texto en cursiva&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;u&gt;texto subrayado&lt;/u&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;s&gt;texto tachado&lt;/s&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;sub&gt;texto subíndice&lt;/sub&gt;.&lt;/p&gt;\n&lt;p&gt;Este es un &lt;sup&gt;texto superíndice&lt;/sup&gt;.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan elementos HTML como &lt;a&gt;, &lt;strong&gt;, &lt;em&gt;, &lt;u&gt;, &lt;s&gt;, &lt;sub&gt; y &lt;sup&gt; para marcar texto.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#detalles-y-resumen",
    "href": "unidades/unidad6/1_introduccion_frontend.html#detalles-y-resumen",
    "title": "HTML",
    "section": "Detalles y resumen",
    "text": "Detalles y resumen\n\nDescubre cómo funcionan los elementos de detalles y resumen, muy útiles, y dónde usarlos.\nLos elementos de detalles y resumen en HTML se utilizan para crear un widget de detalles que se puede mostrar u ocultar.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;details&gt;\n&lt;summary&gt;Detalles&lt;/summary&gt;\n&lt;p&gt;Este es un contenido de detalles.&lt;/p&gt;\n&lt;/details&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;details&gt; y &lt;summary&gt; para crear un widget de detalles.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#diálogo",
    "href": "unidades/unidad6/1_introduccion_frontend.html#diálogo",
    "title": "HTML",
    "section": "Diálogo",
    "text": "Diálogo\n\nEl elemento  es un elemento útil para representar cualquier tipo de diálogo en HTML, descubre cómo funciona.\nEl elemento &lt;dialog&gt; en HTML se utiliza para representar cualquier tipo de diálogo, como una ventana emergente o un cuadro de diálogo.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;dialog open&gt;\n&lt;p&gt;Este es un contenido de diálogo.&lt;/p&gt;\n&lt;button&gt;Botón de cierre&lt;/button&gt;\n&lt;/dialog&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utiliza el elemento &lt;dialog&gt; para representar un diálogo con un botón de cierre.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-agrupación",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-agrupación",
    "title": "HTML",
    "section": "Elementos de agrupación",
    "text": "Elementos de agrupación\n\nDescubre cómo utilizar los elementos de agrupación en HTML.\nLos elementos de agrupación en HTML se utilizan para agrupar elementos relacionados juntos.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;fieldset&gt;\n&lt;legend&gt;Grupo de campos&lt;/legend&gt;\n&lt;input type=\"text\" id=\"campo1\"&gt;\n&lt;input type=\"text\" id=\"campo2\"&gt;\n&lt;input type=\"text\" id=\"campo3\"&gt;\n&lt;/fieldset&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;fieldset&gt; y &lt;legend&gt; para agrupar campos de formulario relacionados juntos.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-contenido-incrustado",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-contenido-incrustado",
    "title": "HTML",
    "section": "Elementos de contenido incrustado",
    "text": "Elementos de contenido incrustado\n\nDescubre cómo incrustar contenido en tu documento HTML.\nLos elementos de contenido incrustado en HTML se utilizan para incrustar contenido de otros documentos o fuentes.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;iframe src=\"https://www.ejemplo.com\"&gt;&lt;/iframe&gt;\n&lt;object data=\"archivo.pdf\" type=\"application/pdf\"&gt;&lt;/object&gt;\n&lt;embed src=\"archivo.swf\" type=\"application/x-shockwave-flash\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;iframe&gt;, &lt;object&gt; y &lt;embed&gt; para incrustar contenido en la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-formulario",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-formulario",
    "title": "HTML",
    "section": "Elementos de formulario",
    "text": "Elementos de formulario\n\nDescubre cómo utilizar los elementos de formulario en HTML.\nLos elementos de formulario en HTML se utilizan para crear formularios interactivos en una página web.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form&gt;\n&lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n&lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n&lt;label for=\"correo\"&gt;Correo:&lt;/label&gt;\n&lt;input type=\"email\" id=\"correo\" name=\"correo\"&gt;\n&lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;\n&lt;textarea id=\"mensaje\" name=\"mensaje\"&gt;&lt;/textarea&gt;\n&lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;form&gt;, &lt;input&gt;, &lt;textarea&gt; y  para crear un formulario interactivo.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-marco",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-marco",
    "title": "HTML",
    "section": "Elementos de marco",
    "text": "Elementos de marco\n\nDescubre cómo utilizar los elementos de marco en HTML.\nLos elementos de marco en HTML se utilizan para dividir una página en secciones independientes.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;frameset cols=\"25%, 75%\"&gt;\n&lt;frame src=\"menu.html\"&gt;\n&lt;frame src=\"contenido.html\"&gt;\n&lt;/frameset&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;frameset&gt; y &lt;frame&gt; para dividir una página en secciones independientes.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-interacción",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-interacción",
    "title": "HTML",
    "section": "Elementos de interacción",
    "text": "Elementos de interacción\n\nDescubre cómo utilizar los elementos de interacción en HTML.\nLos elementos de interacción en HTML se utilizan para crear elementos interactivos en una página web.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button&gt;Botón&lt;/button&gt;\n&lt;input type=\"text\"&gt;\n&lt;select&gt;\n&lt;option&gt;Elemento 1&lt;/option&gt;\n&lt;option&gt;Elemento 2&lt;/option&gt;\n&lt;option&gt;Elemento 3&lt;/option&gt;\n&lt;/select&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;button&gt;, &lt;input&gt; y &lt;select&gt; para crear elementos interactivos en la página.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-lista",
    "href": "unidades/unidad6/1_introduccion_frontend.html#elementos-de-lista",
    "title": "HTML",
    "section": "Elementos de lista",
    "text": "Elementos de lista\n\nDescubre cómo utilizar los elementos de lista en HTML.\nLos elementos de lista en HTML se utilizan para crear listas de elementos.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Título de la página&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;ul&gt;\n&lt;li&gt;Elemento 1&lt;/li&gt;\n&lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ol&gt;\n&lt;li&gt;Elemento 1&lt;/li&gt;\n&lt;li&gt;Elemento 2&lt;/li&gt;\n&lt;li&gt;Elemento 3&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el ejemplo anterior se utilizan los elementos &lt;ul&gt; y &lt;ol&gt; para crear listas de elementos.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>HTML</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    color: blue;\n}\np {\n    color: red;\n}\n\n\nCSS Interno: Se utiliza la etiqueta &lt;style&gt; dentro del documento HTML.\n\nEjemplo:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        h1 {\n            color: blue;\n        }\n        p {\n            color: red;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-1",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-1",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nDefinir los estilos de los elementos HTML dentro del documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;style&gt;\n        h1 {\n            color: blue;\n        }\n        p {\n            color: red;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n\nCSS en línea: Se utiliza el atributo style en los elementos HTML.\n\nEjemplo:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1 style=\"color: blue;\"&gt;Este es un título&lt;/h1&gt;\n    &lt;p style=\"color: red;\"&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-2",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-2",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nDefinir los estilos de los elementos HTML utilizando el atributo style.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n    &lt;h1 style=\"color: blue;\"&gt;Este es un título&lt;/h1&gt;\n    &lt;p style=\"color: red;\"&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nEn este capítulo se utilizará CSS Externo para definir los estilos de los elementos HTML.\nAhora que hemos aprendido cómo se puede utilizar CSS en un documento HTML, vamos a ver cómo se pueden definir los estilos de los elementos HTML.\nPara comprender mejor el tema de CSS vamos a utilizar varios ejemplos que permitirán conocer cada uno de los conceptos necesarios para poder aplicar estilos a los elementos HTML.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-3",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-3",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando los selectores de tipo, clase, ID, atributo y universal.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1 id=\"titulo\"&gt;Este es un título&lt;/h1&gt;\n    &lt;p class=\"texto-rojo\"&gt;Este es un párrafo&lt;/p&gt;\n    &lt;p title=\"Este es un párrafo con título\"&gt;Este es un párrafo con título&lt;/p&gt;\n    &lt;p&gt;Este es un párrafo sin título&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    color: blue;\n}\n\n.texto-rojo {\n    color: red;\n}\n\n#titulo {\n    color: green;\n}\n\n[title] {\n    color: purple;\n}\n\n* {\n    color: black;\n}\n\nEn los siguientes ejemplos se verán más detalles sobre cómo se pueden utilizar los selectores para aplicar estilos a los elementos HTML.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-4",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-4",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nAñadir comentarios en el archivo styles.css.\n\n\n\nVer respuesta\n\n/* Este es un comentario */\n\nh1 {\n    color: blue; /* Este es un comentario */\n}\n\n.texto-rojo {\n    color: red; /* Este es un comentario */\n}\n\n#titulo {\n    color: green; /* Este es un comentario */\n}\n\n[title] {\n    color: purple; /* Este es un comentario */\n}\n\n* {\n    color: black; /* Este es un comentario */\n}\n\nLos comentarios son útiles para explicar el código y hacerlo más fácil de entender.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-5",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-5",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    color: blue;\n}\n\np {\n    color: red;\n}\n\nEn CSS se pueden utilizar varios tipos de valores para definir los estilos de los elementos HTML. Algunos de los valores más comunes son:\n\nColores: Se pueden utilizar nombres de colores, códigos hexadecimales, códigos RGB, códigos RGBA, códigos HSL y códigos HSLA.\n\nEjemplo:\nh1 {\n    color: blue; /* Nombre de color */\n    color: #ff0000; /* Código hexadecimal */\n    color: rgb(255, 0, 0); /* Código RGB */\n    color: rgba(255, 0, 0, 0.5); /* Código RGBA */\n    color: hsl(0, 100%, 50%); /* Código HSL */\n    color: hsla(0, 100%, 50%, 0.5); /* Código HSLA */\n}\n\nTamaños: Se pueden utilizar valores en píxeles, porcentajes, ems, rems, etc.\n\nEjemplo:\nh1 {\n    font-size: 24px; /* Tamaño en píxeles */\n    font-size: 150%; /* Tamaño en porcentaje */\n    font-size: 1.5em; /* Tamaño en ems */\n    font-size: 1.5rem; /* Tamaño en rems */\n}\n\nUnidades de medida: Se pueden utilizar diferentes unidades de medida como píxeles, porcentajes, ems, rems, etc.\n\nEjemplo:\nh1 {\n    margin: 10px; /* Margen en píxeles */\n    margin: 10%; /* Margen en porcentaje */\n    margin: 1em; /* Margen en ems */\n    margin: 1rem; /* Margen en rems */\n}\n\nFuentes: Se pueden utilizar diferentes fuentes para los textos.\n\nEjemplo:\nh1 {\n    font-family: Arial, sans-serif; /* Fuente Arial */\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-6",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-6",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando colores, tamaños, unidades de medida y fuentes.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    color: blue; /* Nombre de color */\n    font-size: 24px; /* Tamaño en píxeles */\n    margin: 10px; /* Margen en píxeles */\n    font-family: Arial, sans-serif; /* Fuente Arial */\n}\n\np {\n    color: red; /* Nombre de color */\n    font-size: 18px; /* Tamaño en píxeles */\n    margin: 5px; /* Margen en píxeles */\n    font-family: Verdana, sans-serif; /* Fuente Verdana */\n}\n\nEn los siguientes ejemplos se verán más detalles sobre cómo se pueden utilizar los valores y convenciones para aplicar estilos a los elementos HTML.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-7",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-7",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando bordes.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    border-top: 1px solid black;\n    border-right: 2px dashed red;\n    border-bottom: 3px dotted blue;\n    border-left: 4px double green;\n}\n\np {\n    border-top: 1px solid black;\n    border-right: 2px dashed red;\n    border-bottom: 3px dotted blue;\n    border-left: 4px double green;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-8",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-8",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando diferentes unidades de medida.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    font-size: 24px; /* Tamaño en píxeles */\n    margin: 10px; /* Margen en píxeles */\n    padding: 5%; /* Relleno en porcentaje */\n    width: 50em; /* Ancho en ems */\n    height: 100%; /* Altura en porcentaje */\n}\n\np {\n    font-size: 18px; /* Tamaño en píxeles */\n    margin: 5px; /* Margen en píxeles */\n    padding: 2%; /* Relleno en porcentaje */\n    width: 30em; /* Ancho en ems */\n    height: 50%; /* Altura en porcentaje */\n}\n\nEn este ejemplo, se utilizan diferentes unidades de medida para definir el tamaño de la fuente, el margen, el relleno, el ancho y la altura de un elemento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-9",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-9",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando el color de fondo.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nh1 {\n    background-color: yellow;\n}\n\np {\n    background-color: lightblue;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-10",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-10",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando el Box Model, el margen, el relleno y el overflow.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    width: 200px;\n    height: 100px;\n    margin: 10px;\n    padding: 5px;\n    overflow: hidden;\n}\n\np {\n    width: 300px;\n    height: 150px;\n    margin: 20px;\n    padding: 10px;\n    overflow: auto;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-11",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-11",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando el contorno.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;h2&gt;Este es un subtítulo&lt;/h2&gt;\n    &lt;h3&gt;Este es un subtítulo&lt;/h3&gt;\n    &lt;h4&gt;Este es un subtítulo&lt;/h4&gt;\n    &lt;h5&gt;Este es un subtítulo&lt;/h5&gt;\n    &lt;h6&gt;Este es un subtítulo&lt;/h6&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    outline: 1px dotted black;\n}\n\nh2 {\n    outline: 2px dashed red;\n}\n\nh3 {\n    outline: 3px double blue;\n}\n\nh4 {\n    outline: 4px groove green;\n}\n\nh5 {\n    outline: 5px ridge orange;\n}\n\nh6 {\n    outline: 6px inset purple;\n}\n\np {\n    outline: 7px outset pink;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-12",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-12",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando fuentes personalizadas.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    font-family: Arial, sans-serif;\n}\n\np {\n    font-family: 'Roboto', sans-serif;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-13",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-13",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los enlaces utilizando los selectores a, a:link, a:visited, a:hover y a:active.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;a href=\"#\"&gt;Este es un enlace&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\na {\n    color: blue;\n    text-decoration: none;\n}\n\na:link {\n    color: blue;\n    text-decoration: none;\n}\n\na:visited {\n    color: purple;\n    text-decoration: none;\n}\n\na:hover {\n    color: red;\n    text-decoration: underline;\n}\n\na:active {\n    color: green;\n    text-decoration: underline;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-14",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-14",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de las listas utilizando los selectores ul, ol y li.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ol&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nul {\n    list-style-type: disc;\n}\n\nol {\n    list-style-type: decimal;\n}\n\nli {\n    color: blue;\n}\n\nli:first-child {\n    color: red;\n}\n\nli:last-child {\n    color: green;\n}\n\nli:nth-child(2) {\n    color: orange;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-15",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-15",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de las tablas utilizando los selectores table, tr, th y td.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Encabezado 1&lt;/th&gt;\n            &lt;th&gt;Encabezado 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Dato 1&lt;/td&gt;\n            &lt;td&gt;Dato 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\ntable {\n    border-collapse: collapse;\n}\n\nth, td {\n    border: 1px solid black;\n}\n\nth {\n    background-color: lightgray;\n}\n\ntd {\n    background-color: lightblue;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-16",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-16",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando la propiedad display, max-width y position.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Este es un título&lt;/h1&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n    &lt;div&gt;Este es un div&lt;/div&gt;\n    &lt;span&gt;Este es un span&lt;/span&gt;\n    &lt;img src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n    &lt;a href=\"#\"&gt;Este es un enlace&lt;/a&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Encabezado 1&lt;/th&gt;\n            &lt;th&gt;Encabezado 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Dato 1&lt;/td&gt;\n            &lt;td&gt;Dato 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;form&gt;\n        &lt;input type=\"text\" placeholder=\"Texto\"&gt;\n        &lt;button&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nh1 {\n    display: block;\n    max-width: 200px;\n    position: static;\n}\n\np {\n    display: inline;\n    max-width: 300px;\n    position: relative;\n}\n\ndiv {\n    display: inline-block;\n    max-width: 400px;\n    position: absolute;\n}\n\nspan {\n    display: none;\n    max-width: 500px;\n    position: fixed;\n}\n\nimg {\n    display: none;\n    max-width: 600px;\n    position: sticky;\n}\n\na {\n    display: none;\n    max-width: 700px;\n    position: static;\n}\n\nul {\n    display: none;\n    max-width: 800px;\n    position: relative;\n}\n\nol {\n    display: none;\n    max-width: 900px;\n    position: absolute;\n}\n\nli {\n    display: none;\n    max-width: 1000px;\n    position: fixed;\n}\n\ntable {\n    display: none;\n    max-width: 1100px;\n    position: sticky;\n}\n\ntr {\n    display: none;\n    max-width: 1200px;\n    position: static;\n}\n\nth {\n    display: none;\n    max-width: 1300px;\n    position: relative;\n}\n\ntd {\n    display: none;\n    max-width: 1400px;\n    position: absolute;\n}\n\nform {\n    display: none;\n    max-width: 1500px;\n    position: fixed;\n}\n\ninput {\n    display: none;\n    max-width: 1600px;\n    position: sticky;\n}\n\nbutton {\n    display: none;\n    max-width: 1700px;\n    position: static;\n}\n\nclear {\n    clear: both;\n}\n\nclearfix {\n    overflow: hidden;\n}\n\nclearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\ncenter {\n    text-align: center;\n}\n\ncenter img {\n    display: inline-block;\n}\n\ncenter p {\n    display: inline-block;\n}\n\ncenter div {\n    display: inline-block;\n}\n\ncenter span {\n    display: inline-block;\n}\n\ncenter a {\n    display: inline-block;\n}\n\ncenter ul {\n    display: inline-block;\n}\n\ncenter ol {\n    display: inline-block;\n}\n\ncenter li {\n    display: inline-block;\n}\n\ncenter table {\n    display: inline-block;\n}\n\ncenter tr {\n    display: inline-block;\n}\n\ncenter th {\n    display: inline-block;\n}\n\ncenter td {\n    display: inline-block;\n}\n\ncenter form {\n    display: inline-block;\n}\n\ncenter input {\n    display: inline-block;\n}\n\ncenter button {\n    display: inline-block;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-17",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-17",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando la propiedad float.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n    &lt;div&gt;Este es un div&lt;/div&gt;\n    &lt;span&gt;Este es un span&lt;/span&gt;\n    &lt;a href=\"#\"&gt;Este es un enlace&lt;/a&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Encabezado 1&lt;/th&gt;\n            &lt;th&gt;Encabezado 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Dato 1&lt;/td&gt;\n            &lt;td&gt;Dato 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;form&gt;\n        &lt;input type=\"text\" placeholder=\"Texto\"&gt;\n        &lt;button&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nimg {\n    float: left;\n}\n\np {\n    float: right;\n}\n\ndiv {\n    float: none;\n}\n\nspan {\n    float: none;\n}\n\na {\n    float: none;\n}\n\nul {\n    float: none;\n}\n\nol {\n    float: none;\n}\n\nli {\n    float: none;\n}\n\ntable {\n    float: none;\n}\n\ntr {\n    float: none;\n}\n\nth {\n    float: none;\n}\n\ntd {\n    float: none;\n}\n\nform {\n    float: none;\n}\n\ninput {\n    float: none;\n}\n\nbutton {\n    float: none;\n}\n\nclear {\n    clear: both;\n}\n\nclearfix {\n    overflow: hidden;\n}\n\nclearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\ncenter {\n    text-align: center;\n}\n\ncenter img {\n    display: inline-block;\n}\n\ncenter p {\n    display: inline-block;\n}\n\ncenter div {\n    display: inline-block;\n}\n\ncenter span {\n    display: inline-block;\n}\n\ncenter a {\n    display: inline-block;\n}\n\ncenter ul {\n    display: inline-block;\n}\n\ncenter ol {\n    display: inline-block;\n}\n\ncenter li {\n    display: inline-block;\n}\n\ncenter table {\n    display: inline-block;\n}\n\ncenter tr {\n    display: inline-block;\n}\n\ncenter th {\n    display: inline-block;\n}\n\ncenter td {\n    display: inline-block;\n}\n\ncenter form {\n    display: inline-block;\n}\n\ncenter input {\n    display: inline-block;\n}\n\ncenter button {\n    display: inline-block;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-18",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-18",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando la propiedad display con el valor inline-block.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n    &lt;div&gt;Este es un div&lt;/div&gt;\n    &lt;span&gt;Este es un span&lt;/span&gt;\n    &lt;a href=\"#\"&gt;Este es un enlace&lt;/a&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Encabezado 1&lt;/th&gt;\n            &lt;th&gt;Encabezado 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Dato 1&lt;/td&gt;\n            &lt;td&gt;Dato 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;form&gt;\n        &lt;input type=\"text\" placeholder=\"Texto\"&gt;\n        &lt;button&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nimg {\n    display: inline-block;\n}\n\np {\n    display: inline-block;\n}\n\ndiv {\n    display: inline-block;\n}\n\nspan {\n    display: inline-block;\n}\n\na {\n    display: inline-block;\n}\n\nul {\n    display: inline-block;\n}\n\nol {\n    display: inline-block;\n}\n\nli {\n    display: inline-block;\n}\n\ntable {\n    display: inline-block;\n}\n\ntr {\n    display: inline-block;\n}\n\nth {\n    display: inline-block;\n}\n\ntd {\n    display: inline-block;\n}\n\nform {\n    display: inline-block;\n}\n\ninput {\n    display: inline-block;\n}\n\nbutton {\n    display: inline-block;\n}\n\nclear {\n    clear: both;\n}\n\nclearfix {\n    overflow: hidden;\n}\n\nclearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\ncenter {\n    text-align: center;\n}\n\ncenter img {\n    display: inline-block;\n}\n\ncenter p {\n    display: inline-block;\n}\n\ncenter div {\n    display: inline-block;\n}\n\ncenter span {\n    display: inline-block;\n}\n\ncenter a {\n    display: inline-block;\n}\n\ncenter ul {\n    display: inline-block;\n}\n\ncenter ol {\n    display: inline-block;\n}\n\ncenter li {\n    display: inline-block;\n}\n\ncenter table {\n    display: inline-block;\n}\n\ncenter tr {\n    display: inline-block;\n}\n\ncenter th {\n    display: inline-block;\n}\n\ncenter td {\n    display: inline-block;\n}\n\ncenter form {\n    display: inline-block;\n}\n\ncenter input {\n    display: inline-block;\n}\n\ncenter button {\n    display: inline-block;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-19",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-19",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML utilizando la propiedad margin con los valores auto y 0.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;img src=\"https://via.placeholder.com/150\" alt=\"Imagen\"&gt;\n    &lt;p&gt;Este es un párrafo&lt;/p&gt;\n    &lt;div&gt;Este es un div&lt;/div&gt;\n    &lt;span&gt;Este es un span&lt;/span&gt;\n    &lt;a href=\"#\"&gt;Este es un enlace&lt;/a&gt;\n    &lt;ul&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;ol&gt;\n        &lt;li&gt;Elemento 1&lt;/li&gt;\n        &lt;li&gt;Elemento 2&lt;/li&gt;\n        &lt;li&gt;Elemento 3&lt;/li&gt;\n    &lt;/ol&gt;\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Encabezado 1&lt;/th&gt;\n            &lt;th&gt;Encabezado 2&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n            &lt;td&gt;Dato 1&lt;/td&gt;\n            &lt;td&gt;Dato 2&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;form&gt;\n        &lt;input type=\"text\" placeholder=\"Texto\"&gt;\n        &lt;button&gt;Enviar&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nimg {\n    display: block;\n    margin: 0 auto;\n}\n\np {\n    display: block;\n    margin: 0 auto;\n}\n\ndiv {\n    display: block;\n    margin: 0 auto;\n}\n\nspan {\n    display: block;\n    margin: 0 auto;\n}\n\na {\n    display: block;\n    margin: 0 auto;\n}\n\nul {\n    display: block;\n    margin: 0 auto;\n}\n\nol {\n    display: block;\n    margin: 0 auto;\n}\n\nli {\n    display: block;\n    margin: 0 auto;\n}\n\ntable {\n    display: block;\n    margin: 0 auto;\n}\n\ntr {\n    display: block;\n    margin: 0 auto;\n}\n\nth {\n    display: block;\n    margin: 0 auto;\n}\n\ntd {\n    display: block;\n    margin: 0 auto;\n}\n\nform {\n    display: block;\n    margin: 0 auto;\n}\n\ninput {\n    display: block;\n    margin: 0 auto;\n}\n\nbutton {\n    display: block;\n    margin: 0 auto;\n}\n\nclear {\n    clear: both;\n}\n\nclearfix {\n    overflow: hidden;\n}\n\nclearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}\n\ncenter {\n    text-align: center;\n}\n\ncenter img {\n    display: inline-block;\n}\n\ncenter p {\n    display: inline-block;\n}\n\ncenter div {\n    display: inline-block;\n}\n\ncenter span {\n    display: inline-block;\n}\n\ncenter a {\n    display: inline-block;\n}\n\ncenter ul {\n    display: inline-block;\n}\n\ncenter ol {\n    display: inline-block;\n}\n\ncenter li {\n    display: inline-block;\n}\n\ncenter table {\n    display: inline-block;\n}\n\ncenter tr {\n    display: inline-block;\n}\n\ncenter th {\n    display: inline-block;\n}\n\ncenter td {\n    display: inline-block;\n}\n\ncenter form {\n    display: inline-block;\n}\n\ncenter input {\n    display: inline-block;\n}\n\ncenter button {\n    display: inline-block;\n}\n\ncenter clear {\n    clear: both;\n}\n\ncenter clearfix {\n    overflow: hidden;\n}\n\ncenter clearfix::after {\n    content: \"\";\n    display: table;\n    clear: both;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-20",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-20",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo styles.css.\nDefinir los estilos de los elementos HTML del portafolio personal de HTML.\nEnlazar el archivo styles.css al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;h1&gt;Nombre del autor&lt;/h1&gt;\n        &lt;img src=\"imagen.jpg\" alt=\"Imagen de perfil\"&gt;\n    &lt;/header&gt;\n    &lt;section id=\"about\"&gt;\n        &lt;h2&gt;Acerca de mí&lt;/h2&gt;\n        &lt;p&gt;Breve descripción del autor&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"skills\"&gt;\n        &lt;h2&gt;Habilidades&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Habilidad 1&lt;/li&gt;\n            &lt;li&gt;Habilidad 2&lt;/li&gt;\n            &lt;li&gt;Habilidad 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"projects\"&gt;\n        &lt;h2&gt;Proyectos&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Proyecto 1&lt;/li&gt;\n            &lt;li&gt;Proyecto 2&lt;/li&gt;\n            &lt;li&gt;Proyecto 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"contact\"&gt;\n        &lt;h2&gt;Contacto&lt;/h2&gt;\n        &lt;form&gt;\n            &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"nombre\" name=\"nombre\"&gt;\n            &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\"&gt;\n            &lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;\n            &lt;textarea id=\"mensaje\" name=\"mensaje\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nheader {\n    text-align: center;\n}\n\nheader h1 {\n    color: blue;\n}\n\nheader img {\n    border-radius: 50%;\n}\n\nsection {\n    margin: 20px;\n}\n\nsection h2 {\n    color: red;\n}\n\nsection p {\n    color: green;\n}\n\nsection ul {\n    list-style-type: disc;\n}\n\nsection li {\n    color: orange;\n}\n\nform {\n    margin: 20px;\n}\n\nform label {\n    color: purple;\n}\n\nform input, form textarea {\n    width: 100%;\n    margin: 10px 0;\n}\n\nform button {\n    background-color: pink;\n    color: white;\n    padding: 10px;\n    border: none;\n    cursor: pointer;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-21",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-21",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo index.html.\nDefinir la estructura del portafolio personal de HTML con Bootstrap.\nEnlazar el archivo index.html al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header class=\"text-center\"&gt;\n        &lt;h1&gt;Nombre del autor&lt;/h1&gt;\n        &lt;img src=\"imagen.jpg\" alt=\"Imagen de perfil\" class=\"rounded-circle\"&gt;\n    &lt;/header&gt;\n    &lt;section id=\"about\" class=\"container\"&gt;\n        &lt;h2&gt;Acerca de mí&lt;/h2&gt;\n        &lt;p&gt;Breve descripción del autor&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"skills\" class=\"container\"&gt;\n        &lt;h2&gt;Habilidades&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Habilidad 1&lt;/li&gt;\n            &lt;li&gt;Habilidad 2&lt;/li&gt;\n            &lt;li&gt;Habilidad 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"projects\" class=\"container\"&gt;\n        &lt;h2&gt;Proyectos&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Proyecto 1&lt;/li&gt;\n            &lt;li&gt;Proyecto 2&lt;/li&gt;\n            &lt;li&gt;Proyecto 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"contact\" class=\"container\"&gt;\n        &lt;h2&gt;Contacto&lt;/h2&gt;\n        &lt;form&gt;\n            &lt;label for=\"nombre\"&gt;Nombre:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" class=\"form-control\"&gt;\n            &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\"&gt;\n            &lt;label for=\"mensaje\"&gt;Mensaje:&lt;/label&gt;\n            &lt;textarea id=\"mensaje\" name=\"mensaje\" class=\"form-control\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\" class=\"btn btn-primary\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-22",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-22",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo index.html.\nDefinir la estructura del portafolio personal de HTML con Tailwind CSS.\nEnlazar el archivo index.html al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n      &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header class=\"text-center\"&gt;\n        &lt;h1 class=\"text-2xl font-bold\"&gt;Nombre del autor&lt;/h1&gt;\n        &lt;img src=\"imagen.jpg\" alt=\"Imagen de perfil\" class=\"rounded-full w-24 h-24\"&gt;\n    &lt;/header&gt;\n    &lt;section id=\"about\" class=\"container mx-auto\"&gt;\n        &lt;h2 class=\"text-xl font-bold\"&gt;Acerca de mí&lt;/h2&gt;\n        &lt;p class=\"text-lg\"&gt;Breve descripción del autor&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"skills\" class=\"container mx-auto\"&gt;\n        &lt;h2 class=\"text-xl font-bold\"&gt;Habilidades&lt;/h2&gt;\n        &lt;ul class=\"list-disc\"&gt;\n            &lt;li&gt;Habilidad 1&lt;/li&gt;\n            &lt;li&gt;Habilidad 2&lt;/li&gt;\n            &lt;li&gt;Habilidad 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"projects\" class=\"container mx-auto\"&gt;\n        &lt;h2 class=\"text-xl font-bold\"&gt;Proyectos&lt;/h2&gt;\n        &lt;ul class=\"list-disc\"&gt;\n            &lt;li&gt;Proyecto 1&lt;/li&gt;\n            &lt;li&gt;Proyecto 2&lt;/li&gt;\n            &lt;li&gt;Proyecto 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"contact\" class=\"container mx-auto\"&gt;\n        &lt;h2 class=\"text-xl font-bold\"&gt;Contacto&lt;/h2&gt;\n        &lt;form&gt;\n            &lt;label for=\"nombre\" class=\"block\"&gt;Nombre:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" class=\"w-full p-2 border border-gray-300 rounded\"&gt;\n            &lt;label for=\"email\" class=\"block\"&gt;Email:&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\" class=\"w-full p-2 border border-gray-300 rounded\"&gt;\n            &lt;label for=\"mensaje\" class=\"block\"&gt;Mensaje:&lt;/label&gt;\n            &lt;textarea id=\"mensaje\" name=\"mensaje\" class=\"w-full p-2 border border-gray-300 rounded\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\" class=\"w-full p-2 bg-blue-500 text-white rounded\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/2_introduccion_css.html#actividad-23",
    "href": "unidades/unidad6/2_introduccion_css.html#actividad-23",
    "title": "CSS",
    "section": "Actividad",
    "text": "Actividad\n\nCrear un archivo index.html.\nDefinir la estructura del portafolio personal de HTML con Bulma.\nEnlazar el archivo index.html al documento HTML.\n\n\n\nVer respuesta\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdn.jsdelivr.net/npm/bulma@1.0.2/css/bulma.min.css\"\n&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header class=\"has-text-centered\"&gt;\n        &lt;h1 class=\"title is-2\"&gt;Nombre del autor&lt;/h1&gt;\n        &lt;img src=\"imagen.jpg\" alt=\"Imagen de perfil\" class=\"is-rounded is-128x128\"&gt;\n    &lt;/header&gt;\n    &lt;section id=\"about\" class=\"container\"&gt;\n        &lt;h2 class=\"title is-4\"&gt;Acerca de mí&lt;/h2&gt;\n        &lt;p class=\"subtitle is-5\"&gt;Breve descripción del autor&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section id=\"skills\" class=\"container\"&gt;\n        &lt;h2 class=\"title is-4\"&gt;Habilidades&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Habilidad 1&lt;/li&gt;\n            &lt;li&gt;Habilidad 2&lt;/li&gt;\n            &lt;li&gt;Habilidad 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"projects\" class=\"container\"&gt;\n        &lt;h2 class=\"title is-4\"&gt;Proyectos&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;Proyecto 1&lt;/li&gt;\n            &lt;li&gt;Proyecto 2&lt;/li&gt;\n            &lt;li&gt;Proyecto 3&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;section id=\"contact\" class=\"container\"&gt;\n        &lt;h2 class=\"title is-4\"&gt;Contacto&lt;/h2&gt;\n        &lt;form&gt;\n            &lt;label for=\"nombre\" class=\"label\"&gt;Nombre:&lt;/label&gt;\n            &lt;input type=\"text\" id=\"nombre\" name=\"nombre\" class=\"input\"&gt;\n            &lt;label for=\"email\" class=\"label\"&gt;Email:&lt;/label&gt;\n            &lt;input type=\"email\" id=\"email\" name=\"email\" class=\"input\"&gt;\n            &lt;label for=\"mensaje\" class=\"label\"&gt;Mensaje:&lt;/label&gt;\n            &lt;textarea id=\"mensaje\" name=\"mensaje\" class=\"textarea\"&gt;&lt;/textarea&gt;\n            &lt;button type=\"submit\" class=\"button is-primary\"&gt;Enviar&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/section&gt;\n&lt;/body&gt;\n&lt;/html&gt;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>CSS</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html",
    "href": "unidades/unidad6/3_introduccion_javascript.html",
    "title": "JavaScript",
    "section": "",
    "text": "¿Qué es JavaScript?\nJavaScript es uno de los lenguajes de programación más usados y populares del mundo. Nació en 1995 para darle interactividad a las páginas web y desde entonces ha evolucionado hasta convertirse en un lenguaje de programación de propósito general. Dicho de otra forma: se puede usar casi para cualquier cosa.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#qué-es-programar",
    "href": "unidades/unidad6/3_introduccion_javascript.html#qué-es-programar",
    "title": "JavaScript",
    "section": "¿Qué es programar?",
    "text": "¿Qué es programar?\nEs el acto de construir un programa o conjunto de instrucciones para decirle a una computadora qué y cómo queremos que haga algo. No es diferente a cuando “programamos” la lavadora, sólo que en vez de pulsar un botón, vamos a usar texto. A este texto se le conoce como “código”.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#por-qué-aprender-javascript",
    "href": "unidades/unidad6/3_introduccion_javascript.html#por-qué-aprender-javascript",
    "title": "JavaScript",
    "section": "¿Por qué aprender JavaScript?",
    "text": "¿Por qué aprender JavaScript?\nJavaScript es, a día de hoy, el único lenguaje de programación que todos los navegadores web entienden sin necesidad de realizar ningún paso previo. Esto hace que casi cualquier página web que visitas tiene alguna línea de JavaScript en su interior.\nSu curva de aprendizaje para iniciarte es muy corta ya que en muy poco tiempo puedes empezar a hacer cosas interesantes. Para alcanzar a ser un buen programador en JavaScript necesitarás años de práctica, pero para empezar a hacer cosas interesantes bastará con poco tiempo.\nPor si fuera poco, JavaScript es uno de los lenguajes de programación más demandados en el mercado laboral. Es normal, ya que es un lenguaje muy versátil y que se puede usar para casi cualquier cosa.\nAdemás, con JavaScript vas a poder desarrollar casi cualquier cosa que te propongas. Desde aplicaciones web, móviles y de escritorio a backend, videojuegos, inteligencia artificial, Internet de las cosas. Todo un mundo de posibilidades con un sólo lenguaje.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿JavaScript sólo se puede usar para crear páginas web?\n\n\n\n\n ✗Verdadero\n\n\n ✓Falso\n\n\n\n\n\n\n¿Qué es programar en el mundo del software?\n\n\n\n\n ✗Crear páginas web y que el usuario pueda usarlas\n\n\n ✓Es el acto de construir un programa o conjunto de instrucciones para decirle a una comptuadora qué y cómo queremos que haga algo\n\n\n ✗Cualquier cosa que hagamos en un ordenador",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#cómo-abrir-la-consola",
    "href": "unidades/unidad6/3_introduccion_javascript.html#cómo-abrir-la-consola",
    "title": "JavaScript",
    "section": "Cómo abrir la consola",
    "text": "Cómo abrir la consola\nPara abrir la consola del navegador debes hacer lo siguiente:\n\nAbre tu navegador web favorito, por ejemplo, Google Chrome, Firefox, Safari o Edge.\nVe a la página about:blank en la barra de direcciones. Así evitaremos que la página web que hemos cargado nos moleste.\nHaz click derecho en cualquier parte de la página y selecciona la opción Inspeccionar Elemento o Inspect.\n\nAquí podrás ejecutar tu código JavaScript y ver el resultado. Es lo que usaremos en un inicio. Más adelante pasaremos a usar un editor como VSCode.\nEn Google Chrome o Brave, este es el aspecto de la consola\n\nEn Firefox, este es el aspecto de la consola",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-1",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-1",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Para qué sirve la consola del navegador?\n\n\n\n\n ✗La consola sirve para poder jugar con JavaScript. Es la única forma de poder ejecutar nuestro código y por eso todos los navegadores lo incorporan.\n\n\n ✓La consola nos permite ejecutar código JavaScript en tiempo real y ver el resultado. También ahí podemos ver los errores, advertencias y trazas que se producen en nuestro código.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#tipos-primitivos.",
    "href": "unidades/unidad6/3_introduccion_javascript.html#tipos-primitivos.",
    "title": "JavaScript",
    "section": "Tipos Primitivos.",
    "text": "Tipos Primitivos.\nDentro de los tipos primitivos tenemos 7 tipos de datos:\n\nnumber\nstring\nboolean\nnull\nundefined\nsymbol\nbigint\n\nNo te preocupes, no tienes ni recordarlos ni entenderlos todos ahora. En esta lección vamos a ver los tres primeros que son, sin ninguna duda, los que más vamos a usar al inicio del curso.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#números",
    "href": "unidades/unidad6/3_introduccion_javascript.html#números",
    "title": "JavaScript",
    "section": "Números",
    "text": "Números\nLos números (tipo number) son los datos más básicos que podemos representar en JavaScript. En JavaScript, no hay una diferencia entre números enteros y números decimales, todos los números son de tipo number:\n7\n3.14\n19.95\n2.998e8\n-1",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#operadores-aritméticos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#operadores-aritméticos",
    "title": "JavaScript",
    "section": "Operadores aritméticos",
    "text": "Operadores aritméticos\nCon los números, puedes usar los operadores aritméticos para realizar operaciones matemáticas. En JavaScript tenemos los siguientes operadores aritméticos:\n\n+: suma\n-: resta\n*: multiplicación\n/: división\n%: módulo (resto de la división)\n**: exponente\n\nAl usar los operadores aritméticos, el resultado siempre será un número. Por ejemplo:\n2 + 2 // 4\n4 - 2 // 2\n3 * 2 // 6\n2 / 2 // 1\n2 % 2 // 0\n3 ** 3 // 27",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#qué-significa-el-que-ves-en-los-ejemplos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#qué-significa-el-que-ves-en-los-ejemplos",
    "title": "JavaScript",
    "section": "¿Qué significa el // que ves en los ejemplos?",
    "text": "¿Qué significa el // que ves en los ejemplos?\nEs un comentario. En JavaScript, los comentarios se escriben con // y todo lo que escribas después de`// será ignorado por el navegador. Los comentarios son muy útiles para explicar qué hace nuestro código.\nAl igual que las matemáticas, las operaciones siguen un orden de precedencia. Por ejemplo, si queremos calcular el resultado de 2 + 2 * 3, primero se multiplicará 2 * 3 y luego se sumará 2 + 6. El resultado será 8.\nTambién puedes usar paréntesis para cambiar el orden de las operaciones.\n2 + 2 * 3 // 8\n(2 + 2) * 3 // 12",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#cadenas-de-texto",
    "href": "unidades/unidad6/3_introduccion_javascript.html#cadenas-de-texto",
    "title": "JavaScript",
    "section": "Cadenas de texto",
    "text": "Cadenas de texto\nLa cadena de texto (tipo string) es otro tipo de dato muy común. En JavaScript, las cadenas de texto se representan entre comillas simples, dobles o acentos graves:\n'Estás aprendiendo JavaScript'\n\n\"JavaScript te va a gustar\"\n\n`Esto es una cadena de texto`\nLas comillas simples y dobles funcionan igual, pero al usar acentos graves podemos escribir cadenas de texto que ocupen varias líneas:\n`Esto es una cadena de texto\nque ocupa varias líneas. Puedes escribir\ntantas líneas como quieras`",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#concatenación",
    "href": "unidades/unidad6/3_introduccion_javascript.html#concatenación",
    "title": "JavaScript",
    "section": "Concatenación",
    "text": "Concatenación\nPara unir dos cadenas de texto, podemos usar el operador +:\n'Estás aprendiendo ' + 'JavaScript' // 'Estás aprendiendo JavaScript'\nComo ves, el operador + de concatenación de cadenas de texto es visualmente el mismo que el operador + de suma de números. El operador + funciona de forma diferente dependiendo del tipo de dato que estemos usando.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#booleanos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#booleanos",
    "title": "JavaScript",
    "section": "Booleanos",
    "text": "Booleanos\nLos booleanos representa sólo dos valores: true (verdadero) o false (falso). Por ejemplo:\n\n¿La luz está encendida (true) o apagada (false)?\n¿Está lloviendo (true) o no está lloviendo (false)?\n¿Está el usuario logueado (true) o no está logueado (false)?\n\nEstos son ejemplos de preguntas que podemos responder con un valor booleano.\n\ntrue\nfalse",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-2",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-2",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Cuántos tipos de datos existen en JavaScript?\n\n\n\n\n ✗Sólo existen 2 tipos de datos\n\n\n ✓9 tipos de datos que se dividen en dos grandes grupos\n\n\n\n\n\n\n¿Cuántos valores se pueden representar en el tipo de dato Boolean?\n\n\n\n\n ✗true y false\n\n\n ✓Cualquier valor que se te ocurra\n\n\n ✗Números, cadenas de texto y verdadero/falso.\n\n\n\n\n\n\nEl operador + se utiliza para…\n\n\n\n\n ✗Sólo sirve para sumar dos números\n\n\n ✗Concatenar dos textos\n\n\n ✓Depende del tipo de dato que se esté utilizando",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nEscribe un código que compruebe si 10 es mayor o igual que 9\nComprueba que 0 es igual a 0\n\n\n\nRespuesta\n\nR1.\n10 &gt;= 9 // true\nR2.\n0 === 0 // true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comparando-cadenas-de-texto",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comparando-cadenas-de-texto",
    "title": "JavaScript",
    "section": "Comparando cadenas de texto",
    "text": "Comparando cadenas de texto\nNo sólo podemos usar los comparadores para comparar números, también podemos usarlos para comparar cadenas de texto y otros tipos de datos.\n'JavaScript' === 'JavaScript' // true\n'JavaScript' === 'Java' // false\n\"JavaScript\" !== 'PHP' // true\n`Estoy Aprendiendo JavaScript` === 'Estoy Aprendiendo JavaScript' // true\n\n\n\n\n\n\nTip\n\n\n\nFíjate que puedes comparar cadenas de texto que usan comillas simples, dobles o acentos graves. Al final, siguen siendo cadenas de texto y lo importante es que sean iguales.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#y-si-usamos-el-operador-con-cadenas-de-texto",
    "href": "unidades/unidad6/3_introduccion_javascript.html#y-si-usamos-el-operador-con-cadenas-de-texto",
    "title": "JavaScript",
    "section": "¿Y si usamos el operador > con cadenas de texto?",
    "text": "¿Y si usamos el operador &gt; con cadenas de texto?\nAunque no es muy común, podemos usar los operadores &gt; , &gt;=, &lt; y &lt;= para comparar cadenas de texto.\nJavaScript comparará las cadenas de texto según el valor de su código Unicode.\nPor ejemplo, la letra A tiene un valor de 65 y la letra B tiene un valor de 66. Por lo tanto, la letra A es menor que la letra B. Pero ten cuidado, ya que las letras mayúsculas tienen un valor menor que las letras minúsculas.\n'Alfa' &gt; 'Beta' // false\n'Omega' &gt; 'Beta' // true\n'alfa' &gt; 'Alfa' // true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comparando-booleanos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comparando-booleanos",
    "title": "JavaScript",
    "section": "Comparando booleanos",
    "text": "Comparando booleanos\nTambién podemos comparar booleanos con los operadores de comparación.\ntrue === true // true\ntrue === false // false\nfalse !== false // false\nPor si te preguntas cómo se comportan los operadores de mayor o menor que (&gt; y &lt;) con booleanos te diré que, aunque no tiene sentido, debes saber que true es mayor que false.\ntrue &gt; false // true\nfalse &lt; true // true\ntrue &gt; true // false\nfalse &lt; false // false",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comparando-valores-de-diferentes-tipos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comparando-valores-de-diferentes-tipos",
    "title": "JavaScript",
    "section": "Comparando valores de diferentes tipos",
    "text": "Comparando valores de diferentes tipos\nPor ahora hemos visto cómo comparar valores de un mismo tipo, pero ¿Qué pasa si queremos comparar valores de diferentes tipos? En JavaScript es algo que es posible pero no suele ser recomendable.\nEn clases posteriores veremos cómo funciona este tipo de mecanismo y explicaremos el operador de igualdad débil == y el operador de desigualdad débil != pero, por ahora, nos limitaremos a utilizar siempre el operador de igualdad estricta === y el operador de desigualdad estricta !==.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-3",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-3",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Cuál es el resultado de 24 &gt; 12?\n\n\n\n\n ✓true\n\n\n ✗false\n\n\n\n\n\nLos operadores de compración solo se pueden usar con números\n\n\n\n\n ✗Sí, sólo ahí tiene sentido\n\n\n ✓No, se pueden usar con otros tipos de datos como cadenas de textos o boleanos\n\n\n\n\n\n\nOperadores lógicos en JavaScript\nLos operadores lógicos en JavaScript (y en muchos otros lenguajes de programación) se utilizan para evaluar expresiones lógicas.\nEn JavaScript, hay tres operadores lógicos: AND (&&), OR (||) y NOT (!).\n\nOperador lógico AND &&\nEl operador lógico AND se indica con &&. Devuelve true cuando ambos valores que conecta son true.\ntrue && true // → true\ntrue && false // → false\nfalse && false // → false\nUn ejemplo en la vida real sería preguntar. ¿Están todas las luces encendidas? Se comprueba cada luz y si todas están encendidas (true), entonces la respuesta es true. Si alguna luz está apagada (false), entonces la respuesta es false.\n\n\nOperador lógico OR ||\nEl operador lógico OR se indica con || y devuelve true cuando cualquiera de los valores que conecta es true.\ntrue || true // → true\ntrue || false // → true\nfalse || false // → false\nUn ejemplo en la vida real sería preguntar. ¿Hay alguna luz encendida? Se comprueba cada luz y si alguna está encendida (true), entonces la respuesta es true. Sólo si todas las luces están apagadas (false), entonces la respuesta es false.\n\n\nOperador lógico NOT !\nEl operador lógico NOT se indica con ! e invierte el valor de un valor booleano. Se pone delante del valor que queremos invertir.\n!true // → false\n!false // → true\nUn ejemplo en la vida real sería pulsar el interruptor de la luz. Si la luz está encendida (true), entonces pulsando el interruptor la apagamos (false). Si la luz está apagada (false), entonces pulsando el interruptor la encendemos (true).\n\n\nCombinando operadores lógicos, aritméticos y de comparación\nLos operadores lógicos y los operadores de comparación se pueden combinar para crear expresiones más complejas. Por ejemplo, podemos preguntar si un número está entre dos valores.\n2 &lt; 3 && 3 &lt; 4 // → true\nEn este caso, la expresión se evalúa como true porque 2 &lt; 3 es true y 3 &lt; 4 es true. Si cualquiera de las dos expresiones fuera false, entonces la expresión sería false.\nTambién puedes usar paréntesis para agrupar operaciones y usar operadores lógicos y aritméticos.\n(2 + 2) &lt; 3 && (10 &lt; (8 * 2)) // → false\nIgualmente, es importante que sepas que las operaciones aritméticas tienen precedencia sobre las operaciones de comparación.\n2 + 2 &lt; 3 && 10 &lt; 8 * 2\n// Primero se hacen las operaciones aritméticas:\n// → 4 &lt; 3 && 10 &lt; 16\n// Ahora las comparaciones:\n// → false && true\n// Finalmente:\n// → false\n\n\nActividad\n\nComprueba si 7 es mayor que 8 y menor que 10\nTenemos un producto en una tienda. Cuesta 1500 y tenemos un descuento del 25%. Tengo $1150 en mi billetera. Escribe un código que me diga si puedo comprarlo. No utilizar parentesis.\n\n\n\nRespuesta\n\nR1.\n7 &gt; 8 && 7 &lt; 10 // false\nR2.\n1150 &gt;= 1500 * 0.75 // false\n\n\n\n\nDos o más operandos\nAunque todos los ejemplos que has visto hasta ahora usan dos operandos, los operadores lógicos también pueden usarse con más de dos operandos.\ntrue && true && true // → true\nTambién puedes mezclar operadores lógicos:\ntrue && true || false // → true\n!true && !true // → false\nfalse && true || !true // → false\nAhora te puede costar un poco entender qué está pasando, pero con la práctica te irá resultando más fácil. Prueba a hacer los ejercicios y a jugar con los operadores lógicos para que te vayan quedando más claros.\n\nQuiz\n\n¿Qué operador lógico se utiliza para comprobar si dos o más condiciones son verdaderas?\n\n\n\n\n ✗OR (||)\n\n\n ✓AND (&&)\n\n\n\n\n\n\n¿Qué operador lógico se utiliza para invertir el valor de un booleano?\n\n\n\n\n ✗OR (||)\n\n\n ✓NOT (!)\n\n\n\n\n\n\n¿Qué valor devuelve la expresión false || true?\n\n\n\n\n ✗false\n\n\n ✓true\n\n\n\n\n\n\n\n\nVariables\nA la hora de crear programas, es vital poder almacenar la información para poder utilizarla en un futuro. En JavaScript, usamos variables para conseguirlo.\nPara crear una variable podemos usar la palabra reservada let y le damos un nombre a la variable. Por ejemplo:\nlet numero\nTenemos una variable llamada numero pero no le hemos asignado ningún valor. Para asignarle un valor, usamos el operador de asignación =:\nlet numero = 1\nAhora, podemos referirnos a la variable numero y obtener el valor que le hemos asignado.\nnumero + 1 // -&gt; 1 + 1\nTambién podemos reasignarle un valor a la variable:\nnumero = 5\nnumero + 1 // -&gt; 5 + 1\n\n\n\n\n\n\nTip\n\n\n\n¡Ojo! Si no guardas el valor de esta nueva operación, el valor de la variable numero seguirá siendo 5.\nnumero = 5\nnumero + 1 // -&gt; 5 + 1\nnumero + 1 // -&gt; 5 + 1\n\n\nTen en cuenta que el valor de la variable no tiene porque ser un número. Puede ser cualquier tipo de dato, como un texto o un booleano.\nlet welcomeText = 'Hola'\nlet isCool = true\n\nActividad\n\nCrea una variable llamada mensaje y asígnale el valor “Hola JavaScript”\nCrea una variable llamada resultado y asígnale la suma de 2 y 3\n\n\n\nRespuesta\n\nR1.\nlet mensaje = 'Hola JavaScript'\nR2.\nlet resultado = 2 + 3\n\n\n\nConstantes const\nLas constantes son variables que no pueden ser reasignadas. Para crear una constante, usamos la palabra reservada const:\nconst PI = 3.1415\nSi intentas reasignar el valor de una constante, obtendrás un error:\nPI = 3 // -&gt; TypeError: Assignment to constant variable.\nComo no se pueden reasignar, las constantes siempre deben ser inicializadas con algún valor. Esto es otra diferencia respecto a let, que no es necesario inicializarla con un valor.\nlet numero // ✅\nconst RADIUS // ❌ SyntaxError: Missing initializer in const declaration\nSon muy útiles para almacenar valores que no van a cambiar. Siempre que puedas, procura usar constantes para que tu código sea más predecible.\n\n\nActividad\n\nCrea una constante llamada IS_DISABLED y asígnale el booleano true\n\n\n\nRespuesta\n\nconst IS_DISABLED = true\n\n\n\nVariables var\nEn JavaScript, también podemos crear variables usando la palabra reservada var. Es la forma más antigua y es normal que encuentres muchos tutoriales que lo usen. Sin embargo, a día de hoy, no es recomendable usar var ya que tiene comportamientos extraños que pueden causar errores en tu código.\nEn una clase posterior te explicaré cuál es la diferencia entre let, const y var además de por qué, siempre que puedas, deberías evitar var.\n\n\nEl nombre de las variables\nEn JavaScript, los nombres de las variables pueden contener letras, números y el guión bajo (_). Además, el primer carácter del nombre de la variable no puede ser un número.\nEs importante tener en cuenta que los nombres de las variables son sensibles a las mayúsculas y minúsculas, lo que significa que miVariable y mivariable son dos variables diferentes en JavaScript.\nlet miVariable = 1\nlet mivariable = 2\nmiVariable + mivariable // -&gt; 1 + 2\nTambién es importante que los nombres de las variables sean descriptivos. Por ejemplo, si queremos almacenar el nombre de un usuario, podemos llamar a la variable userName. De esta forma, cuando leamos el código, sabremos que la variable contiene el nombre de un usuario.\nlet n = 'Pepe' // ❌ Mal, no es descriptivo\nlet userName = 'Juan' // ✅ Bien, se entiende\n\n\nConvenciones y nomenclaturas\nEn JavaScript, existen diferentes nomenclaturas para nombrar las variables: camelCase, snake_case y SCREAMING_CASE.\ncamelCase es la forma más común de nombrar las variables en JavaScript. Consiste en escribir la primera palabra en minúsculas y las siguientes palabras con su primera letra en mayúsculas. Por ejemplo:\nlet camelCase = 1\nlet camelCaseIsCool = 2\nlet userName = 'statick'\nsnake_case es una forma de nombrar que consiste en escribir todas las palabras en minúsculas y separarlas con guiones bajos. Por ejemplo:\nlet snake_case = 1\nlet snake_case_is_cool = 2\nlet user_name = 'statick'\nEn algunos lenguajes de programación es muy común usar snake_case para nombrar las variables. En JavaScript no lo es tanto, pero todavía puedes encontrar código que lo use.\nLo más habitual, y es buena idea, es usarlo en los nombres de archivos. Por ejemplo, mi_archivo.js. Esto es porque algunos sistemas operativos distinguen entre mayúsculas y minúsculas y, por tanto, mi_archivo.js y Mi_archivo.js son dos archivos diferentes.\n\n\n\n\n\n\nTip\n\n\n\nTambién existe kebab-case, que es una forma de nombrar que consiste en escribir todas las palabras en minúsculas y separarlas con guiones. Por ejemplo: mi-archivo.js. Es muy similar a snake_case pero con guiones en vez de guiones bajos. No se puede usar para nombrar variables pero sí es común usarlo en los nombres de archivos.\n\n\nSCREAMING_CASE es una forma de nombrar que consiste en escribir todas las palabras en mayúsculas y separarlas con guiones bajos. Por ejemplo:\nconst SCREAMING_CASE = 1\nconst SCREAMING_CASE_IS_COOL = 2\nconst USER_NAME = 'statick'\nPara las constantes, con valores que no van a cambiar, es muy común usar SCREAMING_CASE. Así se puede distinguir fácilmente de las variables que sí cambian de valor. Por eso, no debes usarla para nombrar variables con let.\n\n\nQuiz\n\n¿Qué es una variable?\n\n\n\n\n ✓En JavaScript, una variable es un contenedor de información que se utiliza para almacenar datos en un programa.\n\n\n ✗Una variable es un tipo de dato que se utiliza para almacenar información en un programa.\n\n\n\n\n\n\n¿Qué peculiaridad tienen las variables const en JavaScript?\n\n\n\n\n ✓No se pueden reasignar\n\n\n ✗Sólo pueden guardar números\n\n\n\n\n\n\nSiempre hay que asignar un valor a una variable\n\n\n\n\n ✗Sí, siempre\n\n\n ✗No, nunca\n\n\n ✓Sólo si es una variable const\n\n\n\n\n\n\n\nnull y undefined\n¿Recuerdas que te he comentado que existen diferentes tipos de datos en JavaScript? Hemos visto números, cadenas de texto y booleanos.\nEn esta clase vas a aprender otros dos tipos de datos que, aunque son similares, tienen ligeras diferencias. Son null y undefined.\nLa particularidad de estos dos tipos de datos es que cada uno sólo tiene un valor. El tipo null sólo puede tener el valor null y el tipo undefined sólo puede tener el valor undefined.\n\n\n\n\n\n\nTip\n\n\n\nEs como el tipo booleano que podía ser true y false pero, en este caso, sólo tiene un valor.\n\n\n\n\nLa diferencia entre null y undefined\nMientras que null es un valor que significa que algo no tiene valor, undefined significa que algo no ha sido definido. Por ejemplo, si creamos una variable sin asignarle ningún valor, su valor será undefined:\nlet rolloDePapel // -&gt; undefined\nTambién podemos asignar directamente el valor undefined a una variable:\nlet rolloDePapel = undefined // -&gt; undefined\nEn cambio, para que una variable tenga el valor null, sólo podemos conseguirlo asignándole explícitamente ese valor:\nlet rolloDePapel = null\nUn caso bastante ilustrativo para entender la diferencia entre null y undefined es el siguiente:\n\n\n\nActividad\n\nCrea una variable con let llamada capacidad y asígnale un valor null\nCrea una variable con let llamada dinero y asegúrate que tenga un valor de undefined\n\n\n\nRespuesta\n\nR1.\nlet capacidad = null\nR2.\nlet dinero\n\n\n\nComparaciones con null y undefined\nAl usar la igualdad estricta que hemos visto en la clase anterior, null y undefined son considerados diferentes entre sí:\nnull === undefined // -\\&gt; false\nSólo cuando comparamos null con null o undefined con undefined obtenemos true:\nnull === null // -\\&gt; true undefined === undefined // -\\&gt; true\n\n\nQuiz\n\nnull y undefined son dos valores que significan lo mismo.\n\n\n\n\n ✗Sí, ambos indican la ausencia de valor.\n\n\n ✓No, null es un valor que indica algo vacío, mientras que undefined indica algo que no está definido todavía.\n\n\n\n\n\n\n¿Qué valor tiene una variable a la que no se le ha asignado nada al declararla?\n\n\n\n\n ✗Un valor null\n\n\n ✓Un valor undefined\n\n\n ✗No se puede declarar a una variable sin asignar un valor\n\n\n\n\n\n\n\n\nOperador typeof\nEl operador typeof devuelve una cadena de texto que indica el tipo de un operando. Puede ser usado con cualquier tipo de operando, incluyendo variables y literales.\nconst MAGIC_NUMBER = 7\ntypeof MAGIC_NUMBER // \"number\"\nTambién puedes usarlo directamente con los valores que quieras comprobar:\ntypeof undefined // \"undefined\"\ntypeof true // \"boolean\"\ntypeof 42 // \"number\"\ntypeof \"Hola mundo\" // \"string\"\n\nActividad\n\nTengo una variable llamada userName. Excribe el código necesario para ver su tipo.\n\n\n\nRespuesta\n\nlet userName\ntypeof userName // \"undefined\"\n\nExiste, sin embargo, un valor especial en JavaScript, null, que es considerado un bug en el lenguaje. El operador typeof devuelve “object” cuando se usa con null:\ntypeof null // \"object\"\nLo correcto sería que typeof null devolviera “null”, pero es un error histórico que no se puede corregir sin romper el código existente.\nPor eso, si quieres comprobar si una variable es null, debes usar la comparación estricta ===:\nconst foo = null\nfoo === null // true\nOtra pregunta es… ¿Qué es ese object? Es un tipo de dato que está en el centro de JavaScript y que veremos en detalle más adelante.\n\n\nUsando con operadores de comparación\nEl operador typeof es muy útil cuando se usa con operadores de comparación. Por ejemplo, para comprobar si una variable es del tipo que esperamos:\nconst age = 42\ntypeof age === \"number\" // true\nUna vez que tenemos expresiones lógicas, podemos empezar a encadenar operadores lógicos para comprobar múltiples condiciones:\nconst age = 42\ntypeof age === \"number\" && age &gt; 18 // true\n\n\nActividad\n\nTengo una variable llamada dogId pero no tengo claro si es una cadena de texto. Escribe el código necesario para asegurarte.\n\n\n\nRespuesta\n\ntypeof dogId === \"string\" // false\n\n\n\nQuiz\n\n¿Para qué sirve el operador typeof en JavaScript?\n\n\n\n\n ✗Nos permite leer el valor de una variable\n\n\n ✓Nos da el tipo de dato de una variable\n\n\n\n\n\n\nEl operador typeof siempre devuelve una cadena de texto con el tipo del operando.\n\n\n\n\n ✓Si, siempre devuelve una cadena de texto\n\n\n ✗Depende del tipo de dato que le pasemos, Si le pasamos un número, nos devolverá un number\n\n\n\n\n\n\n\nComentarios\nEn JavaScript, los comentarios son una forma de agregar explicaciones al código que se ignora al ejecutar el programa.\nLos comentarios son útiles para explicar el por qué del código, documentar los cambios realizados en el código y hacer que el código sea más fácil de entender para otros desarrolladores.\nHay dos tipos de comentarios en JavaScript: los comentarios de una sola línea y los comentarios de varias líneas.\n\n\nComentarios de una sola línea //\nLos comentarios de una sola línea comienzan con // y se utilizan para agregar una explicación en una sola línea de código. Por ejemplo:\n// Sólo usamos 6 decimales\nconst PI = 3.141592\n\n// Iniciamos el radio por 10, pero puede cambiar\nlet radio = 10\nTambién puedes añadir un comentario de una sola línea al final de una línea de código. Por ejemplo:\nconst PI = 3.141592 // Sólo usamos 6 decimales\n\n\nComentarios de varias líneas /* */\nLos comentarios de varias líneas comienzan con /* y terminan con */. Se utilizan para agregar notas explicativas que ocupan varias líneas de código. Por ejemplo:\n/*\n  Este es un comentario de varias líneas.\n  Se utiliza para agregar notas explicativas que ocupan varias líneas de código.\n*/\nTen en cuenta que también puedes lograr varias líneas usando el tipo de comentario //, sólo que en este caso, cada línea de código debe comenzar con //. Por ejemplo:\n// Este es un comentario de varias líneas.\n// Se utiliza para agregar notas explicativas que ocupan varias líneas de código.\nEs importante tener en cuenta que los comentarios no afectan el funcionamiento del código. Es decir, si se eliminan los comentarios, el código seguirá funcionando de la misma manera.\nEs recomendable utilizar comentarios con moderación y de manera efectiva para hacer que el código sea más fácil de entender y mantener. Los comentarios deben ser claros y concisos, y deben explicar lo que hace el código sin repetir lo que ya es obvio.\nEs mejor que tu código sea lo suficientemente claro como para no necesitar comentarios, pero si es necesario, utiliza comentarios para explicar el por qué del código, no el qué.\n\n\nQuiz\n\n¿Para qué sirven los comentarios en JavaScript?\n\n\n\n\n ✓Sirven para documentar nuestro código y explicar qué hace cada parte de él\n\n\n ✗Para cambiar el comportamiento de nuestro código\n\n\n\n\n\n\n¿Cómo se escriben los comentarios en JavaScript?\n\n\n\n\n ✗Puedes usar # para escribir comentarios de una línea o varias\n\n\n ✓Puedes usar // para escribir comentarios de una línea o /* */ para escribir comentarios de varias líneas\n\n\n\n\n\n\n\nconsole.log()\nconsole.log() es una función integrada en JavaScript que se utiliza para imprimir mensajes en la consola del navegador o del editor de código. Se utiliza principalmente para depurar el código y para imprimir valores de variables y mensajes para ayudar en el proceso de desarrollo.\n\n\n\n\n\n\nTip\n\n\n\nEn programación, una función es un conjunto de instrucciones que se pueden usar una y otra vez para hacer una tarea específica. Muchas veces, las funciones se utilizan para evitar repetir código y son parametrizables. Más adelante tendremos una sección sólo para ellas.\n\n\n\n\nSintaxis\nPara poder mostrar estos mensajes en consola, debes escribir console.log() y dentro de los paréntesis, el mensaje que quieres mostrar.\nconsole.log('Hola, JavaScript')\n// -&gt; 'Hola, JavaScript'\nTambién puedes averiguar el valor de una variable, escribiendo el nombre de la variable dentro de los paréntesis.\nconst nombre = 'JavaScript'\nconsole.log(nombre)\n// -&gt; 'JavaScript'\nComo ya sabes concatenar cadenas de texto, puedes mostrar un mensaje y el valor de una variable en el mismo console.log().\nconst nombre = 'JavaScript'\nconsole.log('Hola, ' + nombre)\n// -&gt; 'Hola, JavaScript'\nAdemás, puedes mostrar varios mensajes y valores de variables en el mismo console.log() separándolos por comas.\nconst nombre = 'JavaScript'\nconst version = 2023\nconsole.log(nombre, version)\n// -&gt; 'JavaScript 2023'\n\n\nMás métodos de console\nAdemás de console.log(), existen otros métodos que puedes utilizar para imprimir mensajes en la consola. Algunos de ellos son:\n\n\n\n\n\n\nTip\n\n\n\n\nconsole.error(): Imprime un mensaje de error en la consola.\nconsole.warn(): Imprime un mensaje de advertencia en la consola.\nconsole.info(): Imprime un mensaje de información en la consola.\n\n\n\nComo ves, la sintaxis es la misma que console.log(), sólo cambia el nombre del método.\n\n\n\n\n\n\nTip\n\n\n\nAunque puedes usar console.log() para imprimir cualquier tipo de mensaje, es recomendable utilizar los métodos que acabamos de ver para imprimir mensajes de error, advertencia e información ya que tienen un formato especial que los hace más fáciles de identificar.\n\n\nconsole.error('Error')\n// ❌ Error\nconsole.warn('Advertencia')\n// ⚠️ Advertencia\nconsole.info('Información')\n// ℹ️ Información\nPrueba estos métodos en la consola del navegador y observa los resultados.\n\n\nQuiz\n\n¿Cuál es la sintaxis adecuada para imprimir un mensaje en la consola del navegador?\n\n\n\n\n ✗console(“mensaje”)\n\n\n ✓console.log(“mensaje”)\n\n\n ✗console.write(“mensaje”)\n\n\n\n\n\n\n¿Cómo podrías usar console.log() para imprimir múltiples valores o variables en una sola línea de código?\n\n\n\n\n ✗Utilizando una sintaxis especial que formatea los valores o variables en una sola línea de código\n\n\n ✗No es posible imprimir múltiples valores o variables en una sola línea de código con console.log()\n\n\n ✓Separando cada valor o variable con comas dentro de los paréntesis de console.log()\n\n\n\n\n\n\n¿Cuál es la diferencia entre console.log() y console.error() en JavaScript?\n\n\n\n\n ✓console.log() se utiliza para imprimir mensajes en la consola del navegador, mientras que console.error() se utiliza para imprimir mensajes de error.\n\n\n ✗console.log() se utiliza para imprimir mensajes de error en la consola del navegador, mientras que console.error() se utiliza para imprimir mensajes normales\n\n\n ✗No hay diferencia entre console.log() y console.error() en JavaScript\n\n\n\n\n\n\n\n\nCódigo Condicional con if\nEl código condicional es un bloque de código que se ejecuta sólo si se cumple una condición. En JavaScript usamos la palabra reservada if para crear un bloque condicional, así:\nif (condición) {\n  // código que se ejecuta si la condición es verdadera\n}\nComo ves, ponemos la condición entre paréntesis y el código se ejecuta si la condición entre llaves es true. Si la condición es false, el código no se ejecuta.\nImagina que quieres mostrar un mensaje si la edad de un usuario es mayor o igual a 18 años. Podrías hacerlo así:\nconst edad = 18\n\nif (edad &gt;= 18) {\n  console.log('Eres mayor de edad')\n}\n\nelse\nEs posible utilizar la palabra clave else para ejecutar un bloque de código diferente si la condición es falsa:\nconst edad = 17\n\nif (edad &gt;= 18) {\n  console.log('Eres mayor de edad')\n} else {\n  console.log('Eres menor de edad')\n}\nEsto es útil para ejecutar un bloque de código u otro dependiendo de si se cumple o no una condición. else if\nTambién podemos utilizar la palabra clave else if para comprobar más de una condición:\nconst edad = 17\n\nif (edad &gt;= 18) {\n  console.log('Eres mayor de edad')\n} else if (edad &gt;= 16) {\n  console.log('Eres casi mayor de edad')\n} else {\n  console.log('Eres menor de edad')\n}\nEl programa comprueba la primera condición. Si es true, ejecuta el código dentro del bloque if. Si es false, comprueba la siguiente condición. Si es true, ejecuta el código dentro del bloque else if. Si es false, ejecuta el código dentro del bloque else.\nDicho de otra forma, entrará en el primer bloque que cumpla la condición y no entrará en los demás. Si no cumple ninguna, entonces entrará en el bloque else.\n\n\nAnidación de condicionales\nEs posible anidar condicionales dentro de otros condicionales. Por ejemplo:\nconst edad = 17\nconst tieneCarnet = true\n\nif (edad &gt;= 18) {\n  if (tieneCarnet) {\n    console.log('Puedes conducir')\n  } else {\n    console.log('No puedes conducir')\n  }\n} else {\n  console.log('No puedes conducir')\n}\nEn muchas ocasiones vas a querer evitar la anidación innecesaria de condicionales ya que se hacen difíciles de leer y mantener. En estos casos es mejor utilizar operadores lógicos para crear la condición:\nconst edad = 17\nconst tieneCarnet = true\n\n// si es mayor de edad y tiene carnet entonces...\nif (edad &gt;= 18 && tieneCarnet) {\n  console.log('Puedes conducir')\n} else {\n  console.log('No puedes conducir')\n}\nOtra técnica muy interesante es la de guardar el resultado de la condición en una variable, para que tus condiciones sean mucho más legibles:\nconst edad = 17\nconst tieneCarnet = true\nconst puedeConducir = edad &gt;= 18 && tieneCarnet\n\nif (puedeConducir) {\n  console.log('Puedes conducir')\n} else {\n  console.log('No puedes conducir')\n}\n\n\n\n\n\n\nTip\n\n\n\n¡Wow! ¿Has visto cómo hemos mejorado la legibilidad de nuestro código? ¡Es mucho más fácil de leer y entender! A este tipo de técnica se le llama refactorización y consiste en mejorar el código sin cambiar su comportamiento.\n\n\n\n\nLa importancia de las llaves\nEs importante que sepas que las llaves { } no siempre son obligatorios. Si el bloque de código sólo tiene una línea, puedes omitir las llaves:\nconst edad = 17\n\nif (edad &gt;= 18)\n  console.log('Eres mayor de edad')\nelse\n  console.log('Eres menor de edad')\nTambién lo puedes escribir en la misma línea:\nconst edad = 18\n\nif (edad &gt;= 18) console.log('Eres mayor de edad')\nelse console.log('Eres menor de edad')\nSin embargo, te recomiendo que mientras estés aprendiendo siempre escribas las llaves. Esto te ayudará a evitar errores y a que tu código sea más legible.\n\n\nQuiz\n\n¿Qué es un bloque condicional en JavaScript?\n\n\n\n\n ✓Un bloque de código que se ejecuta sólo si se cumple una condición\n\n\n ✗Un bloque de código que se ejecuta siempre\n\n\n\n\n\n\n¿Qué palabra clave se utiliza en JavaScript para crear un bloque condicional?\n\n\n\n\n ✗if\n\n\n ✓else\n\n\n ✗then\n\n\n\n\n\n\n¿Qué palabra clave se utiliza en JavaScript para ejecutar un bloque de código si la condición de un bloque condicional es falsa?\n\n\n\n\n ✗if\n\n\n ✗then\n\n\n ✓else\n\n\n\n\n\n\n\nActividad\n\nCrea una variable llamada temperatura y asígnale un valor numérico. Escribe un bloque condicional que imprima en la consola si la temperatura es mayor o igual a 25 grados.\nCrea una variable llamada esVerano y asígnale un valor booleano. Escribe un bloque condicional que imprima en la consola si es verano o no.\n\n\n\nRespuesta\n\nR1.\nconst temperatura = 25\n\nif (temperatura &gt;= 25) {\n  console.log('Hace calor')\n}\nR2.\nconst esVerano = true\n\nif (esVerano) {\n  console.log('Es verano')\n}\n\n\n\n\nBucles con while\nUn bucle es una estructura de control que permite repetir un bloque de instrucciones. Vamos, repetir una tarea tantas veces como queramos.\nEn JavaScript, existen varias formas de lograrlo, y una de ellas es el bucle con while. El bucle while es una estructura de control de flujo que ejecuta una sección de código mientras se cumple una determinada condición.\nEn esta clase, vamos a explicar cómo funciona el bucle while en JavaScript y cómo podemos utilizarlo en nuestros programas.\n\nSintaxis\nLa sintaxis del bucle while es similar a la de un condicional if. La única diferencia es que, en lugar de ejecutar el código una sola vez, se ejecuta mientras se cumpla la condición.\nwhile (condición) {\n  // código a ejecutar mientras se cumpla la condición\n}\nEl bucle comienza evaluando la condición dentro de los paréntesis. Si la condición es true, se ejecuta el código dentro de las llaves.\nDespués de ejecutar el código, la condición se evalúa de nuevo, y si sigue siendo verdadera, el código dentro de las llaves se ejecuta de nuevo. Este proceso se repite hasta que la condición se evalúa como falsa.\nTen en cuenta que, si la condición es falsa desde el principio, el código dentro de las llaves nunca se ejecutará.\n\n\n\n\n\n\nTip\n\n\n\nA cada vuelta del bucle se le llama iteración. Una iteración es la repetición de un proceso o acción un número determinado de veces, de manera ordenada y sistemática.\n\n\n\n\nEjemplo de uso de while\nVamos a crear la cuenta atrás de un cohete. Creamos una variable cuentaAtras que contenga el número de segundos que faltan para el lanzamiento. En este caso, vamos a empezar con 10 segundos.\nlet cuentaAtras = 10\nPara quitarle un segundo a la cuenta atrás, vamos a utilizar el operador de resta (-) y el operador de asignación (=).\nlet cuentaAtras = 10\ncuentaAtras = cuentaAtras - 1\nconsole.log(cuentaAtras) // -&gt; 9\nSabiendo esto y cómo funciona el bucle while, podemos crear la cuenta atrás del cohete.\n// iniciamos la variable fuera del bucle\nlet cuentaAtras = 10\n\n// mientras la cuenta atrás sea mayor que 0\nwhile (cuentaAtras &gt; 0) {\n  // mostramos el valor de la cuenta atrás en cada iteración\n  console.log(cuentaAtras)\n  // restamos 1 a la cuenta atrás\n  cuentaAtras = cuentaAtras - 1\n}\n\nconsole.log('¡Despegue! 🚀')\nSi ejecutas este código en consola, deberías ver los números del 10 al 1, y después el mensaje de despegue.\n\n\nCuidado con los bucles infinitos\nLos bucles while son muy potentes, pero también pueden ser peligrosos. Si la condición nunca se evalúa como falsa, el bucle se ejecutará infinitamente.\nwhile (true) {\n  console.log('¡Hola hasta el infinito!')\n}\nEsto evaluará la condición true como verdadera, y ejecutará el código dentro de las llaves una y otra vez.\n\n\nSaliendo de un bucle con break\nPodemos controlar cuándo queremos salir de un bucle utilizando la palabra reservada break. Cuando el intérprete de JavaScript encuentra la palabra break, sale del bucle y continúa ejecutando el código que haya después.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  console.log(cuentaAtras)\n  cuentaAtras = cuentaAtras - 1\n\n  // si la cuenta atrás es 5, salimos del bucle\n  if (cuentaAtras === 5) {\n    break // &lt;---- salimos del bucle\n  }\n}\n¿Cuál es el valor de cuentaAtras en este código? Veamos, el bucle estaba haciendo una cuenta atrás… pero le hemos dicho que cuando tuviese el valor 5 saliese del bucle. Por lo tanto, el valor de cuentaAtras es 5.\nUsar break puede ser útil en bucles si queremos salir de ellos por alguna condición en concreto o para evitar justamente los bucles infinitos.\n\n\nSaltando una iteración con continue\nIgual que tenemos la posibilidad de “romper” el bucle con break, también podemos saltarnos una iteración con continue. Cuando el intérprete de JavaScript encuentra la palabra continue, salta a la siguiente iteración del bucle.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  cuentaAtras = cuentaAtras - 1\n\n  // si la cuenta atrás es un número par...\n  if (cuentaAtras % 2 === 0) {\n    continue // &lt;---- saltamos a la siguiente iteración\n  }\n\n  console.log(cuentaAtras)\n}\n¿Qué aparece en la salida de la consola? El bucle está haciendo una cuenta atrás… pero le hemos dicho que si el número es par, se salte esa iteración y deje de ejecutar el código que le sigue.\nPor ello, los números pares no aparecen en la consola.\n\n\nAnidación de bucles\nPodemos anidar bucles dentro de otros bucles. Imagina que en nuestra cuenta atrás para el cohete, tenemos que revisar que 3 cosas están en sus parámetros: el oxígeno, el combustible y la temperatura.\nconst NUMERO_REVISIONES = 3\nlet cuentaAtras = 10\n\n// mientras la cuenta atrás sea mayor que 0\nwhile (cuentaAtras &gt; 0) {\n  // mostramos el valor de la cuenta atrás\n  console.log(cuentaAtras)\n\n  // creamos una variable para contar las revisiones realizadas\n  // y la inicializamos a cero\n  let revisionesRealizadas = 0\n\n  // hasta que no hayamos realizado las 3 revisiones...\n  while (revisionesRealizadas &lt; NUMERO_REVISIONES) {\n    // y sumamos 1 a las revisiones realizadas\n    revisionesRealizadas = revisionesRealizadas + 1\n    console.log(revisionesRealizadas + ' revisiones realizadas...')\n  }\n\n  // ahora podemos restar 1 a la cuenta atrás\n  cuentaAtras = cuentaAtras - 1\n}\n\n\n\n\n\n\nTip\n\n\n\n¿Por qué la constante la hemos puesto toda en mayúsculas? Como ya explicamos en la clase de introducción a JavaScript, es una convención para indicar que es una constante y que no va a cambiar.\n\n\nAdemás del bucle anidado, hay algo también muy interesante en el código anterior y es la creación de la variable let revisionesRealizadas.\nTen en cuenta que esa variable se creará y se inicializará a 0 en cada iteración del bucle.\nLas variables creadas con let y const que se crean dentro de un bucle, solo existen dentro de ese bucle. Cuando el bucle termina, la variable desaparece. De hecho si intentas acceder a ella fuera del bucle, te dará un error.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  let revisionesRealizadas = 3\n  console.log(revisionesRealizadas)\n  cuentaAtras = cuentaAtras - 1\n}\n\nconsole.log(revisionesRealizadas) // -&gt; ERROR: ReferenceError\nEsto también pasa con otras estructuras de control. Eso es porque el alcance de las variables creadas con let y const es el bloque entre { } en el que se crean. Lo iremos viendo más adelante para que vayas practicando, no te preocupes.\n\n\nQuiz\n\n¿Cuál es la sintaxis correcta para utilizar un bucle while en JavaScript?\n\n\n\n\n ✓\n\n\n ✗\n\n\n\n\n\n\n¿Cuál es la palabra reservada que se utiliza para salir de un bucle en JavaScript?\n\n\n\n\n ✓break\n\n\n ✗continue\n\n\n ✗exit\n\n\n\n\n\n\n¿Cuántas veces saldrá en consola la palabra ‘Café’?\n\n\n\n\n\n\n\n ✓6\n\n\n ✗4\n\n\n ✗5\n\n\n\n\n\n\n\n\nBucles con do while\nAunque no es muy famoso ni muy utilizado, es interesante que sepas que existe en JavaScript un bucle que se ejecuta al menos una vez, y luego se repite mientras se cumpla una condición. Este bucle se llama do while y tiene la siguiente sintaxis:\ndo {\n  // código que se ejecuta al menos una vez\n} while (condición);\nVamos a aprovechar para hacer más interesante la clase. Por eso te voy a presentar una función integradas en JavaScript que nos van a dar mucho juego: confirm.\n\n\nconfirm\nLa función confirm muestra un cuadro de diálogo con dos botones: “Aceptar” y “Cancelar”. Si el usuario pulsa “Aceptar”, la función devuelve true. Si pulsa “Cancelar”, devuelve false.\nconfirm(\"¿Te gusta JavaScript?\");\nLlamar a la función confirm es una expresión y, por lo tanto, produce un valor que podemos guardar en una variable.\nlet respuesta = confirm(\"¿Te gusta JavaScript?\")\nconsole.log(respuesta) // -&gt; true o false\n\n\nUsando do while\nVamos a hacer un programa que saldrá de un bucle do while cuando el usuario pulse “Cancelar” en el cuadro de diálogo que muestra la función confirm.\nlet respuesta\n\ndo {\n  respuesta = confirm(\"¿Te gusta JavaScript?\");\n} while (respuesta)\n\n\n\n\n\n\nTip\n\n\n\n¿Por qué hay que poner la variable respuesta fuera? Porque si no, no podría ser usada en la condición del bucle. Ya vas viendo lo que comentámos antes del ámbito de las variables.\n\n\nSi el usuario pulsa “Aceptar”, la variable respuesta valdrá true y el bucle se repetirá. Si el usuario pulsa “Cancelar”, la variable respuesta valdrá false y el bucle se detendrá.\n\nQuiz\n\n¿Cuántas veces como mínimo se ejecutará el código dentro de un bucle do{ … } while?\n\n\n\n\n ✗Ninguna vez\n\n\n ✗Depende de la condición\n\n\n ✓Una vez\n\n\n\n\n\n\n\n\nExpresiones y declaraciones\nEn JavaScript, existen dos tipos de elementos fundamentales para escribir código: expresiones y declaraciones. Aunque estos términos pueden parecer confusos al principio, son conceptos clave para comprender cómo funciona JavaScript.\n\n\nDeclaraciones\nLas declaraciones en JavaScript son sentencias que definen la creación de una variable, función o clase. Podríamos decir que las declaraciones son como las instrucciones que le damos a JavaScript para que haga algo.\n\n\n\n\n\n\nTip\n\n\n\nLas funciones y las clases las veremos más adelante en el curso, no te preocupes.\n\n\nPor ejemplo, una declaración de variable es una sentencia que le da un nombre y un valor a una variable. El siguiente código es un ejemplo de una declaración de variable:\nlet nombre = \"Juan\"\nEste código no lo puedes usar con el método console.log, ya que no produce ningún valor. Si lo intentas, obtendrás un error:\nconsole.log(let nombre = \"Juan\") // SyntaxError\n\n\nExpresiones\nLas expresiones en JavaScript son sentencias que producen un valor. Las expresiones pueden ser tan simples como un solo número o una cadena de texto, o tan complejas como el cálculo de una operación matemática, la evaluación de diferentes valores o la llamada a una función.\nPor ejemplo, una expresión numérica es una sentencia que produce un número:\n2 + 3 // -&gt; 5\nDe hecho, lo que guardamos en las variables son expresiones. Por ejemplo, en el siguiente código, la expresión 2 + 3 se evalúa y el resultado se guarda en la variable resultado:\nlet resultado = 2 + 3\nEn ese código tenemos la declaración que queremos guardar en la variable resultado el resultado de la expresión 2 + 3.\n\n\n¿Por qué es importante la diferencia?\nLa diferencia entre declaraciones y expresiones es importante ya que no podemos usar una declaración donde se espera una expresión y viceversa.\nPor ejemplo, ya hemos conocido las estructuras de control if y while. Ambas esperan una expresión que se evalúa a un valor booleano. Por lo tanto, no podemos usar una declaración en su lugar:\n// ❌ Ambos códigos están mal y sirven para\n// ilustrar que no debes usar declaraciones\n// cuando espera expresiones\n\nif (let nombre = \"Juan\") { // ❌ SyntaxError\n  console.log(\"Hola, Juan\")\n}\n\nwhile (let i = 0) { // ❌ SyntaxError\n  console.log(\"Iteración\")\n  i = i + 1\n}\n\n\nQuiz\n\n¿Qué son las declaraciones en JavaScript y para qué se utilizan?\n\n\n\n\n ✓Las declaraciones en JavaScript son sentencias que definen la creación de una variable, función o clase para que puedan ser usadas posteriormente en el código.\n\n\n ✗Las declaraciones en JavaScript son sentencias que producen un valor. Se utilizan para calcular un valor y devolverlo en una expresión.\n\n\n ✗Las declaraciones en JavaScript son sentencias que se utilizan para realizar operaciones matemáticas complejas.\n\n\n\n\n\n\n¿Qué son las expresiones en JavaScript y para qué se utilizan?\n\n\n\n\n ✗Las expresiones en JavaScript son sentencias que definen la creación de una variable\n\n\n ✓Las expresiones en JavaScript son sentencias que producen un valor.\n\n\n ✗Las expresiones sólo se usan como condiciones de los condicionales if y los bucles.\n\n\n\n\n\n\n\nBucles con for\nLa estructura de control for en JavaScript es muy útil para ejecutar una serie de instrucciones un número determinado de veces. A diferencia de while que usa una condición para determinar si se ejecuta o no el bloque de código, for usa un contador que se incrementa en cada iteración hasta que se cumple una condición.\nLa sintaxis de for es la siguiente:\nfor (inicialización; condición; actualización) {\n  // código a ejecutar\n}\nImportante, fíjate que for tiene tres partes separadas por ;:\n\nLa inicialización se realiza antes de que se inicie el bucle y se utiliza para declarar variables y asignar valores iniciales.\nLa condición es una expresión booleana que se evalúa antes de cada iteración del bucle. Si la expresión se evalúa como true, se ejecuta el bloque de código dentro del bucle. Si la expresión se evalúa como false, el bucle termina.\nLa actualización se utiliza para actualizar el valor de la variable de control del bucle después de cada iteración. Normalmente, se incrementa o decrementa el valor de la variable de control del bucle.\n\n\n\nEjemplo de uso de for\nEl siguiente ejemplo muestra cómo se puede usar for para imprimir los números del 1 al 10:\nfor (let number = 1; number &lt;= 10; number++) {\n  console.log(number)\n}\n\nLa inicialización es la declaración de la variable number y la asignación del valor 1.\nLa condición es que mientras number &lt;= 10, se itera el bucle.\nLa actualización es number++ que incrementa el valor de number en 1 después de cada iteración.\n\nOh, espera, ¿qué es eso de number++? Te lo explico.\n\n\nIncrementando números con ++\nEl operador ++ nos permite incrementar el valor de una variable número en 1. Por ejemplo, si tenemos la variable i con el valor 5, i++ incrementaría el valor de i en 1, es decir, i pasaría a valer 6.\nlet i = 5\ni++\nconsole.log(i) // -&gt; 6\nEs una forma abreviada de escribir i = i + 1. Y, como ves, es la forma más típica de usar en bucles como for para no tener que escribir i = i + 1 cada vez.\n\n\nIterando al revés\nEl método for en JavaScript también se puede utilizar para iterar al revés Para ello, se utiliza la sintaxis i– en la sección de actualización del bucle en lugar de i++.\nLa sintaxis del método for para iterar en reversa es la siguiente:\nfor (let i = 10; i &gt;= 0; i--) {\n  if (i === 0) {\n    console.log('¡Despegue 🚀!')\n  } else {\n    console.log('Faltan ' + i + ' segundos')\n  }\n}\n\n\nLlevando más allá el bucle for\nAunque siempre los ejemplos con for son los mismos, ten en cuenta que puedes hacer cualquier cosa en la inicialización, condición y actualización. Podrías, por ejemplo, usar dos variables a la vez.\nfor (let i = 0, j = 5; i &lt; 5; i++, j--) {\n  console.log(i, j);\n}\nLa coma , nos permite declarar dos variables en la inicialización y actualizarlas en la actualización. En este caso la , es un operador que evalua cada uno de sus operandos (de izquierda a derecha) y retorna el valor del último operando.\nNo es muy común su uso, pero es bueno saber que existe.\n\n\ncontinue y break\nAl igual que en while, for también tiene las palabras reservadas continue y break para controlar el flujo de ejecución del bucle.\nRecuerda que continue se usa para saltar a la siguiente iteración del bucle y break para salir del bucle.\nEjemplo:\nfor (let i = 0; i &lt; 10; i++) {\n  const esPar = i % 2 === 0\n  if (esPar) {\n    continue\n  }\n\n  // Solo mostramos este consola.log si es impar\n  console.log(i)\n\n  // Salimos del bucle al llegar al 7\n  if (i === 7) {\n    break\n  }\n}\n\n\nBucles anidados con for\nImagina que quieres crear la tabla de multiplicar del 1 al 10. Para ello, necesitas un bucle que itere del 1 al 10 y, dentro de ese bucle, otro bucle que itere del 1 al 10. Esto se puede hacer con dos bucles for anidados (uno dentro del otro).\nfor (let i = 1; i &lt;= 10; i++) {\n  for (let j = 1; j &lt;= 10; j++) {\n    const resultado = i * j\n    console.log(i + ' x ' + j + ' = ' + resultado)\n  }\n}\n\n\nQuiz\n\n¿Cuál es la sintaxis correcta para crear un bucle for en JavaScript?\n\n\n\n\n ✗\n\n\n ✓\n\n\n\n\n\n\n¿Cuántas veces veremos el mensaje “Hola” en consola?\nfor (let i = 0; i &lt; 10 && i !== 3; i++) {\n  console.log('Hola')\n}\n\n\n\n\n ✗10 veces\n\n\n ✗4 veces\n\n\n ✓3 veces\n\n\n\n\n\n\n\nSwitch\nEn JavaScript, la sentencia switch es una estructura de control que nos permite ejecutar diferentes bloques de código dependiendo del valor de una expresión. Esta estructura es útil cuando queremos realizar diferentes acciones basadas en una única variable.\n\n\nSintaxis\nLa sentencia switch evalúa una expresión, comparando el valor con los diferentes casos que le hemos definido. Si hay coincidencia ejecuta el bloque de código asociado. Para ello, se utiliza la sentencia break para separar cada caso y evitar que se sigan evaluando el resto de casos.\nswitch (expresión) {\n  case valor1:\n    // código a ejecutar si la expresión coincide con valor1\n    break\n\n  case valor2:\n    // código a ejecutar si la expresión coincide con valor2\n    break\n  default:\n    // código a ejecutar si la expresión no coincide con ningún valor\n    break\n}\n\n\n\n\n\n\nTip\n\n\n\nLa condición de default es opcional. No es obligatorio que la uses si no la necesitas. Es como el else de las condiciones if.\n\n\nPor ejemplo si queremos mostrar un mensaje diferente dependiendo del día de la semana:\nconst dia = \"lunes\"\n\nswitch (dia) {\n  case \"lunes\":\n    console.log(\"¡Hoy es lunes! 😢\")\n    break\n\n  default:\n    console.log(\"No es lunes, YAY! 🚀\")\n    break\n}\nVamos a hacer esto un poco más interesante. En JavaScript podemos recuperar la información de la hora y la fecha usando el objeto Date. Este objeto tiene un método llamado getDay() que nos devuelve el día de la semana en formato numérico, siendo 0 el domingo y 6 el sábado.\n\n\n\n\n\n\nTip\n\n\n\nIgual que console es un objeto. También Date lo es. Un objeto en JavaScript no es muy diferente a un objeto en la vida real. Tiene propiedades y funciones que podemos usar. En este caso, getDay() es una función que nos devuelve el día de la semana.\n\n\nconst dia = new Date().getDay()\n\n// segun el dia de la semana, mostramos un mensaje diferente\nswitch (dia) {\n  case 0:\n    console.log(\"¡Hoy es domingo! 😴\")\n    break\n  case 1:\n    console.log(\"¡Nooo, es lunes! 😢\")\n    break\n  case 2:\n    console.log(\"¡Hoy es martes! 🥵\")\n    break\n  case 3:\n    console.log(\"¡Hoy es miércoles! 🤓\")\n    break\n  default:\n    console.log(\"Se acerca el fin de! 🚀\")\n    break\n}\n\n\nswitch vs if\nMuchas veces verás que puedes escribir el mismo código usando switch o if. El ejemplo anterior con un if:\nconst dia = new Date().getDay()\n\nif (dia === 0) {\n  console.log(\"¡Hoy es domingo! 😴\")\n} else if (dia === 1) {\n  console.log(\"¡Nooo, es lunes! 😢\")\n} else if (dia === 2) {\n  console.log(\"¡Hoy es martes! 🥵\")\n} else if (dia === 3) {\n  console.log(\"¡Hoy es miércoles! 🤓\")\n} else {\n  console.log(\"Se acerca el fin de! 🚀\")\n}\nA veces es más fácil de leer con switch y otras con if. ¡Depende de ti! Aunque más adelante, en el curso, veremos alternativas a switch usando algunas estructuras de datos.\n\n\nAgrupando cases\nEn ocasiones, queremos que varios casos ejecuten el mismo código. En lugar de repetir el mismo código en cada caso, podemos agruparlos usando el mismo case para cada uno de ellos.\nconst dia = new Date().getDay()\n\nswitch (dia) {\n  case 0:\n  case 6:\n    console.log(\"¡Hoy es fin de semana! 🥳\")\n    break\n  case 1:\n  case 2:\n  case 3:\n  case 4:\n    console.log(\"¡Nooo, a trabajar! 😢\")\n    break\n  case 5:\n    console.log(\"¡Hoy es viernes! 🤓\")\n    break\n}\nComo ves, en este caso, tampoco estamos usando el default. Como te comentaba antes, es totalmente opcional, no tienes por qué usarlo siempre.\n\n\n¡No olvides el break!\nEs muy importante que no te olvides de poner el break al final de cada caso. Si no lo pones, se ejecutarán todos los casos que vengan después del que coincide. Por ejemplo:\n// ❌ Este código no es correcto\n// Lo muestro para que veas qué pasa\n// si no pones break en tus casos\nconst dia = new Date().getDay()\n\nswitch (dia) {\n  case 0:\n    console.log(\"¡Hoy es domingo! 😴\")\n  case 1:\n    console.log(\"¡Nooo, es lunes! 😢\")\n  case 2:\n    console.log(\"¡Hoy es martes! 🥵\")\n  case 3:\n    console.log(\"¡Hoy es miércoles! 🤓\")\n  default:\n    console.log(\"Se acerca el fin de! 🚀\")\n}\nSi hoy es martes (2), se ejecutarán todos los casos después de ese, ya que no hay ningún break que lo impida. Por lo tanto, el resultado en consola sería:\n¡Hoy es martes! 🥵\n¡Hoy es miércoles! 🤓\nSe acerca el fin de! 🚀\n\n\nEl patrón switch(true)\nExiste un patrón que se usa a veces con switch que es switch(true). Esto es, en lugar de evaluar una expresión, evalúa una condición ignorando por completo el valor de la expresión.\nPor ejemplo:\nlet edad = 25;\n\nswitch(true) {\n  case (edad &gt;= 18 && edad &lt; 25):\n    console.log(\"Eres mayor de edad y eres joven\");\n    break;\n  case (edad &gt;= 25 && edad &lt; 40):\n    console.log(\"Eres mayor de edad y estás en plena madurez\");\n    break;\n  case (edad &gt;= 40):\n    console.log(\"Eres mayor de edad y estás en la mejor edad\");\n    break;\n  default:\n    console.log(\"Eres menor de edad\");\n}\nEs un patrón algo más avanzado y es una alternativa a usar if y else if. En mi opinión, es más difícil de leer, ya que puede crear un poco de confusión. Pero es bueno que lo conozcas por si te lo encuentras en algún sitio.\n\n\nQuiz\n\n¿Cuál es la función de la palabra reservada default en una declaración switch en JavaScript?\n\n\n\n\n ✓Es el caso que se ejecuta cuando se produce un error en el switch\n\n\n ✗Es el caso que se ejecuta cuando ninguno de los casos coincide con la expresión\n\n\n ✗Es un caso opcional que se puede utilizar para realizar acciones adicionales\n\n\n\n\n\n\n¿Qué problema tiene este código?\nswitch (day) {\n  case 0:\n    console.log('Hoy es Domingo')\n  case 1:\n    console.log('Hoy es Lunes')\n  case 2:\n    console.log('Hoy es Martes')\n  default:\n    console.log('Es otro día')\n}\n\n\n\n\n ✗No tiene ningún problema\n\n\n ✗Se repite mucho código\n\n\n ✓Falta usar break en cada caso\n\n\n\n\n\n\n¿Se puede hacer esto con switch?\n\nlet x = 5\n\nswitch (true) {\n  case (x &lt; 0):\n    console.log('x es negativo')\n    break\n  case (x &gt; 0):\n    console.log('x es positivo')\n    break\n  default:\n    console.log('x es cero')\n}\n\n\n\n\n ✗No, porque no se puede usar una expresión booleana en el switch\n\n\n ✗No, porque no se puede saber el valor de x dentro\n\n\n ✓Sí, no hay ningún problema\n\n\n\n\n\n\n\nTu primera función\nLas funciones son uno de los conceptos más importantes en JavaScript y casi cualquier lenguaje de programación.\nUna función es un bloque de código que realiza una tarea específica cuando se llama. Puedes pensar en una función como en un microondas: le das algo para cocinar, le pasas algunos parámetros (como el tiempo y la potencia) y luego hace su trabajo y te devuelve el resultado.\nEn JavaScript, las funciones se pueden definir de varias maneras, pero la forma más común y básica es mediante la palabra clave function. Esta es tu primera función:\nfunction saludar() {\n  console.log('Hola Diego')\n}\nComo ves, declarar una función consiste de:\n\nLa palabra reservada function que indica que estamos definiendo una función.\nEl nombre de la función, en este caso saludar. Normalmente usamos verbos para nombrar funciones, ya que son acciones que realizan.\nUn par de paréntesis ( ) después del nombre. Pueden contener parámetros. En este caso, no tenemos ninguno.\nUn bloque de código entre llaves { }. En este caso, solo tenemos una línea de código, pero podríamos tener muchas más.\n\nNuestra función ahora mismo no devuelve nada pero cada vez que la llamemos, imprimirá Hola en la consola.\n\n\n\n\n\n\nTip\n\n\n\nLas funciones pueden devolver un resultado (un número, una cadena de texto, un booleano…) o puede no devolver nada. En ese caso, la función devuelve undefined.\n\n\nsaludar() // -&gt; Hola Diego saludar() // -&gt; Hola Diego saludar() // -&gt; Hola Diego\n\n\nDevolviendo un resultado\nLas funciones pueden devolver un resultado. Para ello, utilizamos la palabra reservada return y después el valor que queremos devolver:\nfunction sumar() {\n  return 1 + 1\n}\nAhora, cada vez que llamemos a la función sumar, nos devolverá el resultado de la suma:\n// podemos guardar el resultado en una variable\nconst resultado = sumar()\n\n// o ver en consola directamente el resultado\nconsole.log(sumar()) // -&gt; 2\n\n\n\n\n\n\nTip\n\n\n\nEn la siguiente clase verás cómo puedes pasar parámetros a una función para hacerlas todavía más interesantes y reutilizables.\n\n\n\n\n\n\n\n\nTip\n\n\n\nRecuerda, si no utilizamos return, la función devolverá undefined.\n\n\n\n\nUna función realmente útil\nLa función saludar y sumar no parecen muy útiles, pero con lo poco que sabemos ya podemos hacer cosas más productivas. Por ejemplo, podemos crear una función que nos devuelva un número aleatorio del 1 al 10.\nPara ello vamos a descubrir Math, un objeto incorporado en JavaScript que tiene propiedades y métodos para constantes y funciones matemáticas. Vamos a ver dos métodos que nos van a ser muy útiles:\n\nMath.random(): devuelve un número aleatorio entre 0 y 1, con decimales.\nMath.floor(): redondea un número hacia abajo.\n\n\n\n\n\n\n\nTip\n\n\n\nMath.random es parecido a console.log, en el sentido que son métodos que JavaScript incorpora de serie y que podemos utilizar en cualquier punto de nuestro programa.\n\n\nSabiendo esto, podríamos crear una función que nos devuelva un número aleatorio del 1 al 10:\nfunction getRandomNumber() {\n  // recuperamos un número aleatorio entre 0 y 1\n  const random = Math.random() // por ejemplo: 0.6803487380457318\n\n  // lo multiplicamos por 10 para que esté entre 0 y 10\n  const multiplied = random * 10 // -&gt; 6.803487380457318\n\n  // redondeamos hacia abajo para que esté entre 0 y 9\n  const rounded = Math.floor(multiplied) // -&gt; 6\n\n  // le sumamos uno para que esté entre 1 y 10\n  const result = rounded + 1 // -&gt; 7\n\n  // devolvemos el resultado\n  return result\n}\n¡Bueno! Hay que ver cuantas cosas has puesto en práctica en muy pocas líneas de código: constantes, variables, operadores, comentarios… ¡y todo en una función!\n¿Sabes lo mejor? Que esa función va a acompañarte durante toda tu carrera. Es muy común necesitar crear un número aleatorio en un programa, así que es muy útil tener una función que lo haga por nosotros.\n\n\n\n\n\n\nTip\n\n\n\nEn la función hemos utilizado varias variables para ir guardando los resultados intermedios. Podríamos haberlo hecho todo en una sola línea, pero así es más fácil de entender.\n\n\n\n\nQuiz\n\n¿Qué es una función en JavaScript?\n\n\n\n\n ✗Algo que se puede hacer con JavaScript de base\n\n\n ✓Un bloque de código que realiza una tarea específica cuando se llama\n\n\n ✗Una variable que almacena información\n\n\n\n\n\n\n¿Cuál es la sintaxis básica de una función en JavaScript?\n\n\n\n\n ✓function nombreFuncion() { … }\n\n\n ✗const function() { … }\n\n\n ✗fn nombreFuncion() { … }\n\n\n\n\n\n\n¿Qué devuelve una función declarada con function si no tiene una declaración de retorno explícita?\n\n\n\n\n ✗null\n\n\n ✓undefined\n\n\n ✗0\n\n\n\n\n\n\n\nParámetros\nHasta ahora hemos visto como crear funciones y cómo llamarlas. Pero para poder desbloquear todo el potencial de las funciones, necesitamos que puedan recibir parámetros. Esto es, que su comportamiento pueda cambiar según los datos que le pasemos.\nImagina que queremos que nuestra función de saludar, pueda saludar a cualquier persona, no solo a Miguel. Para ello, podemos hacer que la función acepte un parámetro, que será el nombre de la persona a la que queremos saludar.\nfunction saludar(nombre) {\n  console.log(\"Hola \" + nombre)\n}\nAhora, cada vez que llamemos a la función, podemos pasarle una cadena de texto:\nsaludar('Diego') // -&gt; Hola Diego\nsaludar('Itziar') // -&gt; Hola Itziar\nsaludar('Carmen') // -&gt; Hola Carmen\nYa ves como algo que parece tan sencillo, tiene un poder enorme. Las funciones son la base de la programación y nos permiten crear programas complejos a partir de pequeñas piezas.\nPor ejemplo, para crear una calculadora, deberíamos empezar a crear funciones que realicen las operaciones básicas. En este caso necesitaremos parametrizar la función para que acepte los dos números para hacer la operación.\nfunction sumar(a, b) {\n  return a + b\n}\n\nfunction restar(a, b) {\n  return a - b\n}\nY ya podríamos usarlas:\nconst resultadoSuma = sumar(2, 3)\nconsole.log(resultadoSuma) // -&gt; 5\n\nconst resultadoResta = restar(5, 2)\nconsole.log(resultadoResta) // -&gt; 3\n\n\nParámetros y argumentos\nEn el ejemplo anterior, hemos visto que podemos pasarle valores a la función cuando la llamamos. A estos valores se les llama argumentos. Y a los valores que recibe la función, se les llama parámetros.\n// la función suma tiene dos parámetros: a y b\nfunction sumar(a, b) {\n  return a + b\n}\n\n// cuando llamamos a la función, le pasamos dos argumentos: 2 y 3\nconst resultadoSuma = sumar(2, 3)\nNormalmente mucha gente confunde los términos y usa parámetro para referirse a los argumentos. Pero es importante que sepas diferenciarlos, porque son cosas distintas.\n\n\nEl orden de los parámetros importa\nAlgo muy importante, y un error muy común al empezar a crear funciones, es olvidar que el orden de los parámetros importa.\nVamos a crear una función que simule un microondas. Le pasaremos el plato, tiempo y potencia. Y nos devolverá el resultado del plato cocinado.\nfunction cocinarMicroondas(plato, tiempo, potencia) {\n  if (plato === '🐥' && tiempo === 1 && potencia === 5) {\n    return '🍗'\n  }\n\n  if (plato === '🥚' && tiempo === 2 && potencia === 3) {\n    return '🍳'\n  }\n\n  return '❌ Plato no soportado'\n}\n\n\n\n\n\n\nTip\n\n\n\nSí, puedes hacer un return dentro de un condicional. Esto hace que la función se detenga y devuelva el valor indicado en el return.\n\n\nSi usamos bien los parámetros, la función funciona correctamente:\nconst resultado = cocinarMicroondas('🐥', 1, 5)\nconsole.log(resultado) // -&gt; 🍗\nPero si cambiamos el orden de los parámetros, la función no funciona:\nconst resultado = cocinarMicroondas(1, 5, '🐥')\nconsole.log(resultado) // -&gt; '❌ Plato no soportado'\nEsto es porque la función espera que el primer parámetro sea el plato, el segundo el tiempo y el tercero la potencia. Si cambiamos el orden, podemos tener comportamientos inesperados o errores.\nMás adelante veremos una forma en la que podemos evitar este tipo de errores.\n\n\nQuiz\n\n¿Qué son los parámetros de una función en JavaScript?\n\n\n\n\n ✓Valores que espera recibir una función al llamarla para usarlos dentro de ella\n\n\n ✗Valores que devuelve una función\n\n\n ✗Valores que se declaran dentro de una función\n\n\n\n\n\n\n¿Qué son los argumentos de una función en JavaScript?\n\n\n\n\n ✗Valores que espera recibir una función\n\n\n ✓Valores que se pasan a una función al llamarla\n\n\n ✗Lo mismo que los parámetros\n\n\n\n\n\n\n¿Qué pasa si cambiamos el orden de los parámetros al llamar una función?\n\n\n\n\n\n ✗La función se detiene y no devuelve nada\n\n\n ✗La función devuelve undefined\n\n\n ✓Podemos tener comportamientos inesperados o errores",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-and",
    "href": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-and",
    "title": "JavaScript",
    "section": "Operador lógico AND &&",
    "text": "Operador lógico AND &&\nEl operador lógico AND se indica con &&. Devuelve true cuando ambos valores que conecta son true.\ntrue && true // → true\ntrue && false // → false\nfalse && false // → false\nUn ejemplo en la vida real sería preguntar. ¿Están todas las luces encendidas? Se comprueba cada luz y si todas están encendidas (true), entonces la respuesta es true. Si alguna luz está apagada (false), entonces la respuesta es false.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-or",
    "href": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-or",
    "title": "JavaScript",
    "section": "Operador lógico OR ||",
    "text": "Operador lógico OR ||\nEl operador lógico OR se indica con || y devuelve true cuando cualquiera de los valores que conecta es true.\ntrue || true // → true\ntrue || false // → true\nfalse || false // → false\nUn ejemplo en la vida real sería preguntar. ¿Hay alguna luz encendida? Se comprueba cada luz y si alguna está encendida (true), entonces la respuesta es true. Sólo si todas las luces están apagadas (false), entonces la respuesta es false.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-not",
    "href": "unidades/unidad6/3_introduccion_javascript.html#operador-lógico-not",
    "title": "JavaScript",
    "section": "Operador lógico NOT !",
    "text": "Operador lógico NOT !\nEl operador lógico NOT se indica con ! e invierte el valor de un valor booleano. Se pone delante del valor que queremos invertir.\n!true // → false\n!false // → true\nUn ejemplo en la vida real sería pulsar el interruptor de la luz. Si la luz está encendida (true), entonces pulsando el interruptor la apagamos (false). Si la luz está apagada (false), entonces pulsando el interruptor la encendemos (true).",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#combinando-operadores-lógicos-aritméticos-y-de-comparación",
    "href": "unidades/unidad6/3_introduccion_javascript.html#combinando-operadores-lógicos-aritméticos-y-de-comparación",
    "title": "JavaScript",
    "section": "Combinando operadores lógicos, aritméticos y de comparación",
    "text": "Combinando operadores lógicos, aritméticos y de comparación\nLos operadores lógicos y los operadores de comparación se pueden combinar para crear expresiones más complejas. Por ejemplo, podemos preguntar si un número está entre dos valores.\n2 &lt; 3 && 3 &lt; 4 // → true\nEn este caso, la expresión se evalúa como true porque 2 &lt; 3 es true y 3 &lt; 4 es true. Si cualquiera de las dos expresiones fuera false, entonces la expresión sería false.\nTambién puedes usar paréntesis para agrupar operaciones y usar operadores lógicos y aritméticos.\n(2 + 2) &lt; 3 && (10 &lt; (8 * 2)) // → false\nIgualmente, es importante que sepas que las operaciones aritméticas tienen precedencia sobre las operaciones de comparación.\n2 + 2 &lt; 3 && 10 &lt; 8 * 2\n// Primero se hacen las operaciones aritméticas:\n// → 4 &lt; 3 && 10 &lt; 16\n// Ahora las comparaciones:\n// → false && true\n// Finalmente:\n// → false",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-1",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-1",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nComprueba si 7 es mayor que 8 y menor que 10\nTenemos un producto en una tienda. Cuesta 1500 y tenemos un descuento del 25%. Tengo $1150 en mi billetera. Escribe un código que me diga si puedo comprarlo. No utilizar parentesis.\n\n\n\nRespuesta\n\nR1.\n7 &gt; 8 && 7 &lt; 10 // false\nR2.\n1150 &gt;= 1500 * 0.75 // false",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-4",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-4",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Qué operador lógico se utiliza para comprobar si dos o más condiciones son verdaderas?\n\n\n\n\n ✗OR (||)\n\n\n ✓AND (&&)\n\n\n\n\n\n\n¿Qué operador lógico se utiliza para invertir el valor de un booleano?\n\n\n\n\n ✗OR (||)\n\n\n ✓NOT (!)\n\n\n\n\n\n\n¿Qué valor devuelve la expresión false || true?\n\n\n\n\n ✗false\n\n\n ✓true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-2",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-2",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nCrea una variable llamada mensaje y asígnale el valor “Hola JavaScript”\nCrea una variable llamada resultado y asígnale la suma de 2 y 3\n\n\n\nRespuesta\n\nR1.\nlet mensaje = 'Hola JavaScript'\nR2.\nlet resultado = 2 + 3",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#constantes-const",
    "href": "unidades/unidad6/3_introduccion_javascript.html#constantes-const",
    "title": "JavaScript",
    "section": "Constantes const",
    "text": "Constantes const\nLas constantes son variables que no pueden ser reasignadas. Para crear una constante, usamos la palabra reservada const:\nconst PI = 3.1415\nSi intentas reasignar el valor de una constante, obtendrás un error:\nPI = 3 // -&gt; TypeError: Assignment to constant variable.\nComo no se pueden reasignar, las constantes siempre deben ser inicializadas con algún valor. Esto es otra diferencia respecto a let, que no es necesario inicializarla con un valor.\nlet numero // ✅\nconst RADIUS // ❌ SyntaxError: Missing initializer in const declaration\nSon muy útiles para almacenar valores que no van a cambiar. Siempre que puedas, procura usar constantes para que tu código sea más predecible.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-3",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-3",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nCrea una constante llamada IS_DISABLED y asígnale el booleano true\n\n\n\nRespuesta\n\nconst IS_DISABLED = true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#variables-var",
    "href": "unidades/unidad6/3_introduccion_javascript.html#variables-var",
    "title": "JavaScript",
    "section": "Variables var",
    "text": "Variables var\nEn JavaScript, también podemos crear variables usando la palabra reservada var. Es la forma más antigua y es normal que encuentres muchos tutoriales que lo usen. Sin embargo, a día de hoy, no es recomendable usar var ya que tiene comportamientos extraños que pueden causar errores en tu código.\nEn una clase posterior te explicaré cuál es la diferencia entre let, const y var además de por qué, siempre que puedas, deberías evitar var.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#el-nombre-de-las-variables",
    "href": "unidades/unidad6/3_introduccion_javascript.html#el-nombre-de-las-variables",
    "title": "JavaScript",
    "section": "El nombre de las variables",
    "text": "El nombre de las variables\nEn JavaScript, los nombres de las variables pueden contener letras, números y el guión bajo (_). Además, el primer carácter del nombre de la variable no puede ser un número.\nEs importante tener en cuenta que los nombres de las variables son sensibles a las mayúsculas y minúsculas, lo que significa que miVariable y mivariable son dos variables diferentes en JavaScript.\nlet miVariable = 1\nlet mivariable = 2\nmiVariable + mivariable // -&gt; 1 + 2\nTambién es importante que los nombres de las variables sean descriptivos. Por ejemplo, si queremos almacenar el nombre de un usuario, podemos llamar a la variable userName. De esta forma, cuando leamos el código, sabremos que la variable contiene el nombre de un usuario.\nlet n = 'Pepe' // ❌ Mal, no es descriptivo\nlet userName = 'Juan' // ✅ Bien, se entiende",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#convenciones-y-nomenclaturas",
    "href": "unidades/unidad6/3_introduccion_javascript.html#convenciones-y-nomenclaturas",
    "title": "JavaScript",
    "section": "Convenciones y nomenclaturas",
    "text": "Convenciones y nomenclaturas\nEn JavaScript, existen diferentes nomenclaturas para nombrar las variables: camelCase, snake_case y SCREAMING_CASE.\ncamelCase es la forma más común de nombrar las variables en JavaScript. Consiste en escribir la primera palabra en minúsculas y las siguientes palabras con su primera letra en mayúsculas. Por ejemplo:\nlet camelCase = 1\nlet camelCaseIsCool = 2\nlet userName = 'statick'\nsnake_case es una forma de nombrar que consiste en escribir todas las palabras en minúsculas y separarlas con guiones bajos. Por ejemplo:\nlet snake_case = 1\nlet snake_case_is_cool = 2\nlet user_name = 'statick'\nEn algunos lenguajes de programación es muy común usar snake_case para nombrar las variables. En JavaScript no lo es tanto, pero todavía puedes encontrar código que lo use.\nLo más habitual, y es buena idea, es usarlo en los nombres de archivos. Por ejemplo, mi_archivo.js. Esto es porque algunos sistemas operativos distinguen entre mayúsculas y minúsculas y, por tanto, mi_archivo.js y Mi_archivo.js son dos archivos diferentes.\n\n\n\n\n\n\nTip\n\n\n\nTambién existe kebab-case, que es una forma de nombrar que consiste en escribir todas las palabras en minúsculas y separarlas con guiones. Por ejemplo: mi-archivo.js. Es muy similar a snake_case pero con guiones en vez de guiones bajos. No se puede usar para nombrar variables pero sí es común usarlo en los nombres de archivos.\n\n\nSCREAMING_CASE es una forma de nombrar que consiste en escribir todas las palabras en mayúsculas y separarlas con guiones bajos. Por ejemplo:\nconst SCREAMING_CASE = 1\nconst SCREAMING_CASE_IS_COOL = 2\nconst USER_NAME = 'statick'\nPara las constantes, con valores que no van a cambiar, es muy común usar SCREAMING_CASE. Así se puede distinguir fácilmente de las variables que sí cambian de valor. Por eso, no debes usarla para nombrar variables con let.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-5",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-5",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Qué es una variable?\n\n\n\n\n ✓En JavaScript, una variable es un contenedor de información que se utiliza para almacenar datos en un programa.\n\n\n ✗Una variable es un tipo de dato que se utiliza para almacenar información en un programa.\n\n\n\n\n\n\n¿Qué peculiaridad tienen las variables const en JavaScript?\n\n\n\n\n ✓No se pueden reasignar\n\n\n ✗Sólo pueden guardar números\n\n\n\n\n\n\nSiempre hay que asignar un valor a una variable\n\n\n\n\n ✗Sí, siempre\n\n\n ✗No, nunca\n\n\n ✓Sólo si es una variable const",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#null-y-undefined",
    "href": "unidades/unidad6/3_introduccion_javascript.html#null-y-undefined",
    "title": "JavaScript",
    "section": "null y undefined",
    "text": "null y undefined\n¿Recuerdas que te he comentado que existen diferentes tipos de datos en JavaScript? Hemos visto números, cadenas de texto y booleanos.\nEn esta clase vas a aprender otros dos tipos de datos que, aunque son similares, tienen ligeras diferencias. Son null y undefined.\nLa particularidad de estos dos tipos de datos es que cada uno sólo tiene un valor. El tipo null sólo puede tener el valor null y el tipo undefined sólo puede tener el valor undefined.\n\n\n\n\n\n\nTip\n\n\n\nEs como el tipo booleano que podía ser true y false pero, en este caso, sólo tiene un valor.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#la-diferencia-entre-null-y-undefined",
    "href": "unidades/unidad6/3_introduccion_javascript.html#la-diferencia-entre-null-y-undefined",
    "title": "JavaScript",
    "section": "La diferencia entre null y undefined",
    "text": "La diferencia entre null y undefined\nMientras que null es un valor que significa que algo no tiene valor, undefined significa que algo no ha sido definido. Por ejemplo, si creamos una variable sin asignarle ningún valor, su valor será undefined:\nlet rolloDePapel // -&gt; undefined\nTambién podemos asignar directamente el valor undefined a una variable:\nlet rolloDePapel = undefined // -&gt; undefined\nEn cambio, para que una variable tenga el valor null, sólo podemos conseguirlo asignándole explícitamente ese valor:\nlet rolloDePapel = null\nUn caso bastante ilustrativo para entender la diferencia entre null y undefined es el siguiente:",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-4",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-4",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nCrea una variable con let llamada capacidad y asígnale un valor null\nCrea una variable con let llamada dinero y asegúrate que tenga un valor de undefined\n\n\n\nRespuesta\n\nR1.\nlet capacidad = null\nR2.\nlet dinero",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comparaciones-con-null-y-undefined",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comparaciones-con-null-y-undefined",
    "title": "JavaScript",
    "section": "Comparaciones con null y undefined",
    "text": "Comparaciones con null y undefined\nAl usar la igualdad estricta que hemos visto en la clase anterior, null y undefined son considerados diferentes entre sí:\nnull === undefined // -\\&gt; false\nSólo cuando comparamos null con null o undefined con undefined obtenemos true:\nnull === null // -\\&gt; true undefined === undefined // -\\&gt; true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-6",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-6",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\nnull y undefined son dos valores que significan lo mismo.\n\n\n\n\n ✗Sí, ambos indican la ausencia de valor.\n\n\n ✓No, null es un valor que indica algo vacío, mientras que undefined indica algo que no está definido todavía.\n\n\n\n\n\n\n¿Qué valor tiene una variable a la que no se le ha asignado nada al declararla?\n\n\n\n\n ✗Un valor null\n\n\n ✓Un valor undefined\n\n\n ✗No se puede declarar a una variable sin asignar un valor",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-5",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-5",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nTengo una variable llamada userName. Excribe el código necesario para ver su tipo.\n\n\n\nRespuesta\n\nlet userName\ntypeof userName // \"undefined\"\n\nExiste, sin embargo, un valor especial en JavaScript, null, que es considerado un bug en el lenguaje. El operador typeof devuelve “object” cuando se usa con null:\ntypeof null // \"object\"\nLo correcto sería que typeof null devolviera “null”, pero es un error histórico que no se puede corregir sin romper el código existente.\nPor eso, si quieres comprobar si una variable es null, debes usar la comparación estricta ===:\nconst foo = null\nfoo === null // true\nOtra pregunta es… ¿Qué es ese object? Es un tipo de dato que está en el centro de JavaScript y que veremos en detalle más adelante.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#usando-con-operadores-de-comparación",
    "href": "unidades/unidad6/3_introduccion_javascript.html#usando-con-operadores-de-comparación",
    "title": "JavaScript",
    "section": "Usando con operadores de comparación",
    "text": "Usando con operadores de comparación\nEl operador typeof es muy útil cuando se usa con operadores de comparación. Por ejemplo, para comprobar si una variable es del tipo que esperamos:\nconst age = 42\ntypeof age === \"number\" // true\nUna vez que tenemos expresiones lógicas, podemos empezar a encadenar operadores lógicos para comprobar múltiples condiciones:\nconst age = 42\ntypeof age === \"number\" && age &gt; 18 // true",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-6",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-6",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nTengo una variable llamada dogId pero no tengo claro si es una cadena de texto. Escribe el código necesario para asegurarte.\n\n\n\nRespuesta\n\ntypeof dogId === \"string\" // false",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-7",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-7",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Para qué sirve el operador typeof en JavaScript?\n\n\n\n\n ✗Nos permite leer el valor de una variable\n\n\n ✓Nos da el tipo de dato de una variable\n\n\n\n\n\n\nEl operador typeof siempre devuelve una cadena de texto con el tipo del operando.\n\n\n\n\n ✓Si, siempre devuelve una cadena de texto\n\n\n ✗Depende del tipo de dato que le pasemos, Si le pasamos un número, nos devolverá un number",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comentarios",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comentarios",
    "title": "JavaScript",
    "section": "Comentarios",
    "text": "Comentarios\nEn JavaScript, los comentarios son una forma de agregar explicaciones al código que se ignora al ejecutar el programa.\nLos comentarios son útiles para explicar el por qué del código, documentar los cambios realizados en el código y hacer que el código sea más fácil de entender para otros desarrolladores.\nHay dos tipos de comentarios en JavaScript: los comentarios de una sola línea y los comentarios de varias líneas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comentarios-de-una-sola-línea",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comentarios-de-una-sola-línea",
    "title": "JavaScript",
    "section": "Comentarios de una sola línea //",
    "text": "Comentarios de una sola línea //\nLos comentarios de una sola línea comienzan con // y se utilizan para agregar una explicación en una sola línea de código. Por ejemplo:\n// Sólo usamos 6 decimales\nconst PI = 3.141592\n\n// Iniciamos el radio por 10, pero puede cambiar\nlet radio = 10\nTambién puedes añadir un comentario de una sola línea al final de una línea de código. Por ejemplo:\nconst PI = 3.141592 // Sólo usamos 6 decimales",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#comentarios-de-varias-líneas",
    "href": "unidades/unidad6/3_introduccion_javascript.html#comentarios-de-varias-líneas",
    "title": "JavaScript",
    "section": "Comentarios de varias líneas /* */",
    "text": "Comentarios de varias líneas /* */\nLos comentarios de varias líneas comienzan con /* y terminan con */. Se utilizan para agregar notas explicativas que ocupan varias líneas de código. Por ejemplo:\n/*\n  Este es un comentario de varias líneas.\n  Se utiliza para agregar notas explicativas que ocupan varias líneas de código.\n*/\nTen en cuenta que también puedes lograr varias líneas usando el tipo de comentario //, sólo que en este caso, cada línea de código debe comenzar con //. Por ejemplo:\n// Este es un comentario de varias líneas.\n// Se utiliza para agregar notas explicativas que ocupan varias líneas de código.\nEs importante tener en cuenta que los comentarios no afectan el funcionamiento del código. Es decir, si se eliminan los comentarios, el código seguirá funcionando de la misma manera.\nEs recomendable utilizar comentarios con moderación y de manera efectiva para hacer que el código sea más fácil de entender y mantener. Los comentarios deben ser claros y concisos, y deben explicar lo que hace el código sin repetir lo que ya es obvio.\nEs mejor que tu código sea lo suficientemente claro como para no necesitar comentarios, pero si es necesario, utiliza comentarios para explicar el por qué del código, no el qué.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-8",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-8",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Para qué sirven los comentarios en JavaScript?\n\n\n\n\n ✓Sirven para documentar nuestro código y explicar qué hace cada parte de él\n\n\n ✗Para cambiar el comportamiento de nuestro código\n\n\n\n\n\n\n¿Cómo se escriben los comentarios en JavaScript?\n\n\n\n\n ✗Puedes usar # para escribir comentarios de una línea o varias\n\n\n ✓Puedes usar // para escribir comentarios de una línea o /* */ para escribir comentarios de varias líneas",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#console.log",
    "href": "unidades/unidad6/3_introduccion_javascript.html#console.log",
    "title": "JavaScript",
    "section": "console.log()",
    "text": "console.log()\nconsole.log() es una función integrada en JavaScript que se utiliza para imprimir mensajes en la consola del navegador o del editor de código. Se utiliza principalmente para depurar el código y para imprimir valores de variables y mensajes para ayudar en el proceso de desarrollo.\n\n\n\n\n\n\nTip\n\n\n\nEn programación, una función es un conjunto de instrucciones que se pueden usar una y otra vez para hacer una tarea específica. Muchas veces, las funciones se utilizan para evitar repetir código y son parametrizables. Más adelante tendremos una sección sólo para ellas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#sintaxis",
    "href": "unidades/unidad6/3_introduccion_javascript.html#sintaxis",
    "title": "JavaScript",
    "section": "Sintaxis",
    "text": "Sintaxis\nPara poder mostrar estos mensajes en consola, debes escribir console.log() y dentro de los paréntesis, el mensaje que quieres mostrar.\nconsole.log('Hola, JavaScript')\n// -&gt; 'Hola, JavaScript'\nTambién puedes averiguar el valor de una variable, escribiendo el nombre de la variable dentro de los paréntesis.\nconst nombre = 'JavaScript'\nconsole.log(nombre)\n// -&gt; 'JavaScript'\nComo ya sabes concatenar cadenas de texto, puedes mostrar un mensaje y el valor de una variable en el mismo console.log().\nconst nombre = 'JavaScript'\nconsole.log('Hola, ' + nombre)\n// -&gt; 'Hola, JavaScript'\nAdemás, puedes mostrar varios mensajes y valores de variables en el mismo console.log() separándolos por comas.\nconst nombre = 'JavaScript'\nconst version = 2023\nconsole.log(nombre, version)\n// -&gt; 'JavaScript 2023'",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#más-métodos-de-console",
    "href": "unidades/unidad6/3_introduccion_javascript.html#más-métodos-de-console",
    "title": "JavaScript",
    "section": "Más métodos de console",
    "text": "Más métodos de console\nAdemás de console.log(), existen otros métodos que puedes utilizar para imprimir mensajes en la consola. Algunos de ellos son:\n\n\n\n\n\n\nTip\n\n\n\n\nconsole.error(): Imprime un mensaje de error en la consola.\nconsole.warn(): Imprime un mensaje de advertencia en la consola.\nconsole.info(): Imprime un mensaje de información en la consola.\n\n\n\nComo ves, la sintaxis es la misma que console.log(), sólo cambia el nombre del método.\n\n\n\n\n\n\nTip\n\n\n\nAunque puedes usar console.log() para imprimir cualquier tipo de mensaje, es recomendable utilizar los métodos que acabamos de ver para imprimir mensajes de error, advertencia e información ya que tienen un formato especial que los hace más fáciles de identificar.\n\n\nconsole.error('Error')\n// ❌ Error\nconsole.warn('Advertencia')\n// ⚠️ Advertencia\nconsole.info('Información')\n// ℹ️ Información\nPrueba estos métodos en la consola del navegador y observa los resultados.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-9",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-9",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Cuál es la sintaxis adecuada para imprimir un mensaje en la consola del navegador?\n\n\n\n\n ✗console(“mensaje”)\n\n\n ✓console.log(“mensaje”)\n\n\n ✗console.write(“mensaje”)\n\n\n\n\n\n\n¿Cómo podrías usar console.log() para imprimir múltiples valores o variables en una sola línea de código?\n\n\n\n\n ✗Utilizando una sintaxis especial que formatea los valores o variables en una sola línea de código\n\n\n ✗No es posible imprimir múltiples valores o variables en una sola línea de código con console.log()\n\n\n ✓Separando cada valor o variable con comas dentro de los paréntesis de console.log()\n\n\n\n\n\n\n¿Cuál es la diferencia entre console.log() y console.error() en JavaScript?\n\n\n\n\n ✓console.log() se utiliza para imprimir mensajes en la consola del navegador, mientras que console.error() se utiliza para imprimir mensajes de error.\n\n\n ✗console.log() se utiliza para imprimir mensajes de error en la consola del navegador, mientras que console.error() se utiliza para imprimir mensajes normales\n\n\n ✗No hay diferencia entre console.log() y console.error() en JavaScript",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#else",
    "href": "unidades/unidad6/3_introduccion_javascript.html#else",
    "title": "JavaScript",
    "section": "else",
    "text": "else\nEs posible utilizar la palabra clave else para ejecutar un bloque de código diferente si la condición es falsa:\nconst edad = 17\n\nif (edad &gt;= 18) {\n  console.log('Eres mayor de edad')\n} else {\n  console.log('Eres menor de edad')\n}\nEsto es útil para ejecutar un bloque de código u otro dependiendo de si se cumple o no una condición. else if\nTambién podemos utilizar la palabra clave else if para comprobar más de una condición:\nconst edad = 17\n\nif (edad &gt;= 18) {\n  console.log('Eres mayor de edad')\n} else if (edad &gt;= 16) {\n  console.log('Eres casi mayor de edad')\n} else {\n  console.log('Eres menor de edad')\n}\nEl programa comprueba la primera condición. Si es true, ejecuta el código dentro del bloque if. Si es false, comprueba la siguiente condición. Si es true, ejecuta el código dentro del bloque else if. Si es false, ejecuta el código dentro del bloque else.\nDicho de otra forma, entrará en el primer bloque que cumpla la condición y no entrará en los demás. Si no cumple ninguna, entonces entrará en el bloque else.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#anidación-de-condicionales",
    "href": "unidades/unidad6/3_introduccion_javascript.html#anidación-de-condicionales",
    "title": "JavaScript",
    "section": "Anidación de condicionales",
    "text": "Anidación de condicionales\nEs posible anidar condicionales dentro de otros condicionales. Por ejemplo:\nconst edad = 17\nconst tieneCarnet = true\n\nif (edad &gt;= 18) {\n  if (tieneCarnet) {\n    console.log('Puedes conducir')\n  } else {\n    console.log('No puedes conducir')\n  }\n} else {\n  console.log('No puedes conducir')\n}\nEn muchas ocasiones vas a querer evitar la anidación innecesaria de condicionales ya que se hacen difíciles de leer y mantener. En estos casos es mejor utilizar operadores lógicos para crear la condición:\nconst edad = 17\nconst tieneCarnet = true\n\n// si es mayor de edad y tiene carnet entonces...\nif (edad &gt;= 18 && tieneCarnet) {\n  console.log('Puedes conducir')\n} else {\n  console.log('No puedes conducir')\n}\nOtra técnica muy interesante es la de guardar el resultado de la condición en una variable, para que tus condiciones sean mucho más legibles:\nconst edad = 17\nconst tieneCarnet = true\nconst puedeConducir = edad &gt;= 18 && tieneCarnet\n\nif (puedeConducir) {\n  console.log('Puedes conducir')\n} else {\n  console.log('No puedes conducir')\n}\n\n\n\n\n\n\nTip\n\n\n\n¡Wow! ¿Has visto cómo hemos mejorado la legibilidad de nuestro código? ¡Es mucho más fácil de leer y entender! A este tipo de técnica se le llama refactorización y consiste en mejorar el código sin cambiar su comportamiento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#la-importancia-de-las-llaves",
    "href": "unidades/unidad6/3_introduccion_javascript.html#la-importancia-de-las-llaves",
    "title": "JavaScript",
    "section": "La importancia de las llaves",
    "text": "La importancia de las llaves\nEs importante que sepas que las llaves { } no siempre son obligatorios. Si el bloque de código sólo tiene una línea, puedes omitir las llaves:\nconst edad = 17\n\nif (edad &gt;= 18)\n  console.log('Eres mayor de edad')\nelse\n  console.log('Eres menor de edad')\nTambién lo puedes escribir en la misma línea:\nconst edad = 18\n\nif (edad &gt;= 18) console.log('Eres mayor de edad')\nelse console.log('Eres menor de edad')\nSin embargo, te recomiendo que mientras estés aprendiendo siempre escribas las llaves. Esto te ayudará a evitar errores y a que tu código sea más legible.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-10",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-10",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Qué es un bloque condicional en JavaScript?\n\n\n\n\n ✓Un bloque de código que se ejecuta sólo si se cumple una condición\n\n\n ✗Un bloque de código que se ejecuta siempre\n\n\n\n\n\n\n¿Qué palabra clave se utiliza en JavaScript para crear un bloque condicional?\n\n\n\n\n ✗if\n\n\n ✓else\n\n\n ✗then\n\n\n\n\n\n\n¿Qué palabra clave se utiliza en JavaScript para ejecutar un bloque de código si la condición de un bloque condicional es falsa?\n\n\n\n\n ✗if\n\n\n ✗then\n\n\n ✓else",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#actividad-7",
    "href": "unidades/unidad6/3_introduccion_javascript.html#actividad-7",
    "title": "JavaScript",
    "section": "Actividad",
    "text": "Actividad\n\nCrea una variable llamada temperatura y asígnale un valor numérico. Escribe un bloque condicional que imprima en la consola si la temperatura es mayor o igual a 25 grados.\nCrea una variable llamada esVerano y asígnale un valor booleano. Escribe un bloque condicional que imprima en la consola si es verano o no.\n\n\n\nRespuesta\n\nR1.\nconst temperatura = 25\n\nif (temperatura &gt;= 25) {\n  console.log('Hace calor')\n}\nR2.\nconst esVerano = true\n\nif (esVerano) {\n  console.log('Es verano')\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#sintaxis-1",
    "href": "unidades/unidad6/3_introduccion_javascript.html#sintaxis-1",
    "title": "JavaScript",
    "section": "Sintaxis",
    "text": "Sintaxis\nLa sintaxis del bucle while es similar a la de un condicional if. La única diferencia es que, en lugar de ejecutar el código una sola vez, se ejecuta mientras se cumpla la condición.\nwhile (condición) {\n  // código a ejecutar mientras se cumpla la condición\n}\nEl bucle comienza evaluando la condición dentro de los paréntesis. Si la condición es true, se ejecuta el código dentro de las llaves.\nDespués de ejecutar el código, la condición se evalúa de nuevo, y si sigue siendo verdadera, el código dentro de las llaves se ejecuta de nuevo. Este proceso se repite hasta que la condición se evalúa como falsa.\nTen en cuenta que, si la condición es falsa desde el principio, el código dentro de las llaves nunca se ejecutará.\n\n\n\n\n\n\nTip\n\n\n\nA cada vuelta del bucle se le llama iteración. Una iteración es la repetición de un proceso o acción un número determinado de veces, de manera ordenada y sistemática.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#ejemplo-de-uso-de-while",
    "href": "unidades/unidad6/3_introduccion_javascript.html#ejemplo-de-uso-de-while",
    "title": "JavaScript",
    "section": "Ejemplo de uso de while",
    "text": "Ejemplo de uso de while\nVamos a crear la cuenta atrás de un cohete. Creamos una variable cuentaAtras que contenga el número de segundos que faltan para el lanzamiento. En este caso, vamos a empezar con 10 segundos.\nlet cuentaAtras = 10\nPara quitarle un segundo a la cuenta atrás, vamos a utilizar el operador de resta (-) y el operador de asignación (=).\nlet cuentaAtras = 10\ncuentaAtras = cuentaAtras - 1\nconsole.log(cuentaAtras) // -&gt; 9\nSabiendo esto y cómo funciona el bucle while, podemos crear la cuenta atrás del cohete.\n// iniciamos la variable fuera del bucle\nlet cuentaAtras = 10\n\n// mientras la cuenta atrás sea mayor que 0\nwhile (cuentaAtras &gt; 0) {\n  // mostramos el valor de la cuenta atrás en cada iteración\n  console.log(cuentaAtras)\n  // restamos 1 a la cuenta atrás\n  cuentaAtras = cuentaAtras - 1\n}\n\nconsole.log('¡Despegue! 🚀')\nSi ejecutas este código en consola, deberías ver los números del 10 al 1, y después el mensaje de despegue.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#cuidado-con-los-bucles-infinitos",
    "href": "unidades/unidad6/3_introduccion_javascript.html#cuidado-con-los-bucles-infinitos",
    "title": "JavaScript",
    "section": "Cuidado con los bucles infinitos",
    "text": "Cuidado con los bucles infinitos\nLos bucles while son muy potentes, pero también pueden ser peligrosos. Si la condición nunca se evalúa como falsa, el bucle se ejecutará infinitamente.\nwhile (true) {\n  console.log('¡Hola hasta el infinito!')\n}\nEsto evaluará la condición true como verdadera, y ejecutará el código dentro de las llaves una y otra vez.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#saliendo-de-un-bucle-con-break",
    "href": "unidades/unidad6/3_introduccion_javascript.html#saliendo-de-un-bucle-con-break",
    "title": "JavaScript",
    "section": "Saliendo de un bucle con break",
    "text": "Saliendo de un bucle con break\nPodemos controlar cuándo queremos salir de un bucle utilizando la palabra reservada break. Cuando el intérprete de JavaScript encuentra la palabra break, sale del bucle y continúa ejecutando el código que haya después.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  console.log(cuentaAtras)\n  cuentaAtras = cuentaAtras - 1\n\n  // si la cuenta atrás es 5, salimos del bucle\n  if (cuentaAtras === 5) {\n    break // &lt;---- salimos del bucle\n  }\n}\n¿Cuál es el valor de cuentaAtras en este código? Veamos, el bucle estaba haciendo una cuenta atrás… pero le hemos dicho que cuando tuviese el valor 5 saliese del bucle. Por lo tanto, el valor de cuentaAtras es 5.\nUsar break puede ser útil en bucles si queremos salir de ellos por alguna condición en concreto o para evitar justamente los bucles infinitos.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#saltando-una-iteración-con-continue",
    "href": "unidades/unidad6/3_introduccion_javascript.html#saltando-una-iteración-con-continue",
    "title": "JavaScript",
    "section": "Saltando una iteración con continue",
    "text": "Saltando una iteración con continue\nIgual que tenemos la posibilidad de “romper” el bucle con break, también podemos saltarnos una iteración con continue. Cuando el intérprete de JavaScript encuentra la palabra continue, salta a la siguiente iteración del bucle.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  cuentaAtras = cuentaAtras - 1\n\n  // si la cuenta atrás es un número par...\n  if (cuentaAtras % 2 === 0) {\n    continue // &lt;---- saltamos a la siguiente iteración\n  }\n\n  console.log(cuentaAtras)\n}\n¿Qué aparece en la salida de la consola? El bucle está haciendo una cuenta atrás… pero le hemos dicho que si el número es par, se salte esa iteración y deje de ejecutar el código que le sigue.\nPor ello, los números pares no aparecen en la consola.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#anidación-de-bucles",
    "href": "unidades/unidad6/3_introduccion_javascript.html#anidación-de-bucles",
    "title": "JavaScript",
    "section": "Anidación de bucles",
    "text": "Anidación de bucles\nPodemos anidar bucles dentro de otros bucles. Imagina que en nuestra cuenta atrás para el cohete, tenemos que revisar que 3 cosas están en sus parámetros: el oxígeno, el combustible y la temperatura.\nconst NUMERO_REVISIONES = 3\nlet cuentaAtras = 10\n\n// mientras la cuenta atrás sea mayor que 0\nwhile (cuentaAtras &gt; 0) {\n  // mostramos el valor de la cuenta atrás\n  console.log(cuentaAtras)\n\n  // creamos una variable para contar las revisiones realizadas\n  // y la inicializamos a cero\n  let revisionesRealizadas = 0\n\n  // hasta que no hayamos realizado las 3 revisiones...\n  while (revisionesRealizadas &lt; NUMERO_REVISIONES) {\n    // y sumamos 1 a las revisiones realizadas\n    revisionesRealizadas = revisionesRealizadas + 1\n    console.log(revisionesRealizadas + ' revisiones realizadas...')\n  }\n\n  // ahora podemos restar 1 a la cuenta atrás\n  cuentaAtras = cuentaAtras - 1\n}\n\n\n\n\n\n\nTip\n\n\n\n¿Por qué la constante la hemos puesto toda en mayúsculas? Como ya explicamos en la clase de introducción a JavaScript, es una convención para indicar que es una constante y que no va a cambiar.\n\n\nAdemás del bucle anidado, hay algo también muy interesante en el código anterior y es la creación de la variable let revisionesRealizadas.\nTen en cuenta que esa variable se creará y se inicializará a 0 en cada iteración del bucle.\nLas variables creadas con let y const que se crean dentro de un bucle, solo existen dentro de ese bucle. Cuando el bucle termina, la variable desaparece. De hecho si intentas acceder a ella fuera del bucle, te dará un error.\nlet cuentaAtras = 10\n\nwhile (cuentaAtras &gt; 0) {\n  let revisionesRealizadas = 3\n  console.log(revisionesRealizadas)\n  cuentaAtras = cuentaAtras - 1\n}\n\nconsole.log(revisionesRealizadas) // -&gt; ERROR: ReferenceError\nEsto también pasa con otras estructuras de control. Eso es porque el alcance de las variables creadas con let y const es el bloque entre { } en el que se crean. Lo iremos viendo más adelante para que vayas practicando, no te preocupes.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-11",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-11",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Cuál es la sintaxis correcta para utilizar un bucle while en JavaScript?\n\n\n\n\n ✓\n\n\n ✗\n\n\n\n\n\n\n¿Cuál es la palabra reservada que se utiliza para salir de un bucle en JavaScript?\n\n\n\n\n ✓break\n\n\n ✗continue\n\n\n ✗exit\n\n\n\n\n\n\n¿Cuántas veces saldrá en consola la palabra ‘Café’?\n\n\n\n\n\n\n\n ✓6\n\n\n ✗4\n\n\n ✗5",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#quiz-12",
    "href": "unidades/unidad6/3_introduccion_javascript.html#quiz-12",
    "title": "JavaScript",
    "section": "Quiz",
    "text": "Quiz\n\n¿Cuántas veces como mínimo se ejecutará el código dentro de un bucle do{ … } while?\n\n\n\n\n ✗Ninguna vez\n\n\n ✗Depende de la condición\n\n\n ✓Una vez",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#creación-de-matrices",
    "href": "unidades/unidad6/3_introduccion_javascript.html#creación-de-matrices",
    "title": "JavaScript",
    "section": "Creación de Matrices",
    "text": "Creación de Matrices\nPara empezar, aquí se muestra cómo se puede crear una matriz simple de 2x3 en JavaScript:\nconst matriz = [\n  [1, 2, 3],\n  [4, 5, 6]\n]\n\n\n\n\n\n\nTip\n\n\n\nLas matrices no tienen por qué ser cuadradas. Pueden tener cualquier número de filas y columnas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#atajo-al-crear-un-objeto",
    "href": "unidades/unidad6/3_introduccion_javascript.html#atajo-al-crear-un-objeto",
    "title": "JavaScript",
    "section": "Atajo al crear un objeto",
    "text": "Atajo al crear un objeto\nImagina que quieres crear un objeto y que algunas de sus propiedades usen como valor algunas variables que ya tenemos.\nconst name = 'Spidey'\nconst universe = 42\n\nconst spiderman = {\n  name: name,\n  universe: universe,\n  powers: ['web', 'invisibility', 'spider-sense']\n}\nEn este caso, podemos usar un atajo para crear el objeto. Si la propiedad y la variable tienen el mismo nombre, podemos omitir el valor y dejar solo el nombre de la propiedad.\nconst name = 'Spidey'\nconst universe = 42\n\nconst spiderman = {\n  name, // &lt;- automáticamente asigna el valor de la variable name\n  universe, // &lt;- automáticamente asigna el valor de la variable universe\n  powers: ['web', 'invisibility', 'spider-sense']\n}\nFíjate que si tuvieramos powers fuera del objeto, podríamos crear el objeto en la misma línea:\nconst name = 'Spidey'\nconst universe = 42\nconst powers = ['web', 'invisibility', 'spider-sense']\n\nconst spiderman = { name, universe, powers }",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-forin",
    "href": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-forin",
    "title": "JavaScript",
    "section": "Iterando con for…in",
    "text": "Iterando con for…in\nLa estructura de control for…in nos permite crear un bucle que itera sobre todas las propiedades enumerables de un objeto, en un orden arbitrario.\nconst spiderman = {\n  name: 'Spidey',\n  universe: 42,\n  powers: ['web', 'invisibility', 'spider-sense']\n}\n\nfor (const property in spiderman) {\n  console.log(`${property}: ${spiderman[property]}`);\n}\n\n// -&gt; name: Spidey\n// -&gt; universe: 42\n// -&gt; powers: web,invisibility,spider-sensibles\n\n\n\n\n\n\nTip\n\n\n\nNo confundas el bucle for…in con el de for…of que vimos en la sección de arrays. El primero itera sobre las propiedades enumerables de un objeto, mientras que el segundo itera sobre los elementos de un objeto iterable (como los elementos de un array, por ejemplo).",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#iterar-con-object.keys",
    "href": "unidades/unidad6/3_introduccion_javascript.html#iterar-con-object.keys",
    "title": "JavaScript",
    "section": "Iterar con Object.keys()",
    "text": "Iterar con Object.keys()\nEl método Object.keys() retorna un array con las propiedades enumerables de un objeto.\nconst spiderman = {\n  name: 'Spidey',\n  universe: 42,\n  powers: ['web', 'invisibility', 'spider-sense']\n}\n\nconst properties = Object.keys(spiderman)\n\nconsole.log(properties.length) // 3\n\nproperties.forEach(property =&gt; {\n  console.log(property)\n})\n\n// -&gt; name\n// -&gt; universe\n// -&gt; powers\nEste código hace algo muy similar al anterior, pero utilizando Object.keys() para obtener las propiedades del objeto.\n\n\n\n\n\n\nTip\n\n\n\n¿Qué son las propiedades enumerables? Por defecto, cuando añadimos propiedades a un objeto, estas son enumerables, es decir, que se pueden iterar sobre ellas. Sin embargo, como veremos más adelante, podemos crear propiedades que, por lo que sea, nos interesa que no sean enumerables. A veces estas son más de uso interno, como métodos auxiliares que el propio lenguaje JavaScript tiene, y no queremos que aparezcan cuando iteramos sobre un objeto.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-object.values",
    "href": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-object.values",
    "title": "JavaScript",
    "section": "Iterando con Object.values()",
    "text": "Iterando con Object.values()\nEl método Object.values() retorna un array con los valores correspondientes a las propiedades enumerables de un objeto.\nconst values = Object.values(spiderman)\n\nvalues.forEach(value =&gt; {\n  console.log(value)\n})\n\n// -&gt; Spidey\n// -&gt; 42\n// -&gt; [ 'web', 'invisibility', 'spider-sense' ]\nComo ves, la diferencia con Object.values() es que este método retorna los valores y Object.keys() retorna las propiedades.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-object.entries",
    "href": "unidades/unidad6/3_introduccion_javascript.html#iterando-con-object.entries",
    "title": "JavaScript",
    "section": "Iterando con Object.entries()",
    "text": "Iterando con Object.entries()\nEl método Object.entries() retorna un array de arrays, donde cada subarray es un par [propiedad, valor] correspondiente a las propiedades enumerables de un objeto.\nconst entries = Object.entries(spiderman)\n\nentries.forEach(entry =&gt; {\n  console.log(entry)\n})\n\n// -&gt; [ 'name', 'Spidey' ]\n// -&gt; [ 'universe', 42 ]\n// -&gt; [ 'powers', [ 'web', 'invisibility', 'spider-sense' ] ]\nLo interesante es que este método nos da acceso tanto a las propiedades como a los valores. Lo puedes ver más claro en el siguiente ejemplo:\nconst entries = Object.entries(spiderman)\n\nentries.forEach(entry =&gt; {\n  const property = entry[0]\n  const value = entry[1]\n\n  console.log(`${property}: ${value}`)\n})",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#el-operador-in-para-comprobar-si-una-propiedad-existe",
    "href": "unidades/unidad6/3_introduccion_javascript.html#el-operador-in-para-comprobar-si-una-propiedad-existe",
    "title": "JavaScript",
    "section": "El operador in para comprobar si una propiedad existe",
    "text": "El operador in para comprobar si una propiedad existe\nOtra forma de comprobar si una propiedad existe es usando el operador in. Este operador comprueba si una propiedad existe en un objeto y devuelve true o false:\nconsole.log('name' in gamesystem) // -&gt; true\nconsole.log('specifications' in gamesystem) // -&gt; false\nconsole.log('specs' in gamesystem) // -&gt; true\n\nif ('specifications' in gamesystem) {\n  console.log(gamesystem.specifications.ram)\n} else {\n  console.log('No hay especificaciones')\n}\n¡Pero ojo! ¿Qué pasa si la propiedad existe pero su valor es undefined?\nconst gamesystem = {\n  name: 'PS5',\n  price: 550,\n  specifications: undefined,\n}\n\nconsole.log('specifications' in gamesystem) // -&gt; true\n\ngamesystem.specifications.ram\n// ❌ Uncaught TypeError: Cannot read property 'ram' of undefined\nEl operador in puede ser interesante para comprobar si una propiedad existe en un objeto, pero no nos sirve para comprobar si el valor de esa propiedad es undefined y habría que hacer comprobaciones extra para evitar el error.\nif (\n  'specifications' in gamesystem &&\n  gamesystem.specifications !== undefined &&\n  gamesystem.specifications !== null) {\n  console.log(gamesystem.specifications.ram)\n} else {\n  console.log('No hay especificaciones')\n}\nMucho código para algo tan simple. Por suerte, existe una forma más sencilla de hacerlo.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#el-operador-de-encadenamiento-opcional-.",
    "href": "unidades/unidad6/3_introduccion_javascript.html#el-operador-de-encadenamiento-opcional-.",
    "title": "JavaScript",
    "section": "El operador de Encadenamiento Opcional, ?.",
    "text": "El operador de Encadenamiento Opcional, ?.\nEl Operador de Encadenamiento Opcional ?. permite leer el valor de una propiedad ubicada profundamente dentro de una cadena de objetos conectados, sin tener que validar expresamente que cada referencia en la cadena es válida.\nconst gamesystem = {\n  name: 'PS5',\n  price: 550,\n  specs: {\n    cpu: 'AMD Ryzen Zen 2',\n    gpu: 'AMD Radeon RDNA 2',\n  }\n}\n\nconsole.log(gamesystem.specifications?.cpu)\n// -&gt; undefined\nconsole.log(gamesystem.specs?.cpu)\n// -&gt; AMD Ryzen Zen 2\nSi la propiedad specifications no existe, el operador ?. devuelve undefined y no se produce ningún error. Si la propiedad existe, el operador ?. devuelve el valor de la propiedad.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#beneficios-del-operador-de-encadenamiento-opcional",
    "href": "unidades/unidad6/3_introduccion_javascript.html#beneficios-del-operador-de-encadenamiento-opcional",
    "title": "JavaScript",
    "section": "Beneficios del Operador de Encadenamiento Opcional",
    "text": "Beneficios del Operador de Encadenamiento Opcional\nUno de los principales beneficios del operador de encadenamiento opcional es que simplifica nuestro código y lo hace más legible. En lugar de tener que hacer varias comprobaciones para asegurarnos de que un objeto y sus propiedades existen, podemos intentar acceder directamente a la propiedad que nos interesa, y JavaScript no se quejará si no existe.\nEste operador es especialmente útil en aplicaciones con datos dinámicos, donde no siempre podemos garantizar la estructura exacta de nuestros objetos.\nconst user = {\n  name: 'Peter',\n  settings: {\n    theme: 'dark',\n    notifications: {\n      email: true,\n      push: false,\n      marketing: undefined\n    }\n  }\n}\n\n// la forma clásica de acceder a una propiedad anidada\n// de forma segura\nlet email = undefined\nif (user && user.settings &&\n  user.settings.notifications &&\n  user.settings.notifications.email) {\n  email = user.settings.notifications.email\n}\n\nconsole.log(email) // -&gt; true\n\n// con Optional Chaining Operator\nconst email = user?.settings?.notifications?.email\nconsole.log(email) // -&gt; true\nEl operador de encadenamiento opcional es una excelente herramienta para trabajar con objetos en JavaScript, especialmente cuando no podemos garantizar la estructura o presencia de ciertos datos. Nos ayuda a escribir un código más limpio, legible y resistente a errores.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#sintaxis-del-operador-de-propagación",
    "href": "unidades/unidad6/3_introduccion_javascript.html#sintaxis-del-operador-de-propagación",
    "title": "JavaScript",
    "section": "Sintaxis del operador de propagación",
    "text": "Sintaxis del operador de propagación\nEl operador de propagación se representa con tres puntos suspensivos … seguidos de un nombre de variable. Por convención, se suele usar el nombre rest.\nfunction sum(...rest) {\n  console.log(rest)\n}\n\nsum(1, 2, 3, 4, 5) // -&gt; [1, 2, 3, 4, 5]\n\nsum('a', 'b', 'c') // -&gt; ['a', 'b', 'c']\n\nsum() // -&gt; []\nEn este ejemplo, la función sum recibe un número indefinido de argumentos y los guarda en un array llamado rest. Luego, simplemente imprimimos el array rest por consola.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#usos-comunes-del-operador-de-propagación",
    "href": "unidades/unidad6/3_introduccion_javascript.html#usos-comunes-del-operador-de-propagación",
    "title": "JavaScript",
    "section": "Usos comunes del operador de propagación",
    "text": "Usos comunes del operador de propagación\nEl operador de propagación es muy versátil y se puede utilizar en muchas situaciones diferentes. Algunos de los usos más comunes son:\n\nCapturar argumentos de una función: como hemos visto en el ejemplo anterior, el operador de propagación nos permite capturar un número indefinido de argumentos en una función.\nConcatenar arrays: podemos usar el operador de propagación para concatenar dos o más arrays en uno solo.\n\nconst arr1 = [1, 2, 3]\nconst arr2 = [4, 5, 6]\nconst arr3 = [...arr1, ...arr2]\n\nconsole.log(arr3) // -&gt; [1, 2, 3, 4, 5, 6]\n\nCopiar arrays: también podemos usar el operador de propagación para copiar un array.\n\nconst arr1 = [1, 2, 3]\nconst arr2 = [...arr1]\n\nconsole.log(arr2) // -&gt; [1, 2, 3]\n\nCrear objetos: podemos usar el operador de propagación para crear un nuevo objeto a partir de uno existente.\n\nconst obj1 = { a: 1, b: 2 }\nconst obj2 = { ...obj1, c: 3 }\n\nconsole.log(obj2) // -&gt; { a: 1, b: 2, c: 3 }\n\nEliminar propiedades de un objeto: también podemos usar el operador de propagación para eliminar propiedades de un objeto.\n\nconst obj1 = { a: 1, b: 2, c: 3 }\nconst { c, ...obj2 } = obj1\n\nconsole.log(obj2) // -&gt; { a: 1, b: 2 }",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#rest-operator-vs-spread-operator",
    "href": "unidades/unidad6/3_introduccion_javascript.html#rest-operator-vs-spread-operator",
    "title": "JavaScript",
    "section": "Rest Operator vs Spread Operator",
    "text": "Rest Operator vs Spread Operator\nEs importante tener en cuenta que el operador de propagación o rest operator es diferente del operador de propagación o spread operator. Aunque ambos utilizan la misma sintaxis de tres puntos suspensivos …, tienen diferentes propósitos y se utilizan en diferentes contextos.\n\nRest Operator: se utiliza para capturar un número indefinido de argumentos en una función o para desestructurar un objeto o array en variables.\nSpread Operator: se utiliza para expandir un objeto o array en otro objeto o array, para concatenar arrays o para copiar un objeto o array.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#crear-una-promesa",
    "href": "unidades/unidad6/3_introduccion_javascript.html#crear-una-promesa",
    "title": "JavaScript",
    "section": "Crear una promesa",
    "text": "Crear una promesa\nPara crear una promesa, usamos la clase Promise y pasamos una función con dos parámetros: resolve y reject.\n\nresolve: se llama cuando la promesa se resuelve satisfactoriamente y se le pasa el valor resultante.\nreject: se llama cuando la promesa falla y se le pasa el motivo del fallo.\n\nconst promise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve('¡La promesa se ha resuelto!')\n  }, 2000)\n})\n\npromise.then((result) =&gt; {\n  console.log(result) // -&gt; ¡La promesa se ha resuelto!\n})\n\n// -&gt; ¡La promesa se ha resuelto!\nEn este ejemplo, creamos una promesa que se resuelve después de 2 segundos y luego imprimimos el resultado por consola.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#encadenar-promesas",
    "href": "unidades/unidad6/3_introduccion_javascript.html#encadenar-promesas",
    "title": "JavaScript",
    "section": "Encadenar promesas",
    "text": "Encadenar promesas\nUna de las características más poderosas de las promesas es que podemos encadenarlas para ejecutar tareas en secuencia.\nconst promise1 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve('¡La primera promesa se ha resuelto!')\n  }, 2000)\n})\n\nconst promise2 = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    resolve('¡La segunda promesa se ha resuelto!')\n  }, 2000)\n})\n\npromise1\n  .then((result) =&gt; {\n    console\n    console.log(result) // -&gt; ¡La primera promesa se ha resuelto!\n    return promise2\n  })\n  .then((result) =&gt; {\n    console.log(result) // -&gt; ¡La segunda promesa se ha resuelto!\n  })\n\n// -&gt; ¡La primera promesa se ha resuelto!\n// -&gt; ¡La segunda promesa se ha resuelto!\nEn este ejemplo, creamos dos promesas y las encadenamos para que se ejecuten en secuencia. Primero se resuelve la promise1 y luego la promise2.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#asyncawait",
    "href": "unidades/unidad6/3_introduccion_javascript.html#asyncawait",
    "title": "JavaScript",
    "section": "async/await",
    "text": "async/await\nEl operador async se utiliza para declarar una función asíncrona, es decir, una función que devuelve una promesa. El operador await se utiliza para esperar a que una promesa se resuelva antes de continuar con la ejecución de la función.\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data')\n  const data = await response.json()\n  return data\n}\n\nfetchData()\n  .then((data) =&gt; {\n    console.log(data)\n  })\n  .catch((error) =&gt; {\n    console.error(error)\n  })\n\n// -&gt; { key: 'value' }\nEn este ejemplo, creamos una función fetchData que utiliza el operador await para esperar a que la promesa devuelta por fetch se resuelva antes de continuar con la ejecución de la función.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#beneficios-de-asyncawait",
    "href": "unidades/unidad6/3_introduccion_javascript.html#beneficios-de-asyncawait",
    "title": "JavaScript",
    "section": "Beneficios de async/await",
    "text": "Beneficios de async/await\nEl uso de async/await tiene varios beneficios:\n\nCódigo más legible: el uso de async/await hace que el código sea más fácil de leer y entender, ya que se parece más a la forma en que escribimos código síncrono.\nManejo de errores: podemos usar try/catch para manejar los errores de forma más sencilla y clara.\nEncadenamiento de promesas: podemos encadenar promesas de forma más sencilla y legible.\nMejor manejo de la lógica asíncrona: async/await nos permite escribir código asíncrono de forma más natural y estructurada.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar",
    "href": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar",
    "title": "JavaScript",
    "section": "Exportar e importar",
    "text": "Exportar e importar\nPara exportar una función, variable o clase de un módulo, usamos la palabra clave export seguida del nombre de la función, variable o clase que queremos exportar.\n// math.js\nexport function sum(a, b) {\n  return a + b\n}\n\nexport const PI = 3.14159\nPara importar una función, variable o clase de un módulo, usamos la palabra clave import seguida del nombre de la función, variable o clase que queremos importar y el nombre del módulo entre llaves.\n// app.js\nimport { sum, PI } from './math.js'\n\nconsole.log(sum(1, 2)) // -&gt; 3\nconsole.log(PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar-por-defecto",
    "href": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar-por-defecto",
    "title": "JavaScript",
    "section": "Exportar e importar por defecto",
    "text": "Exportar e importar por defecto\nTambién podemos exportar e importar por defecto una función, variable o clase de un módulo. Para exportar por defecto, usamos la palabra clave export default seguida del nombre de la función, variable o clase que queremos exportar por defecto.\n// math.js\nexport default function sum(a, b) {\n  return a + b\n}\n\nexport const PI = 3.14159\nPara importar por defecto una función, variable o clase de un módulo, usamos la palabra clave import seguida del nombre de la función, variable o clase que queremos importar y el nombre del módulo entre llaves.\n// app.js\nimport sum, { PI } from './math.js'\n\nconsole.log(sum(1, 2)) // -&gt; 3\nconsole.log(PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar-todo",
    "href": "unidades/unidad6/3_introduccion_javascript.html#exportar-e-importar-todo",
    "title": "JavaScript",
    "section": "Exportar e importar todo",
    "text": "Exportar e importar todo\nTambién podemos exportar e importar todo un módulo. Para exportar todo, usamos la palabra clave export *.\n// math.js\nexport function sum(a, b) {\n  return a + b\n}\n\nexport const PI = 3.14159\nPara importar todo un módulo, usamos la palabra clave import *.\n// app.js\nimport * as math from './math.js'\n\nconsole.log(math.sum(1, 2)) // -&gt; 3\nconsole.log(math.PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-el-navegador",
    "href": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-el-navegador",
    "title": "JavaScript",
    "section": "Módulos en el navegador",
    "text": "Módulos en el navegador\nLos módulos también se pueden utilizar en el navegador. Para importar un módulo en un archivo HTML, usamos la etiqueta script con el atributo type=“module” y la ruta del archivo que queremos importar en el atributo src.\n&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script type=\"module\" src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn el archivo app.js, podemos importar un módulo de la misma forma que en Node.js.\n// app.js\nimport { sum, PI } from './math.js'\n\nconsole.log(sum(1, 2)) // -&gt; 3\nconsole.log(PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-node.js",
    "href": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-node.js",
    "title": "JavaScript",
    "section": "Módulos en Node.js",
    "text": "Módulos en Node.js\nEn Node.js, los módulos se pueden utilizar de la misma forma que en el navegador. Para exportar e importar un módulo, usamos la palabra clave export y import.\n// math.js\nexport function sum(a, b) {\n  return a + b\n}\n\nexport const PI = 3.14159\n// app.js\nimport { sum, PI } from './math.js'\n\nconsole.log(sum(1, 2)) // -&gt; 3\nconsole.log(PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-commonjs",
    "href": "unidades/unidad6/3_introduccion_javascript.html#módulos-en-commonjs",
    "title": "JavaScript",
    "section": "Módulos en CommonJS",
    "text": "Módulos en CommonJS\nEn CommonJS, los módulos se pueden utilizar de la misma forma que en Node.js. Para exportar e importar un módulo, usamos la palabra clave module.exports y require.\n// math.js\nfunction sum(a, b) {\n  return a + b\n}\n\nconst PI = 3.14159\n\nmodule.exports = { sum, PI }\n// app.js\nconst { sum, PI } = require('./math.js')\n\nconsole.log(sum(1, 2)) // -&gt; 3\nconsole.log(PI) // -&gt; 3.14159",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>JavaScript</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html",
    "href": "unidades/unidad6/4_introduccion_node.html",
    "title": "Nodejs",
    "section": "",
    "text": "1. Introducción a Node.js\nNode.js es un entorno de ejecución de JavaScript que permite ejecutar código JavaScript en el lado del servidor. Fue creado por Ryan Dahl en 2009 y está basado en el motor V8 de Google Chrome. Node.js es una herramienta muy poderosa para el desarrollo de aplicaciones web y APIs RESTful, ya que permite realizar operaciones de entrada/salida de forma asíncrona y no bloqueante.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#por-qué-es-node.js",
    "href": "unidades/unidad6/4_introduccion_node.html#por-qué-es-node.js",
    "title": "Nodejs",
    "section": "¿Por qué es Node.js?",
    "text": "¿Por qué es Node.js?\nNode.js permite manejar múltiples solicitudes simultáneamente sin bloquear el hilo principal, lo que lo hace muy eficiente para aplicaciones en tiempo real y de alta concurrencia.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#historia-y-evolución-de-node.js",
    "href": "unidades/unidad6/4_introduccion_node.html#historia-y-evolución-de-node.js",
    "title": "Nodejs",
    "section": "Historia y Evolución de Node.js",
    "text": "Historia y Evolución de Node.js\n\n2009: Creación de Node.js por Ryan Dahl.\n2010: Lanzamiento de la primera versión estable.\n2011: Lanzamiento de npm (Node Package Manager).\n2012-2021: Mejora continua con nuevas versiones y características.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#características-de-node.js",
    "href": "unidades/unidad6/4_introduccion_node.html#características-de-node.js",
    "title": "Nodejs",
    "section": "Características de Node.js",
    "text": "Características de Node.js\n\nAsíncrono y no bloqueante\nEventos y callbacks\nMódulos y paquetes\nNPM (Node Package Manager)\nRendimiento y escalabilidad\nComunidad activa",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#npm-node-package-manager",
    "href": "unidades/unidad6/4_introduccion_node.html#npm-node-package-manager",
    "title": "Nodejs",
    "section": "npm (Node Package Manager)",
    "text": "npm (Node Package Manager)\n\nDescripción: El manejador de paquetes por defecto para Node.js.\nUso Básico:\n\nnpm install &lt;paquete&gt;: Instala un paquete.\nnpm install --save-dev &lt;paquete&gt;: Instala un paquete para desarrollo.\nnpm update: Actualiza paquetes instalados.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#yarn",
    "href": "unidades/unidad6/4_introduccion_node.html#yarn",
    "title": "Nodejs",
    "section": "yarn",
    "text": "yarn\n\nDescripción: Alternativa a npm creada por Facebook, ofrece una instalación más rápida y una mejor gestión de dependencias.\nUso Básico:\n\nyarn add &lt;paquete&gt;: Instala un paquete.\nyarn add --dev &lt;paquete&gt;: Instala un paquete para desarrollo.\nyarn upgrade: Actualiza paquetes instalados.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#pnpm",
    "href": "unidades/unidad6/4_introduccion_node.html#pnpm",
    "title": "Nodejs",
    "section": "pnpm",
    "text": "pnpm\n\nDescripción: Un manejador de paquetes más rápido y eficiente que almacena un único conjunto de paquetes en lugar de duplicar dependencias.\nUso Básico:\n\npnpm install &lt;paquete&gt;: Instala un paquete.\npnpm install --save-dev &lt;paquete&gt;: Instala un paquete para desarrollo.\npnpm update: Actualiza paquetes instalados.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#nvm-node-version-manager",
    "href": "unidades/unidad6/4_introduccion_node.html#nvm-node-version-manager",
    "title": "Nodejs",
    "section": "nvm (Node Version Manager)",
    "text": "nvm (Node Version Manager)\n\nDescripción: Herramienta para instalar y gestionar múltiples versiones de Node.js.\nUso Básico:\n\nnvm install &lt;version&gt;: Instala una versión específica de Node.js.\nnvm use &lt;version&gt;: Cambia a una versión específica.\nnvm ls: Lista las versiones instaladas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#fnm-fast-node-manager",
    "href": "unidades/unidad6/4_introduccion_node.html#fnm-fast-node-manager",
    "title": "Nodejs",
    "section": "fnm (Fast Node Manager)",
    "text": "fnm (Fast Node Manager)\n\nDescripción: Alternativa más rápida a nvm, también permite gestionar versiones de Node.js.\nUso Básico:\n\nfnm install &lt;version&gt;: Instala una versión específica de Node.js.\nfnm use &lt;version&gt;: Cambia a una versión específica.\nfnm ls: Lista las versiones instaladas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#deno",
    "href": "unidades/unidad6/4_introduccion_node.html#deno",
    "title": "Nodejs",
    "section": "Deno",
    "text": "Deno\n\nDescripción: Entorno de ejecución para JavaScript y TypeScript creado por Ryan Dahl (creador de Node.js) como una alternativa moderna a Node.js.\nCaracterísticas:\n\n*   Soporte nativo para TypeScript.\n*   Seguridad mejorada con permisos explícitos.\n*   No utiliza npm, usa deno.land/x para paquetes.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#bun",
    "href": "unidades/unidad6/4_introduccion_node.html#bun",
    "title": "Nodejs",
    "section": "Bun",
    "text": "Bun\n\nDescripción: Un entorno de ejecución de JavaScript relativamente nuevo que se enfoca en el rendimiento y la simplicidad.\nCaracterísticas:\n\n*   Enfocado en la velocidad y la compatibilidad.\n*   Incluye un empaquetador, un administrador de paquetes y un motor de ejecución en un solo binario.\n*   Compatible con Node.js en muchos aspectos, pero aún en desarrollo y evolución.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-callback",
    "href": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-callback",
    "title": "Nodejs",
    "section": "Ejemplo de Callback:",
    "text": "Ejemplo de Callback:\nconst fs = require('fs');\n\n// Leer un archivo de manera asíncrona usando un callback\nfs.readFile('archivo.txt', 'utf8', (err, data) =&gt; {\n  if (err) {\n    console.error(\"Error leyendo el archivo:\", err);\n    return;\n  }\n  console.log(\"Contenido del archivo:\", data);\n});\nProblema: Callback Hell A medida que anidamos callbacks, el código se vuelve difícil de leer y mantener.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-promesa",
    "href": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-promesa",
    "title": "Nodejs",
    "section": "Ejemplo de Promesa:",
    "text": "Ejemplo de Promesa:\nconst fs = require('fs').promises;\n\nfs.readFile('archivo.txt', 'utf8')\n  .then(data =&gt; {\n    console.log(\"Contenido del archivo:\", data);\n  })\n  .catch(err =&gt; {\n    console.error(\"Error leyendo el archivo:\", err);\n  });",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-asyncawait",
    "href": "unidades/unidad6/4_introduccion_node.html#ejemplo-de-asyncawait",
    "title": "Nodejs",
    "section": "Ejemplo de async/await:",
    "text": "Ejemplo de async/await:\nconst fs = require('fs').promises;\n\nasync function leerArchivo() {\n  try {\n    const data = await fs.readFile('archivo.txt', 'utf8');\n    console.log(\"Contenido del archivo:\", data);\n  } catch (err) {\n    console.error(\"Error leyendo el archivo:\", err);\n  }\n}\n\nleerArchivo();",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#crear-un-servidor-http-asíncrono",
    "href": "unidades/unidad6/4_introduccion_node.html#crear-un-servidor-http-asíncrono",
    "title": "Nodejs",
    "section": "Crear un Servidor HTTP Asíncrono",
    "text": "Crear un Servidor HTTP Asíncrono\nconst http = require('http');\nconst fs = require('fs').promises;\n\nconst server = http.createServer(async (req, res) =&gt; {\n  try {\n    const data = await fs.readFile('archivo.txt', 'utf8');\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    res.end(data);\n  } catch (err) {\n    res.writeHead(500, { 'Content-Type': 'text/plain' });\n    res.end(\"Error leyendo el archivo\");\n  }\n});\n\nserver.listen(3000, () =&gt; {\n  console.log('Servidor escuchando en el puerto 3000');\n});",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#comandos-básicos-de-npm",
    "href": "unidades/unidad6/4_introduccion_node.html#comandos-básicos-de-npm",
    "title": "Nodejs",
    "section": "Comandos básicos de NPM:",
    "text": "Comandos básicos de NPM:\n\nnpm init: Inicia un nuevo proyecto y crea un archivo package.json.\nnpm install &lt;paquete&gt;: Instala un paquete.\nnpm install –save-dev &lt;paquete&gt;: Instala un paquete para desarrollo.\nnpm update: Actualiza paquetes instalados.\n\n\nPreparando el Entorno para React\n\nPara conectar lo aprendido en Node.js con React en la próxima clase, es fundamental instalar y configurar herramientas adicionales.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/4_introduccion_node.html#instalar-create-react-app",
    "href": "unidades/unidad6/4_introduccion_node.html#instalar-create-react-app",
    "title": "Nodejs",
    "section": "Instalar create-react-app:",
    "text": "Instalar create-react-app:",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Nodejs</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/5_tutorial_fetch.html#requisitos",
    "href": "unidades/unidad6/5_tutorial_fetch.html#requisitos",
    "title": "Tutorial de Fetch",
    "section": "Requisitos",
    "text": "Requisitos\nPara este tutorial vamos a utilizar tecnologias como html, css y javascript. Además, vamos a necesitar un navegador web y un editor de código, se recomienda leer acerca de peticiones con fetch antes de empezar este tutorial.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tutorial de Fetch</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/5_tutorial_fetch.html#instrucciones",
    "href": "unidades/unidad6/5_tutorial_fetch.html#instrucciones",
    "title": "Tutorial de Fetch",
    "section": "Instrucciones",
    "text": "Instrucciones\n\nCreamos un archivo index.html y agregamos el siguiente código:\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Pokemon&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Pokemon&lt;/h1&gt;\n    &lt;input type=\"text\" id=\"search\" placeholder=\"Buscar pokemon\"&gt;\n    &lt;button id=\"search-button\"&gt;Buscar&lt;/button&gt;\n    &lt;div id=\"pokemon\"&gt;&lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn esta sección hemos creado la estructura básica de nuestro proyecto. Hemos agregado un título, un input para buscar pokemon, un botón para buscar pokemon, un div para mostrar la información del pokemon y un script para nuestro archivo app.js.\n\nCreamos un archivo app.js y agregamos el siguiente código:\n\ndocument.getElementById('search-button').addEventListener('click', () =&gt; {\n    const search = document.getElementById('search').value;\n    fetch(`https://pokeapi.co/api/v2/pokemon/${search}`)\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            const pokemon = document.getElementById('pokemon');\n            pokemon.innerHTML = `\n                &lt;h2&gt;${data.name}&lt;/h2&gt;\n                &lt;img src=\"${data.sprites.front_default}\" alt=\"${data.name}\"&gt;\n                &lt;p&gt;Altura: ${data.height}&lt;/p&gt;\n                &lt;p&gt;Peso: ${data.weight}&lt;/p&gt;\n            `;\n        })\n        .catch(error =&gt; {\n            console.error(error);\n        });\n});\nEn esta sección hemos agregado un evento al botón de buscar pokemon. Cuando se haga click en el botón, se va a hacer una petición a la API de PokeAPI. Si la petición es exitosa, se va a mostrar la información del pokemon en el div pokemon. Si la petición falla, se va a mostrar un mensaje de error en la consola.\nPara más información sobre la API de PokeAPI, se puede consultar la documentación.\n\nMediante el plugin de Live Server, abrimos el archivo index.html en el navegador y probamos la aplicación.\nVamos a mejorar la presentación de nuestro proyecto agregando estilos CSS. Creamos un archivo styles.css y agregamos el siguiente código:\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\nh1 {\n    margin: 1rem 0;\n}\n\ninput {\n    padding: 0.5rem;\n    margin: 0.5rem 0;\n}\n\nbutton {\n    padding: 0.5rem;\n    margin: 0.5rem 0;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    cursor: pointer;\n}\n\n#pokemon {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 1rem 0;\n}\n\nimg {\n    width: 100px;\n    height: 100px;\n    margin: 0.5rem 0;\n}\n\np {\n    margin: 0.5rem 0;\n}\nEn esta sección hemos agregado estilos CSS para mejorar la presentación de nuestro proyecto, como la fuente, el color de fondo, el color del texto, el tamaño de la letra, el espaciado, el color del botón, el cursor, el tamaño de la imagen, el margen de la imagen, el margen del párrafo, etc.\n\nAgregamos el archivo styles.css al archivo index.html:\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Pokemon&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Pokemon&lt;/h1&gt;\n    &lt;input type=\"text\" id=\"search\" placeholder=\"Buscar pokemon\"&gt;\n    &lt;button id=\"search-button\"&gt;Buscar&lt;/button&gt;\n    &lt;div id=\"pokemon\"&gt;&lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nEn esta sección hemos agregado el archivo styles.css al archivo index.html.\n\nMediante el plugin de Live Server, abrimos el archivo index.html en el navegador y probamos la aplicación.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tutorial de Fetch</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/5_tutorial_fetch.html#resumen",
    "href": "unidades/unidad6/5_tutorial_fetch.html#resumen",
    "title": "Tutorial de Fetch",
    "section": "Resumen",
    "text": "Resumen\nEn este tutorial hemos aprendido a hacer peticiones Fetch con JavaScript puro. Hemos creado una aplicación que nos permite buscar pokemon y ver sus detalles. También hemos aprendido a mejorar la presentación de nuestro proyecto agregando estilos CSS. Además, hemos aprendido a hacer peticiones Fetch con la Fake Store API y la Rick and Morty API. Se sugiere seguir practicando y experimentando con Fetch para mejorar nuestras habilidades de programación.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tutorial de Fetch</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/5_tutorial_fetch.html#conclusión",
    "href": "unidades/unidad6/5_tutorial_fetch.html#conclusión",
    "title": "Tutorial de Fetch",
    "section": "Conclusión",
    "text": "Conclusión\nEn este tutorial hemos aprendido a hacer peticiones Fetch con JavaScript puro. Hemos creado una aplicación que nos permite buscar pokemon y ver sus detalles. También hemos aprendido a mejorar la presentación de nuestro proyecto agregando estilos CSS. Además, hemos aprendido a hacer peticiones Fetch con la Fake Store API y la Rick and Morty API. Se sugiere seguir practicando y experimentando con Fetch para mejorar nuestras habilidades de programación.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tutorial de Fetch</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/5_tutorial_fetch.html#referencias",
    "href": "unidades/unidad6/5_tutorial_fetch.html#referencias",
    "title": "Tutorial de Fetch",
    "section": "Referencias",
    "text": "Referencias\n\nFetch API\nPokéAPI\nFake Store API\nRick and Morty API\nJokeAPI\nThe Dog API\nThe Cat API\nThe Weather API\nThe News API\nThe Movie API\nThe Music API\nThe Recipe API\nThe Book API\nGithub Pages\nVercel\nNetlify\nLive Server\nVisual Studio Code\nHTML\nCSS\nJavaScript\nAPI\nJSON\nDOM\nNode.js\nNPM\nAsync/Await\nPromesas",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Tutorial de Fetch</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#características-clave-de-react",
    "href": "unidades/unidad6/6_introduccion_react.html#características-clave-de-react",
    "title": "Introducción a React",
    "section": "Características clave de React:",
    "text": "Características clave de React:\n\nComponentes: React basa su arquitectura en componentes. Cada componente es una pieza reutilizable de código que puede manejar su propio estado y lógica.\nVirtual DOM: React utiliza un DOM virtual para actualizar solo las partes que cambian, lo que mejora significativamente el rendimiento.\nUnidirectional Data Flow (Flujo de Datos Unidireccional): En React, los datos fluyen en una sola dirección, desde el componente padre hacia los componentes hijos.\nJSX: Un lenguaje similar a HTML que permite combinar la estructura del componente con lógica JavaScript.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#react-con-create-react-app-antes.",
    "href": "unidades/unidad6/6_introduccion_react.html#react-con-create-react-app-antes.",
    "title": "Introducción a React",
    "section": "React con create-react-app (Antes).",
    "text": "React con create-react-app (Antes).\n\n\n\nAntes de la aparición de herramientas como Vite, React se inicializaba principalmente usando create-react-app (CRA). CRA es un generador de proyectos que proporciona una configuración completa para desarrollar aplicaciones React sin necesidad de configuraciones manuales con Webpack o Babel.\n\n\n\nnpx create-react-app my-app\ncd my-app\nnpm start\nCon estos comandos, podías crear un proyecto React con CRA y ejecutarlo en un servidor de desarrollo. Sin embargo, CRA tiene algunas desventajas que han llevado a la adopción de herramientas más modernas como Vite.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#desventajas-de-create-react-app",
    "href": "unidades/unidad6/6_introduccion_react.html#desventajas-de-create-react-app",
    "title": "Introducción a React",
    "section": "Desventajas de create-react-app:",
    "text": "Desventajas de create-react-app:\nLentitud: A medida que las aplicaciones crecen, CRA puede volverse lento durante el tiempo de compilación y recarga en caliente.\nSobrecarga de configuración: Aunque CRA oculta la configuración compleja, esta puede ser difícil de personalizar cuando el proyecto lo requiere.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#react-con-vite-ahora",
    "href": "unidades/unidad6/6_introduccion_react.html#react-con-vite-ahora",
    "title": "Introducción a React",
    "section": "React con Vite (Ahora)",
    "text": "React con Vite (Ahora)\nVite es una herramienta de desarrollo moderna que mejora significativamente los tiempos de desarrollo y la experiencia del programador, superando a CRA en términos de velocidad y simplicidad.\n\nVentajas de Vite:\n\nVelocidad: Vite es extremadamente rápido, incluso en proyectos grandes, debido a su compilación basada en ES Modules (módulos de ECMAScript).\nRecarga en caliente instantánea: Vite ofrece Hot Module Replacement (HMR), que recarga solo los módulos que cambian, proporcionando un entorno de desarrollo mucho más ágil.\nConfiguración ligera: La configuración es mínima y fácil de personalizar cuando es necesario.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#crear-un-proyecto-react-con-vite",
    "href": "unidades/unidad6/6_introduccion_react.html#crear-un-proyecto-react-con-vite",
    "title": "Introducción a React",
    "section": "Crear un proyecto React con Vite:",
    "text": "Crear un proyecto React con Vite:\n\n\n\nHoy en día, los desarrolladores de React utilizan Vite para crear proyectos mucho más rápido. Aquí te mostramos cómo hacerlo.\nnpm create vite@latest .\nCon esta sencilla línea de comandos, puedes crear un proyecto React con Vite y comenzar a desarrollar aplicaciones web modernas de forma rápida y eficiente.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNota: Al ejecutar el comando anterior en tu terminal, se abrirá un asistente para configurar tu proyecto con Vite. Puedes elegir entre diferentes plantillas, incluyendo React, Vue, Preact y más. De la misma forma la forma en la que puedes programar ya que es posible utilizar javascrit o typescript.\n\n\nnpm install\nnpm run dev\nCon los comandos anteriores, puedes instalar las dependencias y ejecutar el servidor de desarrollo de Vite para comenzar a trabajar en tu proyecto React.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#componentes-en-react",
    "href": "unidades/unidad6/6_introduccion_react.html#componentes-en-react",
    "title": "Introducción a React",
    "section": "3.1. Componentes en React",
    "text": "3.1. Componentes en React\n\n\n\nLos componentes son bloques reutilizables que contienen lógica, estructura y estilo. En React, un componente puede ser:\nFuncional: Es el enfoque moderno en React. Son componentes escritos como funciones de JavaScript.\nDe clase: Son el enfoque anterior, basados en la programación orientada a objetos. Aún se usan en proyectos más antiguos.\nEn la sección anterior, creamos un componente funcional llamado Greeting. Ahora, vamos a importar y usar este componente en el archivo App.js.\nimport Greeting from './components/Greeting';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Greeting /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\nPara correr el proyecto ejecutamos el comando:\n\n\n\nnpm run dev",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#jsx-javascript-html",
    "href": "unidades/unidad6/6_introduccion_react.html#jsx-javascript-html",
    "title": "Introducción a React",
    "section": "3.2. JSX: JavaScript + HTML",
    "text": "3.2. JSX: JavaScript + HTML\n\n\n\nJSX es una extensión de JavaScript que permite escribir HTML dentro de archivos JavaScript. Esto facilita la creación de componentes y mejora la legibilidad del código.\n\n\n\n&lt;h1&gt;¡Hola, mundo!&lt;/h1&gt;\nJSX se compila a llamadas de funciones de React que crean elementos de React.\nPor ejemplo, el código JSX anterior se compila a:\nReact.createElement('h1', null, '¡Hola, mundo!');\nSin embargo no es necesario preocuparse por esto ya que React se encarga de hacerlo por nosotros.\n\n\n\n\n\n\nTip\n\n\n\nNota: Los elementos JSX deben tener un solo contenedor raíz. Si necesitas devolver varios elementos, puedes envolverlos en un contenedor div o usar Fragment.\n\n\nEjemplo de Fragment:\n\n\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;h1&gt;¡Hola, mundo!&lt;/h1&gt;\n      &lt;p&gt;Bienvenido a mi aplicación.&lt;/p&gt;\n    &lt;/&gt;\n  );\n}\nEn el ejemplo anterior, usamos Fragment para envolver múltiples elementos sin necesidad de un contenedor adicional.\n\n\n\nPara poder probar este ejemplo es necesario modificar el archivo App.js. y correr el servidor de desarrollo.\nnpm run dev",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#props-y-estado",
    "href": "unidades/unidad6/6_introduccion_react.html#props-y-estado",
    "title": "Introducción a React",
    "section": "3.3. Props y Estado",
    "text": "3.3. Props y Estado\n\n\n\nProps: Son los “argumentos” que los componentes reciben para configurar su contenido o comportamiento.\nPara entender mejor cómo funcionan las props, vamos a modificar el componente Greeting para que reciba un prop llamado name.\nEn el directorio components, modificamos el archivo llamado Greeting.jsx con el siguiente contenido:\n\n\n\nexport default function Greeting(props) {\n  return &lt;h1&gt;¡Hola, {props.name}!&lt;/h1&gt;;\n}\nMuy bien ahora vamos a modificar el archivo App.js para que el componente Greeting reciba el prop name.\nimport Greeting from './components/Greeting';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Greeting name=\"Diego\" /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\nEn el ejemplo anterior, pasamos el prop name con el valor “Diego” al componente Greeting. Esto permite personalizar el saludo que se muestra en la pantalla.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#hooks",
    "href": "unidades/unidad6/6_introduccion_react.html#hooks",
    "title": "Introducción a React",
    "section": "3.4. Hooks",
    "text": "3.4. Hooks\n\n\n\nLos hooks fueron introducidos en React 16.8 y son funciones que permiten a los componentes funcionales gestionar el estado y otros efectos del ciclo de vida, funcionalidades que anteriormente solo estaban disponibles en los componentes de clase.\nuseState: Gestiona el estado dentro de un componente funcional.\nuseEffect: Maneja efectos secundarios, como llamadas a APIs o actualizaciones del DOM.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#ejemplo-con-usestate-y-useeffect",
    "href": "unidades/unidad6/6_introduccion_react.html#ejemplo-con-usestate-y-useeffect",
    "title": "Introducción a React",
    "section": "Ejemplo con useState y useEffect:",
    "text": "Ejemplo con useState y useEffect:\n\n\n\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `Has hecho clic ${count} veces`;\n  }, [count]); // Se ejecuta cada vez que 'count' cambia\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Has hecho clic {count} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Haz clic&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\nEn el código anterior, usamos useState para inicializar el estado count en 0 y setCount para actualizarlo. También usamos useEffect para actualizar el título de la página cada vez que count cambia.\nPara entender mejor este concepto vamo a crear un nuevo componente llamado Clasificador de Edades.\n\n\n\nEn el directorio components, creamos un archivo llamado AgeClassifier.jsx con el siguiente contenido:\nimport { useState } from 'react';\n\nexport default function AgeClassifier() {\n  const [age, setAge] = useState(0);\n  const [classification, setClassification] = useState('');\n\n  function classifyAge() {\n    if (age &lt; 18) {\n      setClassification('Menor de edad');\n    } else {\n      setClassification('Mayor de edad');\n    }\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"number\"\n        value={age}\n        onChange={(e) =&gt; setAge(parseInt(e.target.value))}\n      /&gt;\n      &lt;button onClick={classifyAge}&gt;Clasificar Edad&lt;/button&gt;\n      &lt;p&gt;{classification}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\nEn el código anterior, usamos useState para inicializar el estado age en 0 y classification en una cadena vacía. Luego, definimos una función classifyAge que clasifica la edad en “Menor de edad” o “Mayor de edad” según el valor de age. Finalmente, mostramos un campo de entrada para la edad, un botón para clasificarla y un mensaje con la clasificación.\nPara probar este componente, vamos a importarlo y usarlo en el archivo App.js.\n\n\n\nimport AgeClassifier from './components/AgeClassifier';\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;AgeClassifier /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\nAhora, al correr el servidor de desarrollo, podrás ver el componente AgeClassifier en acción.\nnpm run dev\nCon este ejercicio hemos aprendido a usar los hooks useState y useEffect en un componente funcional de React. Estos hooks son fundamentales para gestionar el estado y los efectos secundarios en aplicaciones React modernas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#diferencias-entre-el-uso-antiguo-y-el-actual-de-react",
    "href": "unidades/unidad6/6_introduccion_react.html#diferencias-entre-el-uso-antiguo-y-el-actual-de-react",
    "title": "Introducción a React",
    "section": "4. Diferencias entre el Uso Antiguo y el Actual de React",
    "text": "4. Diferencias entre el Uso Antiguo y el Actual de React\nAntes: Componentes de Clase\nEn versiones anteriores, los desarrolladores usaban componentes de clase para manejar el estado y el ciclo de vida de los componentes.\nclass Greeting extends React.Component {\n  render() {\n    return &lt;h1&gt;¡Hola, {this.props.name}!&lt;/h1&gt;;\n  }\n}\nAhora: Componentes Funcionales con Hooks\nHoy en día, la norma es usar componentes funcionales con hooks, ya que son más concisos y fáciles de trabajar.\nfunction Greeting({ name }) {\n  return &lt;h1&gt;¡Hola, {name}!&lt;/h1&gt;;\n}",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#ventajas-del-enfoque-moderno-con-hooks",
    "href": "unidades/unidad6/6_introduccion_react.html#ventajas-del-enfoque-moderno-con-hooks",
    "title": "Introducción a React",
    "section": "Ventajas del enfoque moderno con Hooks:",
    "text": "Ventajas del enfoque moderno con Hooks:\nMenos código: Los componentes funcionales con hooks son más cortos y claros.\nManejo de estado más simple: useState y otros hooks ofrecen una forma directa y sencilla de gestionar el estado y el ciclo de vida.\nMejor rendimiento: React puede optimizar mejor los componentes funcionales.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#crear-un-proyecto-con-vite",
    "href": "unidades/unidad6/6_introduccion_react.html#crear-un-proyecto-con-vite",
    "title": "Introducción a React",
    "section": "1. Crear un Proyecto con Vite",
    "text": "1. Crear un Proyecto con Vite\nPara comenzar, vamos a crear un nuevo proyecto React con Vite. Abre tu terminal y ejecuta el siguiente comando:\nnpm create vite@latest todo-list\ncd todo-list\nnpm install\nEste comando creará un nuevo proyecto React con Vite llamado todo-list y lo instalará en tu directorio actual.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#crear-componentes",
    "href": "unidades/unidad6/6_introduccion_react.html#crear-componentes",
    "title": "Introducción a React",
    "section": "2. Crear Componentes",
    "text": "2. Crear Componentes\n\n\n\nEn el directorio src/components, crea un nuevo archivo llamado TodoList.jsx con el siguiente contenido:\nimport { useState } from 'react';\n\nexport default function TodoList() {\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState('');\n\n  function addTask() {\n    if (newTask.trim() !== '') {\n      setTasks([...tasks, { id: tasks.length + 1, text: newTask, completed: false }]);\n      setNewTask('');\n    }\n  }\n\n  function deleteTask(id) {\n    setTasks(tasks.filter((task) =&gt; task.id !== id));\n  }\n\n  function toggleTask(id) {\n    setTasks(tasks.map((task) =&gt; {\n      if (task.id === id) {\n        return { ...task, completed: !task.completed };\n      }\n      return task;\n    }));\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Lista de Tareas&lt;/h1&gt;\n      &lt;input\n        type=\"text\"\n        value={newTask}\n        onChange={(e) =&gt; setNewTask(e.target.value)}\n        placeholder=\"Nueva tarea\"\n      /&gt;\n      &lt;button onClick={addTask}&gt;Agregar Tarea&lt;/button&gt;\n      &lt;ul&gt;\n        {tasks.map((task) =&gt; (\n          &lt;li key={task.id}&gt;\n            &lt;input\n              type=\"checkbox\"\n              checked={task.completed}\n              onChange={() =&gt; toggleTask(task.id)}\n            /&gt;\n            &lt;span style={{ textDecoration: task.completed ? 'line-through' : 'none' }}&gt;\n              {task.text}\n            &lt;/span&gt;\n            &lt;button onClick={() =&gt; deleteTask(task.id)}&gt;Eliminar&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\nEn el código anterior, creamos un componente funcional TodoList que gestiona una lista de tareas. Usamos el hook useState para mantener el estado de las tareas y la nueva tarea que se está escribiendo. También definimos funciones para agregar, eliminar y marcar tareas como completadas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#usar-el-componente-todolist",
    "href": "unidades/unidad6/6_introduccion_react.html#usar-el-componente-todolist",
    "title": "Introducción a React",
    "section": "3. Usar el Componente TodoList",
    "text": "3. Usar el Componente TodoList\nEn el archivo src/App.js, importa y usa el componente TodoList que acabamos de crear:\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;TodoList /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/6_introduccion_react.html#ejecutar-el-proyecto",
    "href": "unidades/unidad6/6_introduccion_react.html#ejecutar-el-proyecto",
    "title": "Introducción a React",
    "section": "4. Ejecutar el Proyecto",
    "text": "4. Ejecutar el Proyecto\nFinalmente, ejecuta el servidor de desarrollo para ver tu aplicación de lista de tareas en acción:\nnpm run dev\nCon estos pasos, has creado una aplicación de lista de tareas funcional con React y Vite. Puedes agregar, eliminar y marcar tareas como completadas, demostrando cómo los componentes, el estado y los hooks de React trabajan juntos para crear aplicaciones web interactivas y dinámicas.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Introducción a React</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#crear-un-proyecto-react-con-vite-y-tailwind-css",
    "href": "unidades/unidad6/7_fetch_con_react.html#crear-un-proyecto-react-con-vite-y-tailwind-css",
    "title": "Consumir una API con React con Fetch.",
    "section": "1. Crear un Proyecto React con Vite y Tailwind CSS",
    "text": "1. Crear un Proyecto React con Vite y Tailwind CSS\nVamos a crear un proyecto React utilizando Vite y configuraremos Tailwind CSS para el estilizado.\n\nPasos:\n\nCrear un nuevo proyecto con Vite:\nAbre tu terminal y ejecuta:\nmkdir my-fake-store\ncd my-fake-store\nnpm create vite@latest .\n\n\nInstalar las dependencias:\nInstala las dependencias necesarias para el proyecto:\nnpm install\n\n\nInstalar Tailwind CSS:\nEjecuta los siguientes comandos para instalar Tailwind CSS y sus dependencias:\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\n\n\nConfigurar Tailwind CSS:\nAgrega las rutas a los archivos de tu proyecto en el archivo tailwind.config.cjs:\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './index.html',\n    './src/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\n\nAñadir directivas de Tailwind CSS:\nCrea un archivo src/index.css (si no existe) y añade las directivas de Tailwind CSS:\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n\nIniciar el servidor de desarrollo:\nEjecuta el siguiente comando para iniciar el servidor de desarrollo:\nnpm run dev\nAbre tu navegador en http://localhost:5173 para ver la aplicación en funcionamiento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#estructura-del-proyecto",
    "href": "unidades/unidad6/7_fetch_con_react.html#estructura-del-proyecto",
    "title": "Consumir una API con React con Fetch.",
    "section": "2. Estructura del Proyecto",
    "text": "2. Estructura del Proyecto\nSepararemos la lógica de la aplicación en componentes más pequeños:\n\nProductCard: Componente que mostrará cada producto individual.\nProductList: Componente que gestionará la lista de productos.\n\nLa estructura de directorios será:\nsrc/\n│\n├── components/\n│   ├── ProductCard.jsx\n│   └── ProductList.jsx\n└── App.jsx",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#creación-de-los-componentes",
    "href": "unidades/unidad6/7_fetch_con_react.html#creación-de-los-componentes",
    "title": "Consumir una API con React con Fetch.",
    "section": "3. Creación de los Componentes",
    "text": "3. Creación de los Componentes\n\nProductCard.jsx\nEste componente mostrará la información de cada producto de manera estilizada con Tailwind CSS.\nimport React from 'react';\n\nfunction ProductCard({ product }) {\n  return (\n    &lt;div className=\"border border-gray-200 p-4 rounded-lg shadow-sm hover:shadow-lg transition duration-300\"&gt;\n      &lt;img \n        className=\"w-32 h-32 object-contain mx-auto\"\n        src={product.image} \n        alt={product.title} \n      /&gt;\n      &lt;h3 className=\"text-lg font-semibold mt-4\"&gt;{product.title}&lt;/h3&gt;\n      &lt;p className=\"text-gray-500 mt-2\"&gt;{product.category}&lt;/p&gt;\n      &lt;p className=\"text-green-600 font-bold mt-2\"&gt;{product.price} USD&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductCard;\n\n\nProductList.jsx\nEste componente gestionará la lógica de la API y renderizará los productos usando el componente ProductCard.\nimport React, { useState, useEffect } from 'react';\nimport ProductCard from './ProductCard';\n\nfunction ProductList() {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchProducts = async () =&gt; {\n    try {\n      const response = await fetch('https://fakestoreapi.com/products');\n      if (!response.ok) {\n        throw new Error('Algo salió mal al obtener los productos');\n      }\n      const data = await response.json();\n      setProducts(data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() =&gt; {\n    fetchProducts();\n  }, []);\n\n  if (loading) return &lt;p className=\"text-center text-gray-500\"&gt;Cargando productos...&lt;/p&gt;;\n  if (error) return &lt;p className=\"text-center text-red-500\"&gt;Error: {error}&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\"&gt;\n      {products.map((product) =&gt; (\n        &lt;ProductCard key={product.id} product={product} /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductList;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#integración-en-app.jsx",
    "href": "unidades/unidad6/7_fetch_con_react.html#integración-en-app.jsx",
    "title": "Consumir una API con React con Fetch.",
    "section": "4. Integración en App.jsx",
    "text": "4. Integración en App.jsx\nFinalmente, integra el componente ProductList dentro de tu archivo App.jsx.\nimport React from 'react';\nimport ProductList from './components/ProductList';\n\nfunction App() {\n  return (\n    &lt;div className=\"container mx-auto px-4 py-8\"&gt;\n      &lt;h1 className=\"text-3xl font-bold text-center mb-8\"&gt;Productos de Fake Store&lt;/h1&gt;\n      &lt;ProductList /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#estilizado-con-tailwind-css",
    "href": "unidades/unidad6/7_fetch_con_react.html#estilizado-con-tailwind-css",
    "title": "Consumir una API con React con Fetch.",
    "section": "5. Estilizado con Tailwind CSS",
    "text": "5. Estilizado con Tailwind CSS\nTailwind CSS te permite estilizar la aplicación de manera eficiente. Aquí hay un desglose de algunas clases utilizadas:\n\ngrid-cols-1 sm:grid-cols-2 lg:grid-cols-4: Define la cuadrícula con 1 columna por defecto, 2 columnas en pantallas medianas, y 4 columnas en pantallas grandes.\nborder, rounded-lg, shadow-sm: Añaden bordes, esquinas redondeadas y sombras suaves.\ntransition, hover:shadow-lg: Crea un efecto de transición en el hover.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#ejecución-del-proyecto",
    "href": "unidades/unidad6/7_fetch_con_react.html#ejecución-del-proyecto",
    "title": "Consumir una API con React con Fetch.",
    "section": "6. Ejecución del Proyecto",
    "text": "6. Ejecución del Proyecto\nCon todo el código en su lugar, puedes ejecutar tu aplicación:\nnpm run dev\nVisita http://localhost:5173 en tu navegador para ver la lista de productos de la Fake Store API estilizados con Tailwind CSS.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#agregar-el-cambio-de-tema-de-oscuro-a-claro",
    "href": "unidades/unidad6/7_fetch_con_react.html#agregar-el-cambio-de-tema-de-oscuro-a-claro",
    "title": "Consumir una API con React con Fetch.",
    "section": "Agregar el Cambio de Tema de Oscuro a Claro",
    "text": "Agregar el Cambio de Tema de Oscuro a Claro\nPara implementar la funcionalidad de cambio de tema entre oscuro y claro, sigue estos pasos:\n\nActualiza App.jsx:\nUtiliza el siguiente código en tu archivo App.jsx para manejar el cambio de tema y aplicar estilos condicionales:\nimport React, { useState } from 'react';\nimport ProductList from './components/ProductList';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n\n  return (\n    &lt;div className={`min-h-screen ${darkMode ? 'dark' : ''}`}&gt;\n      &lt;div className=\"container mx-auto px-4 py-8\"&gt;\n        &lt;div className=\"flex justify-end mb-4\"&gt;\n          &lt;button\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-lg dark:bg-gray-800 dark:text-gray-200\"\n            onClick={() =&gt; setDarkMode(!darkMode)}\n          &gt;\n            {darkMode ? 'Modo Claro' : 'Modo Oscuro'}\n          &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;h1 className=\"text-3xl font-bold text-center mb-8 text-gray-900 dark:text-gray-100\"&gt;\n          Productos de Fake Store\n        &lt;/h1&gt;\n        &lt;ProductList /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n\n\nCambios importantes:\n\nSe añadió min-h-screen para asegurar que el contenedor principal ocupe toda la altura de la pantalla.\nSe actualizaron las clases del botón y del encabezado para manejar el cambio de estilo en modo oscuro.\n\n\n\nAsegúrate de Configurar Tailwind para el Modo Oscuro:\nVerifica que tu archivo tailwind.config.cjs esté configurado correctamente para soportar el modo oscuro:\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: 'class', // Habilita el modo oscuro utilizando la clase 'dark'\n  content: [\n    './index.html',\n    './src/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\nEsta configuración permite que el modo oscuro se active añadiendo la clase dark al contenedor principal.\n\n\nActualiza los Estilos en los Componentes:\nAsegúrate de que todos los componentes respondan al modo oscuro. Por ejemplo, en ProductCard.jsx:\nimport React from 'react';\n\nfunction ProductCard({ product }) {\n  return (\n    &lt;div className=\"border border-gray-200 dark:border-gray-700 p-4 rounded-lg shadow-sm hover:shadow-lg transition duration-300 dark:bg-gray-800\"&gt;\n      &lt;img \n        className=\"w-32 h-32 object-contain mx-auto\"\n        src={product.image} \n        alt={product.title} \n      /&gt;\n      &lt;h3 className=\"text-lg font-semibold mt-4 text-gray-900 dark:text-gray-100\"&gt;\n        {product.title}\n      &lt;/h3&gt;\n      &lt;p className=\"text-gray-500 mt-2 dark:text-gray-400\"&gt;{product.category}&lt;/p&gt;\n      &lt;p className=\"text-green-600 font-bold mt-2\"&gt;{product.price} USD&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductCard;\n\n\nCambios importantes:\n\nSe actualizaron las clases para manejar el estilo en modo oscuro.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/7_fetch_con_react.html#crear-un-build-de-producción",
    "href": "unidades/unidad6/7_fetch_con_react.html#crear-un-build-de-producción",
    "title": "Consumir una API con React con Fetch.",
    "section": "Crear un Build de Producción",
    "text": "Crear un Build de Producción\nPara crear un build optimizado para producción, ejecuta el siguiente comando:\nnpm run build\nEste comando generará una carpeta dist con los archivos optimizados para producción.\n\n\n\n\n\n\nTip\n\n\n\nPara probar el build de producción, puedes usar npx para ejecutar el servidor de pruebas sin necesidad de instalación global.\nEjecuta el siguiente comando:\nnpx serve -s dist\nLuego, abre tu navegador en http://localhost:5000 para ver la aplicación en funcionamiento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Consumir una API con React con Fetch.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#crear-un-proyecto-react-con-vite-y-tailwind-css",
    "href": "unidades/unidad6/9_axios_con_react.html#crear-un-proyecto-react-con-vite-y-tailwind-css",
    "title": "Consumir una API con React con Axios.",
    "section": "1. Crear un Proyecto React con Vite y Tailwind CSS",
    "text": "1. Crear un Proyecto React con Vite y Tailwind CSS\nVamos a crear un proyecto React utilizando Vite y configuraremos Tailwind CSS para el estilizado.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#pasos",
    "href": "unidades/unidad6/9_axios_con_react.html#pasos",
    "title": "Consumir una API con React con Axios.",
    "section": "Pasos:",
    "text": "Pasos:\n\nCrear un nuevo proyecto con Vite:\n\nAbre tu terminal y ejecuta:\nmkdir my-fake-store-axios\ncd my-fake-store-axios\nnpm create vite@latest .\n\nInstalar las dependencias:\n\nInstala las dependencias necesarias para el proyecto:\nnpm install\n\nInstalar Tailwind CSS:\n\nEjecuta los siguientes comandos para instalar Tailwind CSS y sus dependencias:\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init\n\nConfigurar Tailwind CSS:\n\nAgrega las rutas a los archivos de tu proyecto en el archivo tailwind.config.cjs:\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: 'class', // Habilita el modo oscuro utilizando la clase 'dark'\n  content: [\n    './index.html',\n    './src/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\nCrear y configurar postcss.config.cjs:\n\nCrea un archivo postcss.config.cjs en la raíz de tu proyecto y añade el siguiente contenido:\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\nAñadir directivas de Tailwind CSS:\n\nCrea un archivo src/index.css (si no existe) y añade las directivas de Tailwind CSS:\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nIniciar el servidor de desarrollo:\n\nEjecuta el siguiente comando para iniciar el servidor de desarrollo:\nnpm run dev\nAbre tu navegador en http://localhost:5173 para ver la aplicación en funcionamiento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#estructura-del-proyecto",
    "href": "unidades/unidad6/9_axios_con_react.html#estructura-del-proyecto",
    "title": "Consumir una API con React con Axios.",
    "section": "2. Estructura del Proyecto",
    "text": "2. Estructura del Proyecto\nSepararemos la lógica de la aplicación en componentes más pequeños:\n\nProductCard: Componente que mostrará cada producto individual.\nProductList: Componente que gestionará la lista de productos.\n\nLa estructura de directorios será:\nsrc/\n│\n├── components/\n│   ├── ProductCard.jsx\n│   └── ProductList.jsx\n└── App.jsx",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#creación-de-los-componentes",
    "href": "unidades/unidad6/9_axios_con_react.html#creación-de-los-componentes",
    "title": "Consumir una API con React con Axios.",
    "section": "3. Creación de los Componentes",
    "text": "3. Creación de los Componentes\n\nProductCard.jsx\nEste componente mostrará la información de cada producto de manera estilizada con Tailwind CSS.\nimport React from 'react';\n\nfunction ProductCard({ product }) {\n  return (\n    &lt;div className=\"border border-gray-200 dark:border-gray-700 p-4 rounded-lg shadow-sm hover:shadow-lg transition duration-300 dark:bg-gray-800\"&gt;\n      &lt;img \n        className=\"w-32 h-32 object-contain mx-auto\"\n        src={product.image} \n        alt={product.title} \n      /&gt;\n      &lt;h3 className=\"text-lg font-semibold mt-4 text-gray-900 dark:text-gray-100\"&gt;\n        {product.title}\n      &lt;/h3&gt;\n      &lt;p className=\"text-gray-500 mt-2 dark:text-gray-400\"&gt;{product.category}&lt;/p&gt;\n      &lt;p className=\"text-green-600 font-bold mt-2\"&gt;{product.price} USD&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductCard;\n\n\nProductList.jsx\nEste componente gestionará la lógica de la API y renderizará los productos usando el componente ProductCard.\nimport React, { useState, useEffect } from 'react';\nimport ProductCard from './ProductCard';\n\nfunction ProductList() {\n  const [products, setProducts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const fetchProducts = async () =&gt; {\n    try {\n      const response = await fetch('https://fakestoreapi.com/products');\n      if (!response.ok) {\n        throw new Error('Algo salió mal al obtener los productos');\n      }\n      const data = await response.json();\n      setProducts(data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() =&gt; {\n    fetchProducts();\n  }, []);\n\n  if (loading) return &lt;p className=\"text-center text-gray-500\"&gt;Cargando productos...&lt;/p&gt;;\n  if (error) return &lt;p className=\"text-center text-red-500\"&gt;Error: {error}&lt;/p&gt;;\n\n  return (\n    &lt;div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\"&gt;\n      {products.map((product) =&gt; (\n        &lt;ProductCard key={product.id} product={product} /&gt;\n      ))}\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductList;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#integración-en-app.jsx",
    "href": "unidades/unidad6/9_axios_con_react.html#integración-en-app.jsx",
    "title": "Consumir una API con React con Axios.",
    "section": "4. Integración en App.jsx",
    "text": "4. Integración en App.jsx\nFinalmente, integra el componente ProductList dentro de tu archivo App.jsx y añade la funcionalidad de cambio de tema entre oscuro y claro.\nimport React, { useState } from 'react';\nimport ProductList from './components/ProductList';\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState(false);\n\n  return (\n    &lt;div className={`min-h-screen ${darkMode ? 'dark' : ''}`}&gt;\n      &lt;div className=\"container mx-auto px-4 py-8\"&gt;\n        &lt;div className=\"flex justify-end mb-4\"&gt;\n          &lt;button\n            className=\"px-4 py-2 bg-gray-200 text-gray-800 rounded-lg dark:bg-gray-800 dark:text-gray-200\"\n            onClick={() =&gt; setDarkMode(!darkMode)}\n          &gt;\n            {darkMode ? 'Modo Claro' : 'Modo Oscuro'}\n          &lt;/button&gt;\n        &lt;/div&gt;\n        &lt;h1 className=\"text-3xl font-bold text-center mb-8 text-gray-900 dark:text-gray-100\"&gt;\n          Productos de Fake Store\n        &lt;/h1&gt;\n        &lt;ProductList /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#estilizado-con-tailwind-css",
    "href": "unidades/unidad6/9_axios_con_react.html#estilizado-con-tailwind-css",
    "title": "Consumir una API con React con Axios.",
    "section": "5. Estilizado con Tailwind CSS",
    "text": "5. Estilizado con Tailwind CSS\nTailwind CSS te permite estilizar la aplicación de manera eficiente. Aquí hay un desglose de algunas clases utilizadas:\n\nmin-h-screen: Asegura que el contenedor principal ocupe toda la altura de la pantalla.\ndark: Clase utilizada para activar el modo oscuro.\nborder, rounded-lg, shadow-sm: Añaden bordes, esquinas redondeadas y sombras suaves.\ntransition, hover:shadow-lg: Crea un efecto de transición en el hover.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/9_axios_con_react.html#ejecución-del-proyecto",
    "href": "unidades/unidad6/9_axios_con_react.html#ejecución-del-proyecto",
    "title": "Consumir una API con React con Axios.",
    "section": "6. Ejecución del Proyecto",
    "text": "6. Ejecución del Proyecto\nCon todo el código en su lugar, puedes ejecutar tu aplicación:\nnpm run dev\nVisita http://localhost:5173 en tu navegador para ver la lista de productos de la Fake Store API estilizados con Tailwind CSS.\n\nCrear un Build de Producción\nPara crear un build optimizado para producción, ejecuta el siguiente comando:\nnpm run build\nEste comando generará una carpeta dist con los archivos optimizados para producción.\n\n\n\n\n\n\nTip\n\n\n\nPara probar el build de producción, puedes usar npx para ejecutar el servidor de pruebas sin necesidad de instalación global.\nEjecuta el siguiente comando:\nnpx serve -s dist\nLuego, abre tu navegador en http://localhost:5000 para ver la aplicación en funcionamiento.",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Consumir una API con React con Axios.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/10_crud_react.html#requisitos-previos",
    "href": "unidades/unidad6/10_crud_react.html#requisitos-previos",
    "title": "CRUD en React con API REST",
    "section": "Requisitos previos",
    "text": "Requisitos previos\n\nNode.js y npm (o yarn, o pnpm) instalados en tu sistema.\nConocimientos básicos de React y JavaScript.\nBackend (API) funcionando, por ejemplo, usando Django REST API u otra API compatible.\n\n\nInicializa el proyecto de React\n\nPrimero, necesitas crear un proyecto de React. Vamos a usar npm create vite@latest para hacerlo de forma rápida:\nnpm create vite@latest nombre-del-proyecto\nSigue las indicaciones y selecciona react como plantilla. Luego navega al directorio del proyecto e instala las dependencias necesarias:\ncd nombre-del-proyecto\nnpm install\n\nConfigura Axios para las solicitudes a la API\n\nAxios es una librería que facilita las solicitudes HTTP. Crea un archivo api.js en la carpeta src/utils para configurar Axios con la URL base de tu API:\nmkdir -p src/utils\ntouch src/utils/api.js\nAhora, edita el archivo api.js:\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'http://localhost:8000/api',\n});\n\nexport default api;\nEste archivo configura Axios con la base de la URL de tu API, facilitando la reutilización de este cliente HTTP en toda tu aplicación.\n\nConfigura las rutas y el sistema de navegación con react-router-dom\n\nPara manejar las rutas de la aplicación, instala react-router-dom:\nnpm install react-router-dom\nModifica tu archivo src/App.jsx para agregar rutas:\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport ProductList from './components/ProductList';\nimport ProductDetail from './components/ProductDetail';\nimport ProductForm from './components/ProductForm';\n\nconst App = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;nav&gt;\n        &lt;ul&gt;\n          &lt;li&gt;&lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;Link to=\"/products\"&gt;Lista de Productos&lt;/Link&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;Link to=\"/products/new\"&gt;Agregar Producto&lt;/Link&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/products\" element={&lt;ProductList /&gt;} /&gt;\n        &lt;Route path=\"/products/new\" element={&lt;ProductForm /&gt;} /&gt;\n        &lt;Route path=\"/products/edit/:id\" element={&lt;ProductForm /&gt;} /&gt;\n        &lt;Route path=\"/products/:id\" element={&lt;ProductDetail /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n};\n\nconst Home = () =&gt; (\n  &lt;div&gt;\n    &lt;h1&gt;CRUD en React con API REST&lt;/h1&gt;\n    &lt;p&gt;Esta es una aplicación de ejemplo para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en una API REST con React.&lt;/p&gt;\n    &lt;p&gt;Dirígete a &lt;Link to=\"/products\"&gt;Productos&lt;/Link&gt; para comenzar.&lt;/p&gt;\n  &lt;/div&gt;\n);\n\nexport default App;\nAquí estamos usando react-router-dom para definir nuestras rutas. Tenemos rutas para listar los productos, crear uno nuevo, editar un producto existente y ver los detalles de un producto específico. También hemos agregado una ruta para una página de inicio con instrucciones.\n\nCrea el componente ProductList (Leer)\n\nEste componente mostrará una lista de productos obtenidos de la API:\nmkdir -p src/components\ntouch src/components/ProductList.jsx\nAhora, edita ProductList.jsx para obtener y mostrar la lista de productos:\n// src/components/ProductList.js\nimport { useEffect, useState } from 'react';\nimport axiosInstance from './utils/api';\nimport { Link } from 'react-router-dom';\nimport './ProductList.css'; // Importa el CSS para ProductList\n\nconst ProductList = () =&gt; {\n  const [products, setProducts] = useState([]);\n\n  useEffect(() =&gt; {\n    axiosInstance.get('/productos/')\n      .then(response =&gt; {\n        setProducts(response.data);\n      })\n      .catch(error =&gt; {\n        console.error('Error al obtener los productos:', error);\n      });\n  }, []);\n\n  const handleDelete = (id) =&gt; {\n    if (window.confirm('¿Estás seguro de que quieres eliminar este producto?')) {\n      axiosInstance.delete(`/productos/${id}/`)\n        .then(() =&gt; {\n          setProducts(products.filter(product =&gt; product.id !== id));\n        })\n        .catch(error =&gt; {\n          console.error(\"Error al eliminar el producto: \", error.response ? error.response.data : error.message);\n        });\n    }\n  };\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1&gt;Lista de Productos&lt;/h1&gt;\n      &lt;ul&gt;\n        {products.map(product =&gt; (\n          &lt;li key={product.id}&gt;\n            &lt;Link to={`/products/${product.id}`}&gt;{product.nombre}&lt;/Link&gt;\n            &lt;Link to={`/products/edit/${product.id}`} className=\"edit\"&gt;Editar&lt;/Link&gt;\n            &lt;button onClick={() =&gt; handleDelete(product.id)} className=\"delete\"&gt;\n              Eliminar\n            &lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\nUtilizamos useEffect para hacer la solicitud GET a la API cuando el componente se monta. Los productos obtenidos se almacenan en el estado products y se muestran en una lista con enlaces a los detalles de cada producto.\n\nCrea el componente ProductDetail (Leer uno y eliminar)\n\nEste componente mostrará los detalles de un producto específico y permitirá eliminarlo:\ntouch src/components/ProductDetail.jsx\nEdita ProductDetail.jsx:\nimport { useEffect, useState } from 'react';\nimport axiosInstance from './utils/api'; // Asegúrate de que esta ruta sea correcta\nimport { useParams } from 'react-router-dom'; // Para obtener el id del producto\n\nconst ProductDetail = () =&gt; {\n  const { id } = useParams(); // Extrae el id desde la URL\n  const [product, setProduct] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() =&gt; {\n    axiosInstance.get(`/productos/${id}/`) // Petición para obtener detalles del producto\n      .then(response =&gt; {\n        setProduct(response.data); // Guarda el producto en el estado\n      })\n      .catch(error =&gt; {\n        console.error('Error al obtener los detalles del producto:', error);\n        setError('Error al obtener los detalles del producto.');\n      });\n  }, [id]);\n\n  if (error) return &lt;div style={{ color: 'red' }}&gt;{error}&lt;/div&gt;;\n  if (!product) return &lt;div&gt;Cargando...&lt;/div&gt;;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{product.nombre}&lt;/h1&gt;\n      &lt;p&gt;Precio: {product.precio}&lt;/p&gt;\n      &lt;p&gt;Cantidad: {product.cantidad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductDetail;\nAquí usamos useParams para obtener el ID del producto de la URL. Hacemos una solicitud GET para obtener los detalles del producto y mostramos su nombre y descripción. También tenemos una función handleDelete que elimina el producto y redirige a la lista de productos.\n\nCrea el componente ProductForm (Crear y Actualizar)\n\nEste componente servirá tanto para crear un nuevo producto como para editar uno existente:\ntouch src/components/ProductForm.jsx\nEdita ProductForm.jsx:\nimport { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport axiosInstance from './utils/api';  // Asegúrate de que la ruta de importación sea correcta\nimport './ProductForm.css';\n\nconst ProductForm = () =&gt; {\n  const [nombre, setNombre] = useState('');\n  const [precio, setPrecio] = useState('');\n  const [cantidad, setCantidad] = useState(1);  // Campo cantidad predeterminado\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n  const navigate = useNavigate();\n\n  useEffect(() =&gt; {\n    if (id) {\n      axiosInstance.get(`/productos/${id}/`)\n        .then(response =&gt; {\n          const product = response.data;\n          setNombre(product.nombre);\n          setPrecio(product.precio);\n          setCantidad(product.cantidad);\n        })\n        .catch(error =&gt; {\n          console.error(\"Error al obtener los detalles del producto: \", error);\n          setError('Error al obtener los detalles del producto.');\n        });\n    }\n  }, [id]);\n\n  const handleSubmit = (e) =&gt; {\n    e.preventDefault();\n    \n    // Validación de campos (especialmente precios)\n    if (isNaN(precio) || isNaN(cantidad) || parseFloat(precio) &lt;= 0 || parseInt(cantidad) &lt;= 0) {\n      setError('Por favor, ingrese valores válidos para el precio y la cantidad.');\n      return;\n    }\n\n    const product = { nombre, precio: parseFloat(precio), cantidad: parseInt(cantidad) };\n\n    if (id) {\n      axiosInstance.put(`/productos/${id}/`, product)\n        .then(() =&gt; {\n          navigate(`/products/${id}`);\n        })\n        .catch(error =&gt; {\n          console.error(\"Error al actualizar el producto: \", error.response ? error.response.data : error.message);\n          setError(`Error al actualizar el producto: ${error.response ? error.response.data : error.message}`);\n        });\n    } else {\n      axiosInstance.post('/productos/', product)\n        .then(() =&gt; {\n          navigate('/products');\n        })\n        .catch(error =&gt; {\n          console.error(\"Error al crear el producto: \", error.response ? error.response.data : error.message);\n          setError(`Error al crear el producto: ${error.response ? error.response.data : error.message}`);\n        });\n    }\n  };\n\n  const handleDelete = () =&gt; {\n    if (id) {\n      axiosInstance.delete(`/productos/${id}/`)\n        .then(() =&gt; {\n          navigate('/products');\n        })\n        .catch(error =&gt; {\n          console.error(\"Error al eliminar el producto: \", error.response ? error.response.data : error.message);\n          setError(`Error al eliminar el producto: ${error.response ? error.response.data : error.message}`);\n        });\n    }\n  };\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1&gt;{id ? 'Editar Producto' : 'Crear Producto'}&lt;/h1&gt;\n      {error && &lt;p className=\"error\"&gt;{error}&lt;/p&gt;}\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;div&gt;\n          &lt;label&gt;Nombre&lt;/label&gt;\n          &lt;input\n            type=\"text\"\n            value={nombre}\n            onChange={(e) =&gt; setNombre(e.target.value)}\n            required\n          /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;label&gt;Precio&lt;/label&gt;\n          &lt;input\n            type=\"number\"\n            step=\"0.01\"\n            value={precio}\n            onChange={(e) =&gt; setPrecio(e.target.value)}\n            required\n          /&gt;\n        &lt;/div&gt;\n        &lt;div&gt;\n          &lt;label&gt;Cantidad&lt;/label&gt;\n          &lt;input\n            type=\"number\"\n            value={cantidad}\n            onChange={(e) =&gt; setCantidad(e.target.value)}\n            required\n          /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\" className={id ? 'edit' : ''}&gt;{id ? 'Actualizar' : 'Crear'}&lt;/button&gt;\n        {id && (\n          &lt;button type=\"button\" className=\"delete\" onClick={handleDelete}&gt;Eliminar&lt;/button&gt;\n        )}\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductForm;\nEn este componente, si hay un id en la URL, cargamos los datos del producto para editarlo. Si no hay un id, el formulario se usa para crear un nuevo producto. La función handleSubmit envía una solicitud POST (para crear) o PUT (para actualizar) a la API según el caso. También tenemos un botón para eliminar el producto si estamos editando uno existente.\n\nEstilos opcionales\n\nPara que la interfaz sea más atractiva, puedes agregar algunos estilos CSS personalizados. Crea un archivo src/components/ProductForm.css para agregar estilos específicos para el formulario.\n.container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f9f9f9;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n  font-size: 24px;\n  margin-bottom: 20px;\n  color: #333;\n}\n\nform {\n  display: flex;\n  flex-direction: column;\n}\n\ndiv {\n  margin-bottom: 15px;\n}\n\nlabel {\n  font-weight: bold;\n  margin-bottom: 5px;\n  color: #555;\n}\n\ninput[type=\"text\"],\ninput[type=\"number\"] {\n  width: 100%;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  font-size: 16px;\n  box-sizing: border-box; /* Ensures padding is included in the width */\n}\n\nbutton {\n  padding: 10px;\n  border: none;\n  border-radius: 4px;\n  color: #fff;\n  cursor: pointer;\n  font-size: 16px;\n  margin-right: 10px;\n  transition: background-color 0.3s ease;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.delete {\n  background-color: #dc3545;\n}\n\n.delete:hover {\n  background-color: #c82333;\n}\n\n.edit {\n  background-color: #007bff;\n}\n\n.edit:hover {\n  background-color: #0056b3;\n}\n\n.error {\n  color: #dc3545;\n  font-size: 14px;\n  margin-top: 10px;\n}\nAhora creamos el archivo CSS para ProductList:\ntouch src/components/ProductList.css\nEdita src/components/ProductList.css:\n/* src/components/ProductList.css */\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  h1 {\n    margin-bottom: 20px;\n  }\n  \n  ul {\n    list-style-type: none;\n    padding: 0;\n  }\n  \n  li {\n    margin-bottom: 15px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n  }\n  \n  button {\n    margin-left: 10px;\n    padding: 5px 10px;\n    border: none;\n    cursor: pointer;\n    border-radius: 5px;\n    font-size: 14px;\n  }\n  \n  button.edit {\n    background-color: #007bff;\n    color: white;\n  }\n  \n  button.delete {\n    background-color: #dc3545;\n    color: white;\n  }\n  \n  button.edit:hover {\n    background-color: #0056b3;\n  }\n  \n  button.delete:hover {\n    background-color: #c82333;\n  }\n\nIntegra los componentes en App.jsx\n\nFinalmente, integra los componentes ProductList, ProductDetail y ProductForm en tu archivo App.jsx y añade la funcionalidad de cambio de tema entre oscuro y claro.\nimport { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';\nimport ProductList from './components/ProductList';\nimport ProductDetail from './components/ProductDetail';\nimport ProductForm from './components/ProductForm';\n\nconst App = () =&gt; {\n  return (\n    &lt;Router&gt;\n      &lt;nav&gt;\n        &lt;ul&gt;\n          &lt;li&gt;&lt;Link to=\"/\"&gt;Inicio&lt;/Link&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;Link to=\"/products\"&gt;Lista de Productos&lt;/Link&gt;&lt;/li&gt;\n          &lt;li&gt;&lt;Link to=\"/products/new\"&gt;Agregar Producto&lt;/Link&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/nav&gt;\n      &lt;Routes&gt;\n        &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n        &lt;Route path=\"/products\" element={&lt;ProductList /&gt;} /&gt;\n        &lt;Route path=\"/products/new\" element={&lt;ProductForm /&gt;} /&gt;\n        &lt;Route path=\"/products/edit/:id\" element={&lt;ProductForm /&gt;} /&gt;\n        &lt;Route path=\"/products/:id\" element={&lt;ProductDetail /&gt;} /&gt;\n      &lt;/Routes&gt;\n    &lt;/Router&gt;\n  );\n};\n\nconst Home = () =&gt; (\n  &lt;div&gt;\n    &lt;h1&gt;CRUD en React con API REST&lt;/h1&gt;\n    &lt;p&gt;Esta es una aplicación de ejemplo para realizar operaciones CRUD (Crear, Leer, Actualizar, Eliminar) en una API REST con React.&lt;/p&gt;\n    &lt;p&gt;Dirígete a &lt;Link to=\"/products\"&gt;Productos&lt;/Link&gt; para comenzar.&lt;/p&gt;\n  &lt;/div&gt;\n);\n\nexport default App;",
    "crumbs": [
      "Unidad 6: Frontend",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>CRUD en React con API REST</span>"
    ]
  },
  {
    "objectID": "unidades/Proyectos/inventario.html",
    "href": "unidades/Proyectos/inventario.html",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "",
    "text": "Paso 1: Clonar el repositorio\nPrimero, clona el repositorio en tu máquina local. Abre una terminal y ejecuta el siguiente comando:"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-1-clonar-el-repositorio",
    "href": "unidades/Proyectos/inventario.html#paso-1-clonar-el-repositorio",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "",
    "text": "git clone &lt;URL_DEL_REPOSITORIO&gt;\ncd &lt;NOMBRE_DEL_REPOSITORIO&gt;"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-2-crear-y-activar-un-entorno-virtual",
    "href": "unidades/Proyectos/inventario.html#paso-2-crear-y-activar-un-entorno-virtual",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 2: Crear y activar un entorno virtual",
    "text": "Paso 2: Crear y activar un entorno virtual\nEs recomendable usar un entorno virtual para gestionar las dependencias del proyecto.\nPara crear y activar un entorno virtual, ejecuta los siguientes comandos:\npython3 -m venv env\nsource env/bin/activate  # En Windows usa `env\\Scripts\\activate`"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-3-instalar-dependencias",
    "href": "unidades/Proyectos/inventario.html#paso-3-instalar-dependencias",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 3: Instalar dependencias",
    "text": "Paso 3: Instalar dependencias\nInstala las dependencias necesarias que están listadas en el archivo requirements.txt:\npip install -r requirements.txt"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-4-configurar-la-base-de-datos",
    "href": "unidades/Proyectos/inventario.html#paso-4-configurar-la-base-de-datos",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 4: Configurar la base de datos",
    "text": "Paso 4: Configurar la base de datos\nAsegúrate de que la base de datos esté configurada correctamente. Puedes encontrar la configuración en el archivo db/database.py.\nAquí está el código para ese archivo:\nimport sqlite3\n\ndef create_connection():\n    conn = sqlite3.connect(\"inventory.db\")\n    return conn\n\ndef create_table():\n    conn = create_connection()\n    cursor = conn.cursor()\n    cursor.execute('''CREATE TABLE IF NOT EXISTS products (\n                        id INTEGER PRIMARY KEY AUTOINCREMENT,\n                        name TEXT NOT NULL,\n                        quantity INTEGER NOT NULL)''')\n    conn.commit()\n    conn.close()"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-5-ejecutar-la-aplicación",
    "href": "unidades/Proyectos/inventario.html#paso-5-ejecutar-la-aplicación",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 5: Ejecutar la aplicación",
    "text": "Paso 5: Ejecutar la aplicación\nPara ejecutar la aplicación, simplemente ejecuta el archivo main.py:\npython main.py"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-6-entender-la-estructura-del-proyecto",
    "href": "unidades/Proyectos/inventario.html#paso-6-entender-la-estructura-del-proyecto",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 6: Entender la estructura del proyecto",
    "text": "Paso 6: Entender la estructura del proyecto\nFamiliarízate con la estructura del proyecto:\n\ndb/: Contiene la configuración y scripts relacionados con la base de datos.\nenv/: Contiene el entorno virtual.\ninventory/: Contiene los módulos principales de la aplicación, como actions.py y product.py.\nmain.py: Punto de entrada de la aplicación.\nrequirements.txt: Lista de dependencias del proyecto. ## Paso 7: Añadir un producto\n\nPara añadir un producto, puedes modificar el archivo inventory/product.py. Aquí tienes un ejemplo de cómo se define la clase Product:\nclass Product:\n    def __init__(self, name, quantity):\n        self.name = name\n        self.quantity = quantity"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-8-ejecutar-pruebas",
    "href": "unidades/Proyectos/inventario.html#paso-8-ejecutar-pruebas",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 8: Ejecutar pruebas",
    "text": "Paso 8: Ejecutar pruebas\nSi tienes pruebas unitarias configuradas, puedes ejecutarlas para asegurarte de que todo funcione correctamente. Por ejemplo, si usas pytest, puedes ejecutar:\npytest"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-9-crear-una-imagen-docker-opcional",
    "href": "unidades/Proyectos/inventario.html#paso-9-crear-una-imagen-docker-opcional",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 9: Crear una imagen Docker (Opcional)",
    "text": "Paso 9: Crear una imagen Docker (Opcional)\nSi deseas crear una imagen Docker para tu aplicación, puedes usar el Dockerfile incluido. Ejecuta los siguientes comandos:\ndocker build -t nombre_de_tu_imagen .\ndocker run -p 8000:8000 nombre_de_tu_imagen"
  },
  {
    "objectID": "unidades/Proyectos/inventario.html#paso-10-desactivar-el-entorno-virtual",
    "href": "unidades/Proyectos/inventario.html#paso-10-desactivar-el-entorno-virtual",
    "title": "Sistema de Inventario en Consola - Python",
    "section": "Paso 10: Desactivar el entorno virtual",
    "text": "Paso 10: Desactivar el entorno virtual\nCuando termines de trabajar, puedes desactivar el entorno virtual con el siguiente comando:\ndeactivate"
  },
  {
    "objectID": "unidades/ejercicios/lab1.html",
    "href": "unidades/ejercicios/lab1.html",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "",
    "text": "1. Configuración Inicial del Proyecto",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#configuración-inicial-del-proyecto",
    "href": "unidades/ejercicios/lab1.html#configuración-inicial-del-proyecto",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "",
    "text": "1.1. Crear un Proyecto Django\nAbre tu terminal y ejecuta los siguientes comandos para crear un nuevo proyecto Django:\npython -m venv env\nsource env/bin/activate\npip install django==4.2\ndjango-admin startproject ecommerce_project .\ncd ecommerce_project\n\n\n1.2 Crear una Aplicación Django\nDentro del directorio del proyecto, crea una aplicación para manejar el e-commerce:\npython manage.py startapp products\n\n\n1.3 Instalar Django Rest Framework\nInstala DRF usando pip:\npip install djangorestframework\n\n\n1.4 Configurar el Proyecto\nAñade ‘rest_framework’ y tu nueva aplicación ‘products’ a la lista INSTALLED_APPS en ecommerce_project/settings.py:\nINSTALLED_APPS = [\n    # ... otras apps\n    'rest_framework',\n    'products',\n]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#definir-el-modelo-de-datos",
    "href": "unidades/ejercicios/lab1.html#definir-el-modelo-de-datos",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "2. Definir el Modelo de Datos",
    "text": "2. Definir el Modelo de Datos\n\n2.1 Crear Modelos en products/models.py\nDefine los modelos para el e-commerce, como Product, Category, y Order:\nfrom django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, related_name='products', on_delete=models.CASCADE)\n    stock = models.PositiveIntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass Order(models.Model):\n    product = models.ForeignKey(Product, related_name='orders', on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField()\n    total_price = models.DecimalField(max_digits=10, decimal_places=2)\n    order_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Order {self.id} - {self.product.name}\"\n\n\n2.2 Crear y Aplicar Migraciones\nGenera y aplica las migraciones para los modelos:\npython manage.py makemigrations\npython manage.py migrate",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#crear-serializers",
    "href": "unidades/ejercicios/lab1.html#crear-serializers",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "3. Crear Serializers",
    "text": "3. Crear Serializers\n\n3.1 Definir Serializers en products/serializers.py\nLos serializers se encargan de transformar los modelos en formatos JSON y viceversa:\nfrom rest_framework import serializers\nfrom .models import Category, Product, Order\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\n\nclass ProductSerializer(serializers.ModelSerializer):\n    category = CategorySerializer()\n\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass OrderSerializer(serializers.ModelSerializer):\n    product = ProductSerializer()\n\n    class Meta:\n        model = Order\n        fields = '__all__'",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#crear-vistas-y-rutas",
    "href": "unidades/ejercicios/lab1.html#crear-vistas-y-rutas",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4. Crear Vistas y Rutas",
    "text": "4. Crear Vistas y Rutas\n\n4.1 Definir Vistas en products/views.py\nUtiliza las vistas basadas en clases de DRF para crear y manejar las operaciones CRUD:\nfrom rest_framework import generics\nfrom .models import Category, Product, Order\nfrom .serializers import CategorySerializer, ProductSerializer, OrderSerializer\n\nclass CategoryListCreate(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass CategoryDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n\nclass ProductListCreate(generics.ListCreateAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n\nclass ProductDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n\nclass OrderListCreate(generics.ListCreateAPIView):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer\n\nclass OrderDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Order.objects.all()\n    serializer_class = OrderSerializer",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#configurar-rutas-en-productsurls.py",
    "href": "unidades/ejercicios/lab1.html#configurar-rutas-en-productsurls.py",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4.2 Configurar Rutas en products/urls.py",
    "text": "4.2 Configurar Rutas en products/urls.py\nDefine las rutas para acceder a las vistas:\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('categories/', views.CategoryListCreate.as_view(), name='category-list-create'),\n    path('categories/&lt;int:pk&gt;/', views.CategoryDetail.as_view(), name='category-detail'),\n    path('products/', views.ProductListCreate.as_view(), name='product-list-create'),\n    path('products/&lt;int:pk&gt;/', views.ProductDetail.as_view(), name='product-detail'),\n    path('orders/', views.OrderListCreate.as_view(), name='order-list-create'),\n    path('orders/&lt;int:pk&gt;/', views.OrderDetail.as_view(), name='order-detail'),\n]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#incluir-las-urls-en-ecommerce_projecturls.py",
    "href": "unidades/ejercicios/lab1.html#incluir-las-urls-en-ecommerce_projecturls.py",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4.3 Incluir las URLs en ecommerce_project/urls.py",
    "text": "4.3 Incluir las URLs en ecommerce_project/urls.py\nAñade las URLs de la aplicación al archivo principal de URLs del proyecto:\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('products.urls')),\n]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#probar-la-api",
    "href": "unidades/ejercicios/lab1.html#probar-la-api",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "5. Probar la API",
    "text": "5. Probar la API\n\n5.1 Ejecutar el Servidor de Desarrollo\nInicia el servidor de desarrollo de Django:\npython manage.py runserver",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#probar-los-endpoints",
    "href": "unidades/ejercicios/lab1.html#probar-los-endpoints",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "5.2 Probar los Endpoints",
    "text": "5.2 Probar los Endpoints\nUtiliza herramientas como Postman o cURL para probar los endpoints:\n\nListar categorías: GET /api/categories/\nCrear categoría: POST /api/categories/\nObtener categoría específica: GET /api/categories/{id}/\nActualizar categoría: PUT /api/categories/{id}/\nEliminar categoría: DELETE /api/categories/{id}/\n\nY lo mismo para productos y pedidos.\n\nListar productos: GET /api/products/\nCrear producto: POST /api/products/\nObtener producto específico: GET /api/products/{id}/\nActualizar producto: PUT /api/products/{id}/\nEliminar producto: DELETE /api/products/{id}/",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#instalar-django-rest-swagger",
    "href": "unidades/ejercicios/lab1.html#instalar-django-rest-swagger",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "1. Instalar Django Rest Swagger",
    "text": "1. Instalar Django Rest Swagger\nInstala Django Rest Swagger usando pip:\npip install drf-yasg",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#configurar-django-rest-swagger",
    "href": "unidades/ejercicios/lab1.html#configurar-django-rest-swagger",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "2. Configurar Django Rest Swagger",
    "text": "2. Configurar Django Rest Swagger\nAñade ‘rest_framework_swagger’ a la lista INSTALLED_APPS en ecommerce_project/settings.py:\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom rest_framework import permissions\nfrom drf_yasg.views import get_schema_view\nfrom drf_yasg import openapi\n\nschema_view = get_schema_view(\n    openapi.Info(\n        title=\"E-commerce API\",\n        default_version='v1',\n        description=\"API documentation for the E-commerce project\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@ecommerce.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,\n    permission_classes=(permissions.AllowAny,),\n)\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('products.urls')),\n    path('docs/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc', cache_timeout=0), name='schema-redoc'),\n]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#configurar-las-urls",
    "href": "unidades/ejercicios/lab1.html#configurar-las-urls",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "3. Configurar las URLs",
    "text": "3. Configurar las URLs\nAñade las URLs de Swagger al archivo principal de URLs del proyecto:\n´´´\nfrom rest_framework_swagger.views import get_swagger_view\n\nschema_view = get_swagger_view(title='E-Commerce API')\n\nurlpatterns = [\n    ´´´\n    path('docs/', schema_view),\n]\n\n\n\n\n\n\nTip\n\n\n\nPara evitar un error común es necesario instalr setuptools con el siguiente comando:\npip install setuptools\n\n\nFinalmente es necesario agregar el siguiente código al final del archivo settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'drf_yasg',\n    'rest_framework',\n    'products',\n]\n\n´´´\nREST_FRAMEWORK = {\n    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema'\n}\n\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:8000\",\n    \"http://127.0.0.1:8000\",\n    # Añade otros orígenes permitidos aquí\n]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/lab1.html#probar-la-documentación",
    "href": "unidades/ejercicios/lab1.html#probar-la-documentación",
    "title": "Desarrollo del Backend para un E-Commerce con Django Rest Framework",
    "section": "4. Probar la Documentación",
    "text": "4. Probar la Documentación",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Desarrollo del Backend para un E-Commerce con Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_git_github-000.html",
    "href": "unidades/ejercicios/ejercicios_git_github-000.html",
    "title": "Ejercicios de Git y Github",
    "section": "",
    "text": "Ejercicio 1\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de texto con tu nombre y subirlo al repositorio\nHacer un commit con el mensaje “Agrego mi nombre”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"Mi nombre es: [Tu nombre]\" &gt; nombre.txt\ngit add nombre.txt\ngit commit -m \"Agrego mi nombre\"\ngit push origin master\n\n\n\nEjercicio 2\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima tu nombre\nHacer un commit con el mensaje “Agrego archivo de python”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Mi nombre es: [Tu nombre]')\" &gt; nombre.py\ngit add nombre.py\ngit commit -m \"Agrego archivo de python\"\ngit push origin master\n\n\n\nEjercicio 3\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de bienvenida\nHacer un commit con el mensaje “Agrego saludo de bienvenida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Hola, bienvenido')\" &gt; saludo.py\ngit add saludo.py\ngit commit -m \"Agrego saludo de bienvenida\"\ngit push origin master\n\n\n\nEjercicio 4\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de despedida\nHacer un commit con el mensaje “Agrego saludo de despedida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Adios, hasta luego')\" &gt; despedida.py\ngit add despedida.py\ngit commit -m \"Agrego saludo de despedida\"\ngit push origin master\n\n\n\nEjercicio 5\n\nCrear un repositorio en Github\nClonar el repositorio en tu computadora\nCrear un archivo de python que imprima un saludo de bienvenida y un saludo de despedida\nHacer un commit con el mensaje “Agrego saludo de bienvenida y despedida”\nHacer un push al repositorio\n\n\n\nRespuesta:\n\ngit clone [url del repositorio]\ncd [nombre del repositorio]\necho \"print('Hola, bienvenido')\" &gt; saludo.py\necho \"print('Adios, hasta luego')\" &gt; despedida.py\ngit add saludo.py despedida.py\ngit commit -m \"Agrego saludo de bienvenida y despedida\"\ngit push origin master",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Ejercicios de Git y Github</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html",
    "href": "unidades/ejercicios/ejercicios_python-001.html",
    "title": "Ejercicios Python - Nivel 1",
    "section": "",
    "text": "Ejercicio 1",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 1",
    "section": "",
    "text": "Crear un programa que muestre por pantalla la cadena “Hola Mundo!”.\n\n\n\nSolución\n\nprint(\"Hola Mundo!\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 2",
    "text": "Ejercicio 2\n\nCrear un programa que muestre por pantalla tu nombre.\n\n\n\nSolución\n\nprint(\"Tu nombre\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 3",
    "text": "Ejercicio 3\n\nCrear un programa que pida al usuario que introduzca su nombre y muestre por pantalla la cadena “Hola”, seguido del nombre y un signo de exclamación.\n\n\n\nSolución\n\nnombre = input(\"Introduce tu nombre: \")\nprint(\"Hola\", nombre, \"!\")\nOtra forma de hacerlo:\nnombre = input(\"Introduce tu nombre: \")\nprint(f\"Hola {nombre}!\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 4",
    "text": "Ejercicio 4\n\nCrear un programa que pregunte al usuario por el número de horas trabajadas y el coste por hora. Después debe mostrar por pantalla la paga que le corresponde.\n\n\n\nSolución\n\nhoras = float(input(\"Introduce tus horas de trabajo: \"))\ncoste = float(input(\"Introduce lo que cobras por hora: \"))\npaga = horas * coste\nprint(\"Tu paga es de\", paga)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-001.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 1",
    "section": "Ejercicio 5",
    "text": "Ejercicio 5\n\nCrear un programa que pida al usuario una cantidad de dolares, una tasa de interés y un número de años. Mostrar por pantalla en cuanto se habrá convertido el capital inicial transcurridos esos años si cada año se aplica la tasa de interés introducida.\nFormula del interés compuesto: Cn = C * (1 + x/100) ^ n\n\n\n\nSolución\n\ncantidad = float(input(\"¿Cantidad a invertir? \"))\ninteres = float(input(\"¿Interés porcentual anual? \"))\naños = int(input(\"¿Años?\"))\nprint(\"Capital final: \", round(cantidad * (interes / 100 + 1) ** años, 2))",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Ejercicios Python - Nivel 1</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html",
    "href": "unidades/ejercicios/ejercicios_python-002.html",
    "title": "Ejercicios Python - Nivel 2",
    "section": "",
    "text": "Ejercicio 1",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 2",
    "section": "",
    "text": "Crear una función que reciba una lista de números y devuelva su media aritmética.\nEjemplo: media_aritmetica([1, 2, 3, 4, 5]) -&gt; 3.0\n\n\n\nPosible solución\n\ndef media_aritmetica(lista):\n    return sum(lista) / len(lista)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 2",
    "text": "Ejercicio 2\n\nCrear una función que reciba una lista de números y devuelva su mediana.\nEjemplo: mediana([1, 2, 3, 4, 5]) -&gt; 3.0\n\n\n\nPosible solución\n\ndef mediana(lista):\n    lista_ordenada = sorted(lista)\n    n = len(lista_ordenada)\n    if n % 2 == 0:\n        return (lista_ordenada[n // 2 - 1] + lista_ordenada[n // 2]) / 2\n    else:\n        return lista_ordenada[n // 2]",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 3",
    "text": "Ejercicio 3\n\nCrear una función que reciba una lista de números y devuelva su moda.\nSi hay más de una moda, devolver una lista con todas las modas.\nSi no hay moda, devolver una lista vacía.\nLa moda es el número que más veces se repite en una lista.\nSi todos los números se repiten el mismo número de veces, no hay moda.\nEjemplo: moda([1, 2, 3, 2, 3, 4]) -&gt; [2, 3]\n\n\n\nPosible solución\n\ndef moda(lista):\n    frecuencias = {}\n    for numero in lista:\n        if numero in frecuencias:\n            frecuencias[numero] += 1\n        else:\n            frecuencias[numero] = 1\n    max_frecuencia = max(frecuencias.values())\n    modas = [numero for numero, frecuencia in frecuencias.items() if frecuencia == max_frecuencia]\n    return modas if len(modas) &gt; 1 else modas[0] if modas else []",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 4",
    "text": "Ejercicio 4\n\nCrear una función que reciba una lista de números y devuelva su desviación típica.\nLa desviación típica es la raíz cuadrada de la varianza.\nLa varianza es la media de los cuadrados de las diferencias entre cada número y la media aritmética.\nEjemplo: desviacion_tipica([1, 2, 3, 4, 5]) -&gt; 1.4142135623730951\n\n\n\nPosible solución\n\ndef desviacion_tipica(lista):\n    media = sum(lista) / len(lista)\n    varianza = sum((numero - media) ** 2 for numero in lista) / len(lista)\n    return varianza ** 0.5",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-002.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 2",
    "section": "Ejercicio 5",
    "text": "Ejercicio 5\n\nCrear una función que reciba una lista de números y devuelva su coeficiente de variación.\nEl coeficiente de variación es la desviación típica dividida por la media aritmética.\nEjemplo: coeficiente_variacion([1, 2, 3, 4, 5]) -&gt; 0.4472135954999579\n\n\n\nPosible solución\n\ndef coeficiente_variacion(lista):\n    media = sum(lista) / len(lista)\n    desviacion_tipica = sum((numero - media) ** 2 for numero in lista) / len(lista) ** 0.5\n    return desviacion_tipica / media",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Ejercicios Python - Nivel 2</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html",
    "href": "unidades/ejercicios/ejercicios_python-003.html",
    "title": "Ejercicios Python - Nivel 3",
    "section": "",
    "text": "Ejercicio 1:",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 3",
    "section": "",
    "text": "Crear una lista vacía y agregar elementos a la misma hasta que el usuario ingrese “fin”.\n\n\n\nPosible solución\n\nlista = []\nwhile True:\n    elemento = input(\"Ingrese un elemento: \")\n    if elemento == \"fin\":\n        break\n    lista.append(elemento)\nprint(lista)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 2:",
    "text": "Ejercicio 2:\n\nCrear una lista con los números del 1 al 10 y mostrar los números pares.\n\n\n\nPosible solución\n\nlista = list(range(1, 11))\nfor numero in lista:\n    if numero % 2 == 0:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 3:",
    "text": "Ejercicio 3:\n\nCrear una lista con los números del 1 al 10 y mostrar los números impares.\n\n\n\nPosible solución\n\nlista = list(range(1, 11))\nfor numero in lista:\n    if numero % 2 != 0:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 4:",
    "text": "Ejercicio 4:\n\nCrear una lista de nombres de estudiantes y mostrar aquellos cuyos nombres comiencen con la letra “A”.\n\n\n\nPosible solución\n\nnombres = [\"Ana\", \"Juan\", \"Pedro\", \"Andrea\", \"Lucía\", \"Antonio\"]\nfor nombre in nombres:\n    if nombre[0].lower() == \"a\":\n        print(nombre)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-003.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 3",
    "section": "Ejercicio 5:",
    "text": "Ejercicio 5:\n\nCrear una lista de números y mostrar aquellos que sean mayores a 100.\n\n\n\nPosible solución\n\nnumeros = [10, 20, 150, 200, 300, 400, 500]\nfor numero in numeros:\n    if numero &gt; 100:\n        print(numero)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Ejercicios Python - Nivel 3</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html",
    "href": "unidades/ejercicios/ejercicios_python-004.html",
    "title": "Ejercicios Python - Nivel 4",
    "section": "",
    "text": "Ejercicio 1:",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-1",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-1",
    "title": "Ejercicios Python - Nivel 4",
    "section": "",
    "text": "Crear un conjunto vacío y agregar elementos al mismo hasta que el usuario ingrese “fin”.\n\n\n\nPosible solución\n\nconjunto = set()\nwhile True:\n    elemento = input(\"Ingrese un elemento o 'fin' para terminar: \")\n    if elemento == \"fin\":\n        break\n    conjunto.add(elemento)\nprint(conjunto)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-2",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-2",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 2:",
    "text": "Ejercicio 2:\n\nCrear un diccionario vacío y agregar elementos al mismo hasta que el usuario ingrese “fin”.\nCada elemento debe ser una tupla con dos elementos, el primero será la clave y el segundo el valor.\nSi el usuario ingresa una clave que ya existe, se debe mostrar un mensaje de error y no agregar el elemento.\n\n\n\nPosible solución\n\ndiccionario = dict()\nwhile True:\n    clave = input(\"Ingrese una clave o 'fin' para terminar: \")\n    if clave == \"fin\":\n        break\n    if clave in diccionario:\n        print(\"La clave ya existe\")\n        continue\n    valor = input(\"Ingrese un valor: \")\n    diccionario[clave] = valor\nprint(diccionario)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-3",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-3",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 3:",
    "text": "Ejercicio 3:\n\nCrear un diccionario con los nombres de los meses como claves y la cantidad de días que tienen como valor.\nMostrar los meses que tienen 31 días.\nMostrar los meses que tienen 30 días.\nMostrar los meses que tienen 28 días.\n\n\n\nPosible solución\n\nmeses = {\n    \"enero\": 31,\n    \"febrero\": 28,\n    \"marzo\": 31,\n    \"abril\": 30,\n    \"mayo\": 31,\n    \"junio\": 30,\n    \"julio\": 31,\n    \"agosto\": 31,\n    \"septiembre\": 30,\n    \"octubre\": 31,\n    \"noviembre\": 30,\n    \"diciembre\": 31\n}\n\nmeses_31 = [mes for mes, dias in meses.items() if dias == 31]\nmeses_30 = [mes for mes, dias in meses.items() if dias == 30]\nmeses_28 = [mes for mes, dias in meses.items() if dias == 28]\n\nprint(\"Meses con 31 días:\", meses_31)\nprint(\"Meses con 30 días:\", meses_30)\nprint(\"Meses con 28 días:\", meses_28)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-4",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-4",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 4:",
    "text": "Ejercicio 4:\n\nCrear un diccionario con los nombres de los meses como claves y la cantidad de paises de sur america mostrando mediante el pais la capital.\nMostrar la capital de Argentina.\nMostrar la capital de Brasil.\nMostrar la capital de Ecuador.\n\n\n\nPosible solución\n\npaises = {\n    \"Argentina\": \"Buenos Aires\",\n    \"Bolivia\": \"La Paz\",\n    \"Brasil\": \"Brasilia\",\n    \"Chile\": \"Santiago\",\n    \"Colombia\": \"Bogotá\",\n    \"Ecuador\": \"Quito\",\n    \"Guyana\": \"Georgetown\",\n    \"Paraguay\": \"Asunción\",\n    \"Perú\": \"Lima\",\n    \"Surinam\": \"Paramaribo\",\n    \"Uruguay\": \"Montevideo\",\n    \"Venezuela\": \"Caracas\"\n}\n\nprint(\"La capital de Argentina es\", paises[\"Argentina\"])\nprint(\"La capital de Brasil es\", paises[\"Brasil\"])\nprint(\"La capital de Ecuador es\", paises[\"Ecuador\"])",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-5",
    "href": "unidades/ejercicios/ejercicios_python-004.html#ejercicio-5",
    "title": "Ejercicios Python - Nivel 4",
    "section": "Ejercicio 5:",
    "text": "Ejercicio 5:\n\nCrear un diccinario con los nombres de los presidentes de Ecuador y la fecha en la que asumieron el cargo.\nMostrar la fecha en la que asumió el presidente Eloy Alfaro.\nMostrar la fecha en la que asumió el presidente Garcia Moreno.\n\n\n\nPosible solución\n\npresidentes = {\n\n    \"Gustavo Noboa\": \"23 de noviembre de 2023\",\n    \"Guillermo Lasso\": \"24 de mayo de 2021\",\n    \"Lenín Moreno\": \"24 de mayo de 2017\",\n    \"Rafael Correa\": \"15 de enero de 2007\",\n    \"Jamil Mahuad\": \"10 de agosto de 1998\",\n    \"Abdalá Bucaram\": \"10 de agosto de 1996\",\n    \"Sixto Durán Ballén\": \"10 de agosto de 1992\",\n    \"Rodrigo Borja\": \"10 de agosto de 1988\",\n    \"León Febres Cordero\": \"10 de agosto de 1984\",\n    \"Osvaldo Hurtado\": \"10 de agosto de 1981\",\n    \"Jaime Roldós\": \"10 de agosto de 1979\",\n    \"Guillermo Rodríguez\": \"24 de mayo de 1972\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1968\",\n    \"Otto Arosemena\": \"16 de febrero de 1966\",\n    \"Carlos Julio Arosemena\": \"1 de septiembre de 1961\",\n    \"Camilo Ponce Enríquez\": \"1 de septiembre de 1956\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1952\",\n    \"Galalza Castro\": \"1 de septiembre de 1947\",\n    \"Carlos Arroyo del Río\": \"1 de septiembre de 1940\",\n    \"Andrés Córdova\": \"1 de septiembre de 1938\",\n    \"Alberto Enríquez Gallo\": \"1 de septiembre de 1937\",\n    \"Federico Páez\": \"1 de septiembre de 1935\",\n    \"José María Velasco Ibarra\": \"1 de septiembre de 1934\",\n    \"Abelardo Montalvo\": \"1 de septiembre de 1933\",\n    \"Neptalí Bonifaz\": \"1 de septiembre de 1931\",\n    \"Isidro Ayora\": \"1 de septiembre de 1926\",\n    \"Gonzalo Córdova\": \"1 de septiembre de 1924\",\n    \"José Luis Tamayo\": \"1 de septiembre de 1920\",\n    \"Leónidas Plaza\": \"1 de septiembre de 1912\",\n    \"Emilio Estrada\": \"1 de septiembre de 1911\",\n    \"Carlos Freile Zaldumbide\": \"1 de septiembre de 1907\",\n    \"Eloy Alfaro\": \"1 de septiembre de 1906\",\n    \"Leónidas Plaza\": \"1 de septiembre de 1901\",\n    \"Eloy Alfaro\": \"1 de septiembre de 1897\",\n    \"Antonio Flores Jijón\": \"1 de septiembre de 1888\",\n    \"José Plácido Caamaño\": \"1 de septiembre de 1883\",\n    \"Pedro José de Arteta\": \"1 de septiembre de 1882\",\n    \"Francisco Xavier León\": \"1 de septiembre de 1878\",\n    \"Antonio Borrero\": \"1 de septiembre de 1875\",\n    \"Gabriel García Moreno\": \"1 de septiembre de 1861\",\n    \"Francisco Robles\": \"1 de septiembre de 1856\",\n    \"Diego Noboa\": \"1 de septiembre de 1850\",\n    \"José Joaquín de Olmedo\": \"1 de septiembre de 1845\",\n    \"Juan José Flores\": \"1 de septiembre de 1830\",\n}\n\nprint(\"Eloy Alfaro asumió el\", presidentes[\"Eloy Alfaro\"])\nprint(\"García Moreno asumió el\", presidentes[\"Gabriel García Moreno\"])",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Ejercicios Python - Nivel 4</span>"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Acerca de mi",
    "section": "",
    "text": "¡Hola! Soy Diego Saavedra, un experto en desarrollo avanzado de software e investigación. Mi amplia experiencia abarca diversas tecnologías, incluyendo Python (Django, Flask, Fast API) y JavaScript (Express, Next, React, Nestjs), así como también tengo conocimientos sólidos en bases de datos, arquitecturas de software y liderazgo ágil.\nMi pasión por la innovación, el desarrollo y la educación me ha llevado a destacarme como un profesional versátil e invaluable. Estoy constantemente listo para enfrentar desafíos técnicos y liderar proyectos de vanguardia.\nMi formación académica incluye el ser estudiante de Doctorado centrado en la inteligencia artificial, estoy enfocando mi investigación en la detección de TDA+H y Asperger mediante Visión Artificial a traves de algoritmos de Inteligencia Artificial. Además, poseo una Maestría en Ciencias de la Computación, con un enfoque en el Deep Learning (Convolutional Neural Network) y la Atención.\nCon esta sólida base académica y experiencia profesional, estoy preparado para aportar soluciones innovadoras y liderar equipos hacia el éxito en cualquier proyecto tecnológico que se me presente.\nAdemás, tengo experiencia en el desarrollo móvil utilizando Flutter y en la implementación de soluciones backend utilizando servicios Backend as a Service (BaaS) como Firebase y Supabase.\nEn el ámbito de la educación, he sido docente de programación en institutos y universidades, actualmente soy parte del Departamento de Ciencias de la Computación en la Universidad de las Fuerzas Armadas ESPE, donde he impartido asignaturas de desarrollo de Software Web con tecnologías como JavaScript, Java y C# asi como sus respectivos frameworks.\nMi experiencia en el desarrollo de software y la investigación me ha permitido adquirir habilidades de liderazgo, trabajo en equipo y comunicación efectiva. Estoy seguro de que mi experiencia y habilidades serán de gran valor para cualquier proyecto tecnológico que se me presente.\nEn este curso aprenderás a desarrollar aplicaciones web con Python y Django, una de las tecnologías más populares y poderosas para el desarrollo de aplicaciones web. A lo largo del curso, aprenderás a crear aplicaciones web desde cero, utilizando Django y Python, y a implementar funcionalidades avanzadas como integración con APIs externas y mucho más.\nTambien veremos tecnologías como Git, Github, Docker, Python, Django, Django Rest Framework, Html5, Css3, JavaScript, Nodejs, Npm y React.\n\n\n¡Estoy emocionado de compartir contigo mi conocimiento y experiencia en el desarrollo de aplicaciones web con Python y Django!"
  },
  {
    "objectID": "license.html",
    "href": "license.html",
    "title": "Licencia",
    "section": "",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  },
  {
    "objectID": "index.html#de-qué-trata-este-diplomado",
    "href": "index.html#de-qué-trata-este-diplomado",
    "title": "Diplomado en IA Aplicada a la Educación",
    "section": "¿De qué trata este diplomado?",
    "text": "¿De qué trata este diplomado?\nEste diplomado me llevará desde los conceptos básicos de la inteligencia artificial hasta la aplicación práctica de herramientas y técnicas en el ámbito educativo.\nA través de una combinación de teoría y ejercicios prácticos, me sumergiré en los principios esenciales de la IA y avanzaré hacia la creación de proyectos que integren la inteligencia artificial en contextos educativos reales.\nDesde la exploración de tecnologías emergentes hasta la implementación de soluciones innovadoras, este diplomado me proporcionará una comprensión sólida y experiencia práctica en el uso de IA en la educación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  },
  {
    "objectID": "index.html#para-quién-es-este-diplomado",
    "href": "index.html#para-quién-es-este-diplomado",
    "title": "Diplomado en IA Aplicada a la Educación",
    "section": "¿Para quién es este diplomado?",
    "text": "¿Para quién es este diplomado?\nEste diplomado está diseñado para educadores, estudiantes y profesionales que deseen comprender y aplicar la inteligencia artificial en el ámbito educativo.\nYa sea que seas un docente buscando mejorar tus métodos de enseñanza, un estudiante curioso o un profesional que busca incorporar IA en su trabajo, este diplomado es para ti. Todos son bienvenidos a participar y explorar el emocionante potencial de la IA en la educación.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenido</span>"
    ]
  }
]